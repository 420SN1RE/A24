+++
title = "Matpotlib"
weight = 121
+++

![Biblioh√®que MatplotLib](../matplotlib.jpg?width=30vw)

## Qu'est-ce que matplotlib ?

Matplotlib est une biblioth√®que de visualisation de donn√©es en Python, utilis√©e pour g√©n√©rer des graphiques.

## Installation de Matplotlib (d√©j√† fait sur les ordinateurs du c√©gep)

Avant de commencer, assurez vous d'avoir Matplotlib install√©. Vous pouvez l'installer via pip :

```bash
pip install matplotlib
```

## Composants de base de Matplotlib

1. **Pyplot**: C'est un module qui offre une interface de trac√© simple. Pour l'utiliser, il faut d'abord l'import√© dans votre code comme suit:

```python
import matplotlib.pyplot as plt
```

Pour v√©rifier que Matplotlib est bien install√© sur votre environnement :

```python
# Version de Matplotlib
plt.__version__
```

2. **Figure et axes**: La **Figure** c'est la fen√™tre o√π les graphiques sont dessin√©s. Les Axes sont une partie de la figure o√π les donn√©es sont trac√©es.

```python
fig, ax = plt.subplots()
```

3. **Types de graphiques courants**:

    - **Graphique lin√©aire**: Utilis√© pour tracer des points connect√©s par des lignes.
    - **Histogramme**: Utilis√© pour afficher la distribution des donn√©es.
    - **Graphique en barres**: Utilis√© pour comparer des cat√©gories.
    - **Graphique en dispersion (scatter plot)**: Utilis√© pour montrer la relation entre deux variables.
    
#### Exemples de base

1. **Graphique lin√©aire**:
```python
import matplotlib.pyplot as plt

# Donn√©es
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]

# Cr√©ation du graphique
plt.plot(x, y)

# Ajout de labels et titre
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graphique lin√©aire')

# Affichage
plt.show()
```

2. **Histogramme**:
```python
import matplotlib.pyplot as plt

# Donn√©es
data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]

# Cr√©ation de l'histogramme
plt.hist(data, bins=4)

# Ajout de labels et titre
plt.xlabel('Valeur')
plt.ylabel('Fr√©quence')
plt.title('Histogramme')

# Affichage
plt.show()
```

3. **Graphique en barres**:
```python
import matplotlib.pyplot as plt

# Donn√©es
categories = ['A', 'B', 'C']
values = [5, 7, 3]

# Cr√©ation du graphique en barres
plt.bar(categories, values)

# Ajout de labels et titre
plt.xlabel('Cat√©gories')
plt.ylabel('Valeurs')
plt.title('Graphique en barres')

# Affichage
plt.show()
```

4. **Graphique en dispersion**:
```python
import matplotlib.pyplot as plt

# Donn√©es
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]

# Cr√©ation du graphique en dispersion
plt.scatter(x, y)

# Ajout de labels et titre
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graphique en dispersion')

# Affichage
plt.show()
```

### Tableau des fonctions et m√©thodes incontournables

| Fonction/M√©thode        | Description                                                              |
|-------------------------|--------------------------------------------------------------------------|
| `plt.plot()`            | Cr√©e un graphique lin√©aire.                                              |
| `plt.hist()`            | Cr√©e un histogramme.                                                     |
| `plt.bar()`             | Cr√©e un graphique en barres.                                             |
| `plt.scatter()`         | Cr√©e un graphique en dispersion.                                         |
| `plt.xlabel()`          | Ajoute une √©tiquette √† l'axe des abscisses.                              |
| `plt.ylabel()`          | Ajoute une √©tiquette √† l'axe des ordonn√©es.                              |
| `plt.title()`           | Ajoute un titre au graphique.                                            |
| `plt.show()`            | Affiche le graphique.                                                    |
| `plt.savefig()`         | Enregistre le graphique sous forme d'image.                              |
| `fig, ax = plt.subplots()`| Cr√©e une figure et des axes, permettant des graphes plus complexes.     |


#### Exemple d'utilisation de Pandas avec Matplotlib

1. **Charger des donn√©es et cr√©er un graphique √† barres**:
```python
import pandas as pd
import matplotlib.pyplot as plt

# Donn√©es sous forme de dictionnaire
data = {'Nom': ['Alice', 'Bob', 'Charlie', 'David'],
        'Score': [88, 92, 85, 90]}

# Cr√©ation d'un DataFrame
df = pd.DataFrame(data)

# Cr√©ation du graphique √† barres √† partir du DataFrame
df.plot(kind='bar', x='Nom', y='Score')

# Ajout de labels et titre
plt.xlabel('Nom')
plt.ylabel('Score')
plt.title('Scores des √©tudiants')

# Affichage
plt.show()
```

2. **Graphique lin√©aire √† partir de donn√©es temporelles**:
```python
import pandas as pd
import matplotlib.pyplot as plt

# Cr√©ation d'une s√©rie de donn√©es temporelles
date_range = pd.date_range(start='1/1/2022', periods=5, freq='D')
data = {'Temp√©rature': [20, 21, 19, 22, 20]}
df = pd.DataFrame(data, index=date_range)

# Cr√©ation du graphique lin√©aire
df.plot()

# Ajout de labels et titre
plt.xlabel('Date')
plt.ylabel('Temp√©rature (¬∞C)')
plt.title('Variation de la temp√©rature au cours des jours')

# Affichage
plt.show()
```

### Tableau des fonctions et m√©thodes incontournables

| Fonction/M√©thode        | Description                                                              |
|-------------------------|--------------------------------------------------------------------------|
| `plt.plot()`            | Cr√©e un graphique lin√©aire.                                              |
| `plt.hist()`            | Cr√©e un histogramme.                                                     |
| `plt.bar()`             | Cr√©e un graphique en barres.                                             |
| `plt.scatter()`         | Cr√©e un graphique en dispersion.                                         |
| `plt.xlabel()`          | Ajoute une √©tiquette √† l'axe des abscisses.                              |
| `plt.ylabel()`          | Ajoute une √©tiquette √† l'axe des ordonn√©es.                              |
| `plt.title()`           | Ajoute un titre au graphique.                                            |
| `plt.show()`            | Affiche le graphique.                                                    |
| `plt.savefig()`         | Enregistre le graphique sous forme d'image.                              |
| `fig, ax = plt.subplots()`| Cr√©e une figure et des axes, permettant des graphes plus complexes.     |
| `pd.read_csv()`         | Charge un fichier CSV dans un DataFrame Pandas.                          |
| `pd.DataFrame()`        | Cr√©e un DataFrame Pandas √† partir de donn√©es diverses.                   |
| `df.plot()`             | Cr√©e un graphique √† partir d'un DataFrame Pandas.                        |

Voil√† de quoi te donner une bonne base pour utiliser Matplotlib avec Pandas pour tes visualisations de donn√©es en sciences de la nature! üöÄ

Parfait! Voici quelques exercices pratiques pour utiliser Pandas et Matplotlib avec des fichiers CSV. Ces exercices couvrent des th√®mes des sciences de la nature et de la sant√©.

### Exercice 1: Analyse des donn√©es de temp√©rature

#### Objectif:
Analyser les donn√©es de temp√©rature sur une ann√©e et visualiser les variations mensuelles.

#### Donn√©es:
Un fichier CSV nomm√© `temperatures.csv` contenant deux colonnes : `Date` (format AAAA-MM-JJ) et `Temp√©rature` (en ¬∞C).

#### Instructions:
1. **Charger les donn√©es**:
    ```python
    import pandas as pd
    
    df = pd.read_csv('temperatures.csv')
    ```

2. **Convertir la colonne `Date` en type datetime**:
    ```python
    df['Date'] = pd.to_datetime(df['Date'])
    ```

3. **Ajouter une colonne `Mois`**:
    ```python
    df['Mois'] = df['Date'].dt.month
    ```

4. **Calculer la temp√©rature moyenne pour chaque mois**:
    ```python
    moyennes_mensuelles = df.groupby('Mois')['Temp√©rature'].mean()
    ```

5. **Visualiser les donn√©es avec un graphique lin√©aire**:
    ```python
    import matplotlib.pyplot as plt
    
    plt.plot(moyennes_mensuelles.index, moyennes_mensuelles.values)
    plt.xlabel('Mois')
    plt.ylabel('Temp√©rature moyenne (¬∞C)')
    plt.title('Variation mensuelle de la temp√©rature')
    plt.show()
    ```

### Exercice 2: Analyse des donn√©es de patients

#### Objectif:
√âtudier la distribution d'√¢ges des patients et comparer les taux de cholest√©rol par groupe d'√¢ge.

#### Donn√©es:
Un fichier CSV nomm√© `patients.csv` contenant les colonnes : `Age`, `Sexe`, `Cholest√©rol` (en mg/dL).

#### Instructions:
1. **Charger les donn√©es**:
    ```python
    import pandas as pd
    
    df = pd.read_csv('patients.csv')
    ```

2. **Cr√©er des groupes d'√¢ge**:
    ```python
    bins = [0, 20, 40, 60, 80, 100]
    labels = ['0-20', '21-40', '41-60', '61-80', '81-100']
    df['Groupe d\'√¢ge'] = pd.cut(df['Age'], bins=bins, labels=labels)
    ```

3. **Calculer le taux moyen de cholest√©rol par groupe d'√¢ge**:
    ```python
    cholesterol_par_age = df.groupby('Groupe d\'√¢ge')['Cholest√©rol'].mean()
    ```

4. **Visualiser les donn√©es avec un graphique en barres**:
    ```python
    import matplotlib.pyplot as plt
    
    cholesterol_par_age.plot(kind='bar')
    plt.xlabel('Groupe d\'√¢ge')
    plt.ylabel('Cholest√©rol moyen (mg/dL)')
    plt.title('Cholest√©rol moyen par groupe d\'√¢ge')
    plt.show()
    ```

### Exercice 3: Analyse des pr√©cipitations annuelles

#### Objectif:
Analyser les pr√©cipitations annuelles sur plusieurs ann√©es et visualiser les tendances.

#### Donn√©es:
Un fichier CSV nomm√© `precipitations.csv` contenant les colonnes : `Ann√©e` et `Pr√©cipitation` (en mm).

#### Instructions:
1. **Charger les donn√©es**:
    ```python
    import pandas as pd
    
    df = pd.read_csv('precipitations.csv')
    ```

2. **Calculer la pr√©cipitation totale par ann√©e**:
    ```python
    total_par_annee = df.groupby('Ann√©e')['Pr√©cipitation'].sum()
    ```

3. **Visualiser les donn√©es avec un graphique lin√©aire**:
    ```python
    import matplotlib.pyplot as plt
    
    plt.plot(total_par_annee.index, total_par_annee.values)
    plt.xlabel('Ann√©e')
    plt.ylabel('Pr√©cipitation totale (mm)')
    plt.title('Pr√©cipitations annuelles')
    plt.show()
    ```
