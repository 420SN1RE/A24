<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>La programmation orientée objet (POO) :: 420-SN1-RE</title>
    <link>https://example.org/bases/langage-de-prog/poo/index.html</link>
    <description>La programmation orientée objet (POO) est un concept clé en Python et dans de nombreux autres langages de programmation. Voici une introduction simple :&#xA;Concepts de base de la POO en Python Classes et Objets Classe : Une classe est comme un plan ou un modèle pour créer des objets. Elle définit les attributs (données) et les méthodes (fonctions) que les objets créés à partir de cette classe auront. Objet : Un objet est une instance d’une classe. Par exemple, si Chien est une classe, alors mon_chien peut être un objet de cette classe. class Chien: def __init__(self, nom, age): self.nom = nom self.age = age def aboyer(self): print(&#34;Woof!&#34;) mon_chien = Chien(&#34;Rex&#34;, 5) mon_chien.aboyer() # Affiche &#34;Woof!&#34; Encapsulation L’encapsulation consiste à restreindre l’accès à certaines parties d’un objet. Cela se fait en utilisant des attributs privés (commençant par un underscore _) et des méthodes pour accéder et modifier ces attributs. class CompteBancaire: def __init__(self, solde): self._solde = solde def deposer(self, montant): self._solde += montant def retirer(self, montant): if montant &lt;= self._solde: self._solde -= montant else: print(&#34;Fonds insuffisants&#34;) def afficher_solde(self): print(f&#34;Solde: {self._solde}&#34;) mon_compte = CompteBancaire(100) mon_compte.deposer(50) mon_compte.afficher_solde() # Affiche &#34;Solde: 150&#34; Héritage L’héritage permet de créer une nouvelle classe à partir d’une classe existante. La nouvelle classe (classe dérivée) hérite des attributs et méthodes de la classe existante (classe de base). class Animal: def __init__(self, nom): self.nom = nom def parler(self): pass class Chien(Animal): def parler(self): print(&#34;Woof!&#34;) class Chat(Animal): def parler(self): print(&#34;Meow!&#34;) mon_chien = Chien(&#34;Rex&#34;) mon_chat = Chat(&#34;Mimi&#34;) mon_chien.parler() # Affiche &#34;Woof!&#34; mon_chat.parler() # Affiche &#34;Meow!&#34; Polymorphisme Le polymorphisme permet d’utiliser une interface commune pour des objets de différentes classes. Par exemple, différentes classes peuvent avoir une méthode parler, mais chaque classe peut l’implémenter différemment. for animal in [mon_chien, mon_chat]: animal.parler()</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://example.org/bases/langage-de-prog/poo/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>