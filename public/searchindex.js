var relearn_searchindex = [
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Pourquoi bien nommer les choses ? La raison est simple, on passe plus de temps a lire du code qu’a l’écrire, donc pour se simplifier la tâche de lecture du code, quel que soit le langage de programmation, il est important de bien nommer les différentes variables, méthodes etc.\nConventions de nommage en python En plus des règles liées au langage qui mèneront à un problème d’exécution (par exemple, un nom de variable ne doit pas commencer par des chiffres), il existe un nombre de convention concernant le nommage en python.\nhttps://peps.python.org/pep-0008/#naming-conventions\nType Public Packages lower_with_under Modules lower_with_under Classes CapWords Exceptions CapWords Fonctions lower_with_under() Constantes Global / Class CAPS_WITH_UNDER Variables Global / Class lower_with_under Variables d’Instance lower_with_under Nom de Methode lower_with_under() Paramètres Function / Method lower_with_under Variables locales lower_with_under La logique de nommage Bien nommer, va au dela des règles et convention du langage.\nÊtre le plus explicite possible, écrivez un nom complet. Préférez minutes à min. Si vous avez du mal à donner un nom à votre fonction, il y a probablement un problème de logique dans votre fonction. Variable non définie L’erreur “variable undefined” en Python se manifeste généralement sous la forme d’une exception NameError. Cela se produit lorsque vous essayez d’utiliser une variable qui n’a pas été définie ou déclarée dans le contexte actuel. Voici quelques scénarios courants où cette erreur peut survenir et comment les éviter :\n1. Utilisation d’une variable non définie Si vous essayez d’accéder à une variable avant de l’avoir définie, Python ne saura pas de quoi il s’agit et lèvera une NameError.\n# Mauvais exemple print(x) # NameError: name 'x' is not defined Solution : Assurez vous que la variable est définie avant de l’utiliser.\n# Bon exemple x = 10 print(x) # Affiche 10 2. Erreur de typographie Une simple faute de frappe dans le nom de la variable peut entraîner une NameError.\n# Mauvais exemple variable = 5 print(varible) # NameError: name 'varible' is not defined Solution : Vérifiez l’orthographe des noms de variables.\n# Bon exemple variable = 5 print(variable) # Affiche 5 3. Portée des variables Les variables définies à l’intérieur d’une fonction ne sont pas accessibles en dehors de cette fonction.\ndef ma_fonction(): y = 20 ma_fonction() print(y) # NameError: name 'y' is not defined Solution : Si vous avez besoin d’utiliser une variable en dehors de la fonction, vous devez la retourner ou la définir comme variable globale (ce qui est généralement déconseillé).\ndef ma_fonction(): y = 20 return y y = ma_fonction() print(y) # Affiche 20 4. Variables locales et globales Confondre les variables locales et globales peut également causer des NameError.\nz = 30 def autre_fonction(): print(z) # Fonctionne si z est global autre_fonction() Cependant, si vous essayez de modifier une variable globale sans la déclarer comme telle, vous obtiendrez une erreur.\nz = 30 def encore_une_fonction(): z += 1 # UnboundLocalError: local variable 'z' referenced before assignment encore_une_fonction() Solution : Utilisez le mot-clé global pour modifier une variable globale à l’intérieur d’une fonction.\nz = 30 def encore_une_fonction(): global z z += 1 encore_une_fonction() print(z) # Affiche 31",
    "description": "Pourquoi bien nommer les choses ? La raison est simple, on passe plus de temps a lire du code qu’a l’écrire, donc pour se simplifier la tâche de lecture du code, quel que soit le langage de programmation, il est important de bien nommer les différentes variables, méthodes etc.\nConventions de nommage en python En plus des règles liées au langage qui mèneront à un problème d’exécution (par exemple, un nom de variable ne doit pas commencer par des chiffres), il existe un nombre de convention concernant le nommage en python.",
    "tags": [],
    "title": "Erreurs avec les noms des variables",
    "uri": "/bases/langage-de-prog/erreurs/nomenclature-variables/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "La méthode str.format() nom = \"Philippe\" age = 30 print(\"Je m'appelle {} et j'ai {} ans.\".format(nom, age)) Explication:\n{} est un espace réservé pour une valeur qui sera insérée dans la chaîne de caractères. La méthode format(nom, age) remplace les accolades {} par les valeurs des variables nom et age respectivement. Donc, lorsque ce code est exécuté, il affiche :\nJe m'appelle Philippe et j'ai 30 ans. Cette méthode est très flexible et permet d’insérer plusieurs variables dans une chaîne de caractères de manière claire et lisible. L’opérateur % Exemple:\nnom = \"Nathalie\" age = 30 print(\"Je m'appelle %s et j'ai %d ans.\" % (nom, age)) Explication:\n%s est un espace réservé pour une chaîne de caractères (string).\n%d est un espace réservé pour un entier (integer).\nLa partie (“Je m’appelle %s et j’ai %d ans.” % (nom, age)) signifie que Python va remplacer %s par la valeur de la variable nom et %d par la valeur de la variable age.\nDonc, lorsque ce code est exécuté, il affiche :\nJe m'appelle Nathalie et j'ai 30 ans.",
    "description": "La méthode str.format() nom = \"Philippe\" age = 30 print(\"Je m'appelle {} et j'ai {} ans.\".format(nom, age)) Explication:\n{} est un espace réservé pour une valeur qui sera insérée dans la chaîne de caractères. La méthode format(nom, age) remplace les accolades {} par les valeurs des variables nom et age respectivement. Donc, lorsque ce code est exécuté, il affiche :",
    "tags": [],
    "title": "Formatage des chaines",
    "uri": "/bases/langage-de-prog/chaines-caracteres/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Installations",
    "content": "Pour installer Python sur Windows 10 et Windows 11, suivez ces étapes simples :\nWindows 10 Téléchargez l’installateur Python :\nRendez-vous sur le site officiel de Python et téléchargez la version stable la plus récente pour Windows. Exécutez l’installateur :\nDouble-cliquez sur le fichier téléchargé pour lancer l’installateur. Cochez l’option “Add Python to PATH” pour ajouter Python au chemin d’accès système. Cliquez sur “Install Now” pour une installation par défaut ou sur “Customize installation” pour des options avancées. Vérifiez l’installation :\nOuvrez l’invite de commande (cmd) et tapez python --version pour vérifier que Python est correctement installé. Windows 11 Téléchargez l’installateur Python :\nAllez sur le site officiel de Python et téléchargez la version la plus récente pour Windows. Exécutez l’installateur :\nDouble-cliquez sur le fichier téléchargé. Sélectionnez “Add Python to PATH” et “Install for all users”. Suivez les instructions à l’écran pour compléter l’installation. Vérifiez l’installation :\nOuvrez l’invite de commande et tapez python --version pour confirmer que Python est installé. Tutoriel YouTube (Windows 11) Installer Python sur Windows 11",
    "description": "Pour installer Python sur Windows 10 et Windows 11, suivez ces étapes simples :\nWindows 10 Téléchargez l’installateur Python :\nRendez-vous sur le site officiel de Python et téléchargez la version stable la plus récente pour Windows. Exécutez l’installateur :\nDouble-cliquez sur le fichier téléchargé pour lancer l’installateur. Cochez l’option “Add Python to PATH” pour ajouter Python au chemin d’accès système. Cliquez sur “Install Now” pour une installation par défaut ou sur “Customize installation” pour des options avancées. Vérifiez l’installation :",
    "tags": [],
    "title": "Installation de Python sur Windows",
    "uri": "/bases/outils/installations/python/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Installations",
    "content": "Le processus d’installation commence par le téléchargement du fichier EXE de Visual Studio Code, suivi de quelques instructions à l’écran. Voici les étapes nécessaires pour installer VS Code sur Windows de manière détaillée.\nÉtape 1 : Visitez le site officiel de Visual Studio Code en utilisant n’importe quel navigateur web comme Google Chrome, Microsoft Edge, etc.\nÉtape 2 : Appuyez sur le bouton Télécharger pour Windows sur le site pour commencer le téléchargement de l’application Visual Studio Code.\nÉtape 3 : Lorsque le téléchargement est terminé, l’icône de Visual Studio Code apparaît dans le dossier des téléchargements.\nÉtape 4 : Cliquez sur l’icône de l’installateur pour démarrer le processus d’installation de Visual Studio Code.\nÉtape 5 : Après l’ouverture de l’installateur, il vous demandera d’accepter les termes et conditions de Visual Studio Code. Cliquez sur J’accepte l’accord puis sur le bouton Suivant.\nÉtape 6 : Choisissez l’emplacement des données pour exécuter Visual Studio Code. Il vous demandera ensuite de parcourir l’emplacement. Cliquez ensuite sur le bouton Suivant.\nÉtape 7 : Il vous demandera alors de commencer la configuration de l’installation. Cliquez sur le bouton Installer.\nÉtape 8 : Après avoir cliqué sur Installer, il faudra environ 1 minute pour installer Visual Studio Code sur votre appareil.\nÉtape 9 : Une fois la configuration de l’installation de Visual Studio Code terminée, une fenêtre comme celle-ci apparaîtra. Cochez la case Lancer Visual Studio Code puis cliquez sur Suivant.\nÉtape 10 : Après l’étape précédente, la fenêtre de Visual Studio Code s’ouvre avec succès. Vous pouvez maintenant créer un nouveau fichier dans la fenêtre de Visual Studio Code et choisir un langage pour commencer votre aventure de programmation !\nRéférence : geeksforgeeks.org\nTutoriel YouTube (anglais) Installer VS Code sur Windows 10/11",
    "description": "Le processus d’installation commence par le téléchargement du fichier EXE de Visual Studio Code, suivi de quelques instructions à l’écran. Voici les étapes nécessaires pour installer VS Code sur Windows de manière détaillée.\nÉtape 1 : Visitez le site officiel de Visual Studio Code en utilisant n’importe quel navigateur web comme Google Chrome, Microsoft Edge, etc.",
    "tags": [],
    "title": "Installation de Visual Studio Code sur Windows",
    "uri": "/bases/outils/installations/visual-studio-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Installations",
    "content": "Installation des librairies Python sur Windows 10/11 Python est un langage de programmation puissant et polyvalent, largement utilisé pour l’analyse de données, la visualisation et les calculs scientifiques. Les librairies pandas, matplotlib, numpy et scipy sont parmi les plus populaires pour ces tâches. Ce chapitre vous guidera à travers les étapes nécessaires pour installer ces librairies sur un système Windows 10 ou 11.\nPrérequis Avant de commencer, assurez vous d’avoir installé Python sur votre système. Vous pouvez télécharger la dernière version de Python depuis le site officiel python.org. Pendant l’installation, assurez vous de cocher l’option “Add Python to PATH”.\nÉtape 1 : Ouvrir l’invite de commande (Windows) Ouvrir l’invite de commande sur Windows 10 et Windows 11 est assez simple. Voici les étapes pour chaque version :\nWindows 10 Utiliser le menu Démarrer :\nCliquez sur le bouton Démarrer (icône Windows en bas à gauche de l’écran). Tapez cmd ou invite de commande dans la barre de recherche. Cliquez sur Invite de commandes dans les résultats de recherche. Utiliser le raccourci clavier :\nAppuyez sur les touches Windows + R pour ouvrir la boîte de dialogue Exécuter. Tapez cmd et appuyez sur Entrée. Utiliser le menu contextuel :\nFaites un clic droit sur le bouton Démarrer. Sélectionnez Invite de commandes ou Windows PowerShell (selon la version de Windows 10). Windows 11 Utiliser le menu Démarrer :\nCliquez sur le bouton Démarrer (icône Windows au centre de la barre des tâches). Tapez cmd ou invite de commande dans la barre de recherche. Cliquez sur Invite de commandes dans les résultats de recherche. Utiliser le raccourci clavier :\nAppuyez sur les touches Windows + R pour ouvrir la boîte de dialogue Exécuter. Tapez cmd et appuyez sur Entrée. Utiliser le menu contextuel :\nFaites un clic droit sur le bouton Démarrer. Sélectionnez Terminal Windows ou Windows PowerShell (selon la version de Windows 11). Astuce supplémentaire Pour ouvrir l’invite de commande en tant qu’administrateur, faites un clic droit sur Invite de commandes ou Terminal Windows et sélectionnez Exécuter en tant qu’administrateur.\nÉtape 2 : Installation de pip pip est le gestionnaire de paquets de Python, utilisé pour installer et gérer les librairies Python. Si vous avez installé Python 3.4 ou une version ultérieure, pip est déjà inclus. Pour vérifier si pip est installé, dans l’invite de commande (CMD) tapez :\npip --version Si pip n’est pas installé, vous pouvez l’installer en téléchargeant le script get-pip.py depuis ce lien et en l’exécutant avec Python :\npython get-pip.py Étape 3 : Installation des librairies Une fois pip installé, vous pouvez installer les librairies pandas, matplotlib, numpy et scipy en utilisant les commandes suivantes dans l’invite de commande :\npip install pandas pip install matplotlib pip install numpy pip install scipy Étape 4 : Vérification de l’installation Pour vérifier que les librairies ont été correctement installées, vous pouvez ouvrir une session Python interactive en tapant python dans l’invite de commande, puis essayer d’importer chaque librairie :\nimport pandas as pd import matplotlib.pyplot as plt import numpy as np import scipy Si aucune erreur n’est affichée, cela signifie que les librairies ont été installées avec succès.\nRésolution des problèmes courants Problème : pip n’est pas reconnu comme une commande interne ou externe.\nSolution : Assurez-vous que le chemin vers le dossier Scripts de Python est ajouté à la variable d’environnement PATH. Problème : Erreur d’installation due à des permissions.\nSolution : Exécutez l’invite de commande en tant qu’administrateur. Problème : Conflits de versions.\nSolution : Utilisez des environnements virtuels pour isoler les dépendances de votre projet. Vous pouvez créer un environnement virtuel avec venv : python -m venv myenv myenv\\Scripts\\activate",
    "description": "Installation des librairies Python sur Windows 10/11 Python est un langage de programmation puissant et polyvalent, largement utilisé pour l’analyse de données, la visualisation et les calculs scientifiques. Les librairies pandas, matplotlib, numpy et scipy sont parmi les plus populaires pour ces tâches. Ce chapitre vous guidera à travers les étapes nécessaires pour installer ces librairies sur un système Windows 10 ou 11.",
    "tags": [],
    "title": "Installation des bibliothèques Python",
    "uri": "/bases/outils/installations/bibliotheques/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Installations",
    "content": "Pour installer les extensions comme Python, Pandas, Numpy, Matplotlib et SciPy dans Visual Studio Code, suivez ces étapes :\nOuvrir Visual Studio Code\nInstaller l’extension Python :\nCliquez sur l’icône des extensions dans la barre d’activité à gauche (elle ressemble à quatre carrés) ou utilisez le raccourci Ctrl+Shift+X. Recherchez Python et installez l’extension officielle développée par Microsoft. Ouvrir un terminal intégré :\nAllez dans le menu Terminal et sélectionnez Nouveau terminal (ou utilisez le raccourci Ctrl+). Installer les bibliothèques Python :\nDans le terminal, utilisez les commandes pip pour installer les bibliothèques nécessaires. Voici les commandes pour chaque bibliothèque : pip install numpy pip install pandas pip install matplotlib pip install scipy Vérifier l’installation :\nVous pouvez vérifier que les bibliothèques sont correctement installées en créant un nouveau fichier Python et en essayant d’importer les bibliothèques : import numpy as np import pandas as pd import matplotlib.pyplot as plt import scipy Installer d’autres extensions utiles : Vous pouvez également installer d’autres extensions utiles pour le développement Python, comme Jupyter pour travailler avec des notebooks Jupyter, et Python Docstring Generator pour générer des docstrings.\nRéférence : How to install Python Libraries in Visual Studio Code",
    "description": "Pour installer les extensions comme Python, Pandas, Numpy, Matplotlib et SciPy dans Visual Studio Code, suivez ces étapes :\nOuvrir Visual Studio Code\nInstaller l’extension Python :\nCliquez sur l’icône des extensions dans la barre d’activité à gauche (elle ressemble à quatre carrés) ou utilisez le raccourci Ctrl+Shift+X. Recherchez Python et installez l’extension officielle développée par Microsoft. Ouvrir un terminal intégré :",
    "tags": [],
    "title": "Installation des extensions dans VS Code",
    "uri": "/bases/outils/installations/extensions-dans-vs-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Dans cette section vous trouverez les informations nécessaires pour configurer votre environnement de développement sur Windows.\nInstallation de Python : Suivez nos instructions détaillées pour télécharger et installer Python sur votre système Windows. Nous vous guiderons à travers chaque étape pour vous assurer que Python est correctement configuré.\nInstallation de Visual Studio Code (VS Code) : Apprenez à installer VS Code, l’éditeur de code puissant et flexible. Nous vous montrerons comment le télécharger et l’installer facilement.\nInstallation de Pandas, Matplotlib et NumPy : Découvrez comment installer ces bibliothèques essentielles pour l’analyse de données et la visualisation. Nous vous fournirons des commandes simples pour les installer via pip.\nInstallation des extensions sur VS Code : Optimisez votre expérience de codage en installant des extensions utiles dans VS Code. Nous vous montrerons comment les ajouter à votre éditeur.",
    "description": "Dans cette section vous trouverez les informations nécessaires pour configurer votre environnement de développement sur Windows.\nInstallation de Python : Suivez nos instructions détaillées pour télécharger et installer Python sur votre système Windows. Nous vous guiderons à travers chaque étape pour vous assurer que Python est correctement configuré.\nInstallation de Visual Studio Code (VS Code) : Apprenez à installer VS Code, l’éditeur de code puissant et flexible. Nous vous montrerons comment le télécharger et l’installer facilement.",
    "tags": [],
    "title": "Installations",
    "uri": "/bases/outils/installations/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "L’importance de savoir déboguer Le code que nous écrivons ne fonctionne pas toujours comme prévu et peut parfois produire des résultats inattendus.\nLorsqu’un problème survient, il est plus efficace d’utiliser un outil de débogage plutôt que de rester perplexe devant le code.\nUn débogueur permet d’exécuter le code pas à pas pour identifier précisément où se trouve l’erreur et comprendre les corrections nécessaires.\nBien que l’utilisation d’un débogueur demande du temps et des efforts, c’est une compétence essentielle pour tout développeur.\nDans cette section, vous apprendrez à utiliser les outils de base et ceux intégrés à Visual Studio Code pour rendre la correction de problèmes (bogues) dans os programmes moins ardues.",
    "description": "L’importance de savoir déboguer Le code que nous écrivons ne fonctionne pas toujours comme prévu et peut parfois produire des résultats inattendus.\nLorsqu’un problème survient, il est plus efficace d’utiliser un outil de débogage plutôt que de rester perplexe devant le code.\nUn débogueur permet d’exécuter le code pas à pas pour identifier précisément où se trouve l’erreur et comprendre les corrections nécessaires.",
    "tags": [],
    "title": "Techniques de débogage",
    "uri": "/bases/langage-de-prog/debogage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Visual Studio Code \u0026 Jupyter Sauvegarde avec Visual Studio Code",
    "description": "Visual Studio Code \u0026 Jupyter Sauvegarde avec Visual Studio Code",
    "tags": [],
    "title": "Utilisation de VS Code",
    "uri": "/bases/outils/vs-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec les opérateurs Les erreurs avec les opérateurs en Python peuvent être frustrantes, mais avec une attention aux détails et l’utilisation des bonnes pratiques, elles peuvent être évitées. En suivant les astuces mentionnées, vous pouvez écrire du code plus robuste et plus facile à déboguer.\nEn Python, les opérateurs arithmétiques, de comparaison et logiques sont essentiels pour manipuler les données et contrôler le flux du programme. Cependant, des erreurs peuvent survenir, surtout pour les débutants.\nVoici quelques erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Erreurs avec les opérateurs arithmétiques Les opérateurs arithmétiques incluent +, -, *, /, //, %, et **.\nErreurs courantes :\nDivision par zéro : Tenter de diviser un nombre par zéro lève une exception ZeroDivisionError. Types incompatibles : Additionner une chaîne de caractères avec un nombre (\"3\" + 3) lève une exception TypeError. Précision des flottants : Les opérations sur les nombres flottants peuvent entraîner des résultats inattendus en raison de la précision limitée. Astuces pour les éviter :\nVérification des dénominateurs : Toujours vérifier que le dénominateur n’est pas zéro avant de diviser. if denominator != 0: result = numerator / denominator else: print(\"Erreur : Division par zéro\") Conversion explicite des types : Utiliser les fonctions int(), float(), ou str() pour convertir les types avant les opérations. result = int(\"3\") + 3 Utilisation de la bibliothèque decimal : Pour des calculs nécessitant une haute précision, utiliser la bibliothèque decimal. from decimal import Decimal result = Decimal('0.1') + Decimal('0.2') 2. Erreurs avec les opérateurs de comparaison Les opérateurs de comparaison incluent ==, !=, \u003e, \u003c, \u003e=, et \u003c=.\nErreurs courantes :\nConfusion entre = et == : Utiliser = au lieu de == dans une condition lève une exception SyntaxError. Comparaison de types incompatibles : Comparer des types incompatibles (\"3\" == 3) lève une exception TypeError. Astuces pour les éviter :\nRelecture du code : Toujours relire le code pour vérifier l’utilisation correcte des opérateurs. Utilisation de l’IDE : Utiliser un environnement de développement intégré (IDE) qui souligne les erreurs syntaxiques. Conversion explicite des types : Assurer que les types des variables comparées sont compatibles. if str(3) == \"3\": print(\"Les valeurs sont égales\") 3. Erreurs avec les opérateurs logiques Les opérateurs logiques incluent and, or, et not.\nErreurs courantes :\nPriorité des opérateurs : Oublier les parenthèses peut entraîner des résultats inattendus. True or False and False # Équivaut à True (True or False) and False # Équivaut à False Évaluation paresseuse : En Python, les opérateurs logiques utilisent l’évaluation paresseuse, ce qui peut causer des comportements inattendus si des effets de bord sont présents. Astuces pour les éviter :\nUtilisation des parenthèses : Toujours utiliser des parenthèses pour clarifier l’ordre des opérations. if (condition1 and condition2) or condition3: # Code Compréhension de l’évaluation paresseuse : Être conscient de l’évaluation paresseuse et structurer le code en conséquence. if (func1() and func2()) or func3(): # Code",
    "description": "Les erreurs communes avec les opérateurs Les erreurs avec les opérateurs en Python peuvent être frustrantes, mais avec une attention aux détails et l’utilisation des bonnes pratiques, elles peuvent être évitées. En suivant les astuces mentionnées, vous pouvez écrire du code plus robuste et plus facile à déboguer.\nEn Python, les opérateurs arithmétiques, de comparaison et logiques sont essentiels pour manipuler les données et contrôler le flux du programme. Cependant, des erreurs peuvent survenir, surtout pour les débutants.",
    "tags": [],
    "title": "Erreurs avec les opérateurs",
    "uri": "/bases/langage-de-prog/erreurs/operateurs/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Les bibliothèques de bioinformatique",
    "content": "Présentation de Biopython Biopython est une collection de bibliothèques Python conçues pour faciliter le travail en bioinformatique. Il offre des outils pour manipuler des séquences biologiques, accéder à des bases de données biologiques, effectuer des analyses de séquences, et bien plus encore. Biopython est largement utilisé par les bioinformaticiens pour automatiser et simplifier les tâches courantes en biologie computationnelle.\nInstallation et configuration Pour commencer à utiliser Biopython, vous devez d’abord l’installer. Voici comment procéder :\nInstallation via pip :\npip install biopython Vérification de l’installation : Après l’installation, vous pouvez vérifier que Biopython est correctement installé en important le module dans un script Python :\nimport Bio print(Bio.__version__) Configuration de l’environnement : Assurez-vous que votre environnement de développement est configuré pour utiliser Biopython. Vous pouvez utiliser des environnements virtuels pour isoler vos projets :\npython -m venv myenv source myenv/bin/activate # Sur Windows, utilisez `myenv\\Scripts\\activate` pip install biopython Aperçu des fonctionnalités principales Biopython offre une multitude de fonctionnalités. Voici un aperçu des plus courantes :\nManipulation de séquences : Biopython permet de lire, écrire et manipuler des séquences biologiques. Voici un exemple simple de lecture d’un fichier FASTA :\nfrom Bio import SeqIO for record in SeqIO.parse(\"example.fasta\", \"fasta\"): print(record.id) print(record.seq) Accès aux bases de données : Vous pouvez accéder à des bases de données biologiques en ligne, comme NCBI, pour télécharger des séquences et des informations. Par exemple, pour télécharger une séquence à partir de NCBI :\nfrom Bio import Entrez Entrez.email = \"your.email@example.com\" handle = Entrez.efetch(db=\"nucleotide\", id=\"NM_001301717\", rettype=\"gb\", retmode=\"text\") record = handle.read() print(record) Analyse de séquences : Biopython offre des outils pour analyser des séquences, comme le calcul du contenu en GC :\nfrom Bio.SeqUtils import gc_fraction seq = \"AGCTATAG\" print(gc_fraction(seq)) Exercices Exercice 1 : Installation de Biopython\nInstallez Biopython sur votre machine. Vérifiez l’installation en imprimant la version de Biopython. Exercice 2 : Lecture de séquences\nTéléchargez un fichier FASTA d’exemple. Écrivez un script Python pour lire et afficher les séquences du fichier. Exercice 3 : Accès à NCBI\nUtilisez Biopython pour télécharger une séquence génomique à partir de NCBI. Affichez les informations de la séquence téléchargée. Exercice 4 : Analyse de séquences\nÉcrivez un script pour calculer le contenu en GC d’une séquence donnée. Testez votre script avec différentes séquences.",
    "description": "Présentation de Biopython Biopython est une collection de bibliothèques Python conçues pour faciliter le travail en bioinformatique. Il offre des outils pour manipuler des séquences biologiques, accéder à des bases de données biologiques, effectuer des analyses de séquences, et bien plus encore. Biopython est largement utilisé par les bioinformaticiens pour automatiser et simplifier les tâches courantes en biologie computationnelle.\nInstallation et configuration Pour commencer à utiliser Biopython, vous devez d’abord l’installer. Voici comment procéder :",
    "tags": [],
    "title": "Introduction à Biopython",
    "uri": "/bases/langage-de-prog/biopython/intro/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Techniques de débogage",
    "content": "Qu’est-ce que la trace d’exécution ? La trace d’exécution est un outil, sous forme d’un tableau, qui permet de vérifier le bon fonctionnement d’un algorithme. Elle montre l’évolution des valeurs de chacune des variables tout au long du déroulement de l’algorithme (exécution pas-à-pas).\nConstruction du tableau de la trace Les colonnes du tableau correspondent aux variables déclarées dans l’algorithme. Le titre des colonnes est le nom des variables. Le titre des lignes est le numéro des lignes de l’algorithme. Dans une cellule, on inscrira la valeur de la variable correspondante seulement si elle a changé après l’exécution de l’instruction. On peut ajouter une colonne «Console» pour simuler l’affichage à la console. Vidéo explicative: Vidéo explicative sur la trace d’exécution Exemple Prenons l’exemple de cet algorithme simple en supposant que l’utilisateur saisira 5 et 10:\n1 2 3 4 5 6 7 8 9 10 11 # Exemple d'un programme simple qui effectue la somme de 2 nombres # Données en entrée print(\"Veuillez saisir deux nombres pour en faire la somme : \") nombre1 = int(input(\"Nombre 1 : \")) nombre2 = int(input(\"Nombre 2 : \")) # Traitement somme = nombre1 + nombre2 # Affichage print(\"La somme des deux nombres saisis est égale à : \", somme) # nombre1 nombre2 somme Console 1 Saisir deux nombres pour en faire la somme 2 Nombre 1 : 3 5 4 Nombre 2 : 5 10 6 15 7 La somme des deux nombres saisis est égale à : 15",
    "description": "Qu’est-ce que la trace d’exécution ? La trace d’exécution est un outil, sous forme d’un tableau, qui permet de vérifier le bon fonctionnement d’un algorithme. Elle montre l’évolution des valeurs de chacune des variables tout au long du déroulement de l’algorithme (exécution pas-à-pas).\nConstruction du tableau de la trace Les colonnes du tableau correspondent aux variables déclarées dans l’algorithme. Le titre des colonnes est le nom des variables. Le titre des lignes est le numéro des lignes de l’algorithme. Dans une cellule, on inscrira la valeur de la variable correspondante seulement si elle a changé après l’exécution de l’instruction. On peut ajouter une colonne «Console» pour simuler l’affichage à la console. Vidéo explicative: Vidéo explicative sur la trace d’exécution Exemple Prenons l’exemple de cet algorithme simple en supposant que l’utilisateur saisira 5 et 10:",
    "tags": [],
    "title": "La trace d'exécution",
    "uri": "/bases/langage-de-prog/debogage/trace/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Les bibliothèques de bioinformatique",
    "content": "Lecture et écriture de séquences Biopython facilite la lecture et l’écriture de séquences à partir de différents formats de fichiers biologiques comme FASTA, GenBank, etc.\nExemple : Lecture d’un fichier FASTA\nfrom Bio import SeqIO # Lecture d'un fichier FASTA for record in SeqIO.parse(\"example.fasta\", \"fasta\"): print(f\"ID: {record.id}\") print(f\"Séquence: {record.seq}\") print(f\"Description: {record.description}\") Exemple : Écriture dans un fichier FASTA\nfrom Bio.Seq import Seq from Bio.SeqRecord import SeqRecord from Bio import SeqIO # Création d'un objet SeqRecord record = SeqRecord( Seq(\"AGTACACTGGT\"), id=\"example\", description=\"Exemple de séquence\" ) # Écriture dans un fichier FASTA SeqIO.write(record, \"output.fasta\", \"fasta\") Opérations de base sur les séquences Biopython permet d’effectuer diverses opérations sur les séquences, telles que la traduction, la transcription et la complémentarité.\nExemple : Traduction d’une séquence d’ADN en protéine\nfrom Bio.Seq import Seq # Séquence d'ADN dna_seq = Seq(\"ATGGCCATTGTAATGGGCCGCTGAAAGGGTGCCCGATAG\") # Traduction en protéine protein_seq = dna_seq.translate() print(protein_seq) Exemple : Transcription d’une séquence d’ADN en ARN\n# Transcription en ARN rna_seq = dna_seq.transcribe() print(rna_seq) Exemple : Obtention de la séquence complémentaire\n# Séquence complémentaire complement_seq = dna_seq.complement() print(complement_seq) # Séquence complémentaire inverse reverse_complement_seq = dna_seq.reverse_complement() print(reverse_complement_seq) Alignement de séquences L’alignement de séquences est une technique utilisée pour identifier les régions de similarité entre des séquences biologiques. Biopython utilise des outils comme ClustalW et MUSCLE pour effectuer ces alignements.\nExemple : Alignement de séquences avec ClustalW\nfrom Bio.Align.Applications import ClustalwCommandline # Chemin vers l'exécutable ClustalW et le fichier d'entrée clustalw_exe = \"/path/to/clustalw2\" in_file = \"example.fasta\" # Commande ClustalW clustalw_cline = ClustalwCommandline(clustalw_exe, infile=in_file) stdout, stderr = clustalw_cline() print(stdout) Exemple : Lecture d’un alignement\nfrom Bio import AlignIO # Lecture d'un fichier d'alignement alignment = AlignIO.read(\"example.aln\", \"clustal\") print(alignment) Exercices Exercice 1 : Lecture et écriture de séquences\nTéléchargez un fichier FASTA contenant plusieurs séquences. Écrivez un script pour lire et afficher chaque séquence avec son ID et sa description. Créez une nouvelle séquence et écrivez-la dans un fichier FASTA. Exercice 2 : Opérations sur les séquences\nÉcrivez un script pour traduire une séquence d’ADN en protéine. Transcrivez une séquence d’ADN en ARN. Obtenez la séquence complémentaire et la séquence complémentaire inverse d’une séquence d’ADN. Exercice 3 : Alignement de séquences\nUtilisez ClustalW pour aligner plusieurs séquences d’ADN. Lisez et affichez l’alignement obtenu. Analysez les régions de similarité entre les séquences alignées.",
    "description": "Lecture et écriture de séquences Biopython facilite la lecture et l’écriture de séquences à partir de différents formats de fichiers biologiques comme FASTA, GenBank, etc.\nExemple : Lecture d’un fichier FASTA\nfrom Bio import SeqIO # Lecture d'un fichier FASTA for record in SeqIO.parse(\"example.fasta\", \"fasta\"): print(f\"ID: {record.id}\") print(f\"Séquence: {record.seq}\") print(f\"Description: {record.description}\") Exemple : Écriture dans un fichier FASTA\nfrom Bio.Seq import Seq from Bio.SeqRecord import SeqRecord from Bio import SeqIO # Création d'un objet SeqRecord record = SeqRecord( Seq(\"AGTACACTGGT\"), id=\"example\", description=\"Exemple de séquence\" ) # Écriture dans un fichier FASTA SeqIO.write(record, \"output.fasta\", \"fasta\") Opérations de base sur les séquences Biopython permet d’effectuer diverses opérations sur les séquences, telles que la traduction, la transcription et la complémentarité.",
    "tags": [],
    "title": "Manipulation de Séquences",
    "uri": "/bases/langage-de-prog/biopython/manipulation/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Au fil des semaines nous aurons l’occasion de localiser et de corriger différentes erreurs (ou bogues). Dans cette section “Erreurs et débogage”, vous trouverez des techniques qui permettent de déboguer vos programmes.\nLa méthode Print et le débogage Une erreur de syntaxe signifie que le code n’est pas conforme aux règles de syntaxe du langage. Cela est habituellement détecté immédiatement.\nPar exemple, si on oublie d’indenter correctement le code, ou une parenthèse dans une fonction, cela génère une erreur de syntaxe.\nLa syntaxe et les erreurs d’exécution en Python Python est un langage de programmation réputé pour sa simplicité et sa lisibilité. Toutefois, comme tout langage de programmation, il est sujet aux erreurs de syntaxe et d’exécution.\nComprendre la syntaxe de Python et savoir comment gérer les erreurs d’exécution est essentiel pour écrire des programmes robustes et fiables. La détection et la correction des erreurs, qu’elles soient de syntaxe ou d’exécution, permettent d’améliorer la qualité du code et d’assurer son bon fonctionnement.\nComprendre comment identifier et corriger ces erreurs est essentiel pour tout développeur.\nLes erreurs que l’on rencontre en programmation sont de 2 types:\nsyntaxique: Comme dans un langage naturelle, on peut faire des fautes d’orthographe ou de grammaire. logique: La syntaxe est correcte, mais les opérations ne répondent pas au problème, ou donnent un mauvais résultat. La syntaxe en Python La syntaxe de Python est conçue pour être claire et concise.\nVoici quelques rappel des éléments clés de la syntaxe Python :\nIndentation:\nPython utilise l’indentation pour délimiter les blocs de code. Une indentation incorrecte entraînera une erreur de syntaxe.\nDéclaration des variables\nLes variables en Python sont créées en les assignant à une valeur sans avoir besoin de déclarer leur type explicitement.\nStructures de contrôle\nLes structures de contrôle, comme les boucles et les conditions, doivent être correctement indentées et formées.\nLes erreurs de syntaxe Les erreurs de syntaxe surviennent lorsque le code ne respecte pas les règles syntaxiques de Python. Ces erreurs sont détectées lors de la phase d’interprétation du code, avant l’exécution du programme.\n1. Les erreurs d’indentation Les erreurs d’indentation sont parmi les plus courantes en Python. Elles se produisent lorsque les blocs de code ne sont pas correctement alignés.\ndef ma_fonction(): print(\"Début de la fonction\") print(\"Erreur d'indentation ici\") # Erreur d'indentation 2. Parenthèses, crochets et accolades non fermés Les erreurs de parenthèses et de crochets non fermés se produisent lorsque les parenthèses, crochets ou accolades ne sont pas correctement fermés.\n# Manque une parenthèse fermante print(\"Bonjour\" # Manque un crochet fermant ma_liste = [1, 2, 3, 4 3. Syntaxe invalide D’autres erreurs de syntaxe incluent l’utilisation incorrecte des mots-clés ou des opérateurs.\n# Utilisation incorrecte du mot-clé def 123fonction(): # Les noms de fonctions ne peuvent pas commencer par un chiffre # Opérateur incorrect resultat = 5 * * 2 # Les opérateurs doivent être correctement espacés 4. Erreurs d’exécution Les erreurs d’exécution, ou exceptions, surviennent pendant l’exécution du programme. Elles sont souvent causées par des opérations illégales, telles que la division par zéro ou l’accès à un index de liste inexistant.\nLes types d’exceptions courantes ZeroDivisionError Cette erreur se produit lorsqu’une division par zéro est tentée.\na = 10 / 0 # ZeroDivisionError IndexError Cette erreur se produit lorsqu’un index inexistant est accédé dans une liste.\nma_liste = [1, 2, 3] print(ma_liste[5]) # IndexError KeyError Cette erreur se produit lorsqu’une clé inexistante est accédée dans un dictionnaire.\nmon_dict = {\"nom\": \"Alice\", \"âge\": 25} print(mon_dict[\"adresse\"]) # KeyError TypeError Cette erreur se produit lorsqu’une opération ou une fonction est appliquée à un objet de type inapproprié.\nprint(\"Bonjour\" + 5) # TypeError Gestion des exceptions Python permet de gérer les exceptions à l’aide des blocs try-except. Cela permet d’attraper les erreurs et de les traiter de manière appropriée sans interrompre l’exécution du programme.\ntry: resultat = 10 / 0 except ZeroDivisionError: print(\"Erreur : division par zéro\") Il est également possible de gérer plusieurs types d’exceptions dans un même bloc try-except.\ntry: ma_liste = [1, 2, 3] print(ma_liste[5]) except IndexError: print(\"Erreur : index de liste incorrect\") except ZeroDivisionError: print(\"Erreur : division par zéro\") Messages d’erreur et débogage Les messages d’erreur en Python sont généralement explicites et indiquent la nature de l’erreur ainsi que la ligne du code où elle s’est produite. Analyser ces messages est crucial pour identifier et corriger les erreurs.\nExemple de message d’erreur Traceback (most recent call last): File \"main.py\", line 2, in \u003cmodule\u003e a = 10 / 0 ZeroDivisionError: division by zero Dans cet exemple, le message d’erreur indique une ZeroDivisionError sur la ligne 2 de main.py.\nVérification du fonctionnement d’un Programme La méthode print est l’une des techniques les plus simples et les plus couramment utilisées pour déboguer un programme en Python. Bien que ce ne soit pas la méthode la plus sophistiquée ni la plus efficace pour les projets complexes, print peut être extrêmement utile pour comprendre le flux d’exécution d’un programme, inspecter les valeurs des variables et identifier les points où le programme ne fonctionne pas comme prévu.\nPrincipe de base L’idée de base de l’utilisation de print pour le débogage est d’insérer des instructions print à divers endroits du programme pour afficher les valeurs des variables et les messages d’état. Cela permet de suivre l’exécution du programme et de localiser les problèmes.\ndef addition(a, b): print(f\"Entrée dans la fonction addition avec a={a} et b={b}\") resultat = a + b print(f\"Résultat de l'addition: {resultat}\") return resultat # Exemple d'utilisation resultat = addition(3, 5) print(f\"Le résultat final est: {resultat}\") Suivi du flux d’exécution En ajoutant des instructions print à différents endroits du programme, vous pouvez suivre le flux d’exécution et voir quelles parties du code sont exécutées. Cela est particulièrement utile pour les structures de contrôle comme les boucles et les conditions.\ndef verifier_parite(nombre): print(f\"Vérification de la parité pour le nombre: {nombre}\") if nombre % 2 == 0: print(\"Le nombre est pair\") return True else: print(\"Le nombre est impair\") return False # Exemple d'utilisation for i in range(5): resultat = verifier_parite(i) print(f\"Le nombre {i} est pair: {resultat}\") Inspection des variables L’une des utilisations les plus courantes de print est d’inspecter les valeurs des variables à différents points du programme. Cela permet de vérifier que les variables contiennent les valeurs attendues.\ndef calculer_somme_liste(liste): somme = 0 for element in liste: print(f\"Ajout de {element} à la somme actuelle de {somme}\") somme += element print(f\"La somme totale est: {somme}\") return somme # Exemple d'utilisation ma_liste = [1, 2, 3, 4] resultat = calculer_somme_liste(ma_liste) print(f\"Le résultat final est: {resultat}\") Débogage des fonctions récursives Le débogage des fonctions récursives peut être particulièrement difficile. L’utilisation de print pour afficher les valeurs des arguments à chaque appel récursif peut aider à comprendre le comportement de la fonction.\ndef factorielle(n): print(f\"Calcul de factorielle({n})\") if n == 0: return 1 else: resultat = n * factorielle(n - 1) print(f\"Résultat intermédiaire pour factorielle({n}): {resultat}\") return resultat # Exemple d'utilisation resultat = factorielle(5) print(f\"Le résultat final est: {resultat}\") Messages d’erreur et expressions conditionnelles Inclure des messages d’erreur conditionnels peut aider à identifier pourquoi une certaine branche du code est exécutée ou pourquoi une erreur se produit.\ndef division(a, b): if b == 0: print(\"Erreur: Tentative de division par zéro\") return None else: resultat = a / b print(f\"Résultat de la division: {resultat}\") return resultat # Exemple d'utilisation resultat = division(10, 0) if resultat is not None: print(f\"Le résultat final est: {resultat}\") Les limites de la méthode print Bien que la méthode print soit simple et efficace pour les petits projets ou pour un débogage rapide, elle présente des limites, notamment :\nVerbiage excessif : Trop d’instructions print peuvent rendre la sortie du programme difficile à lire. Performance : L’utilisation excessive de print peut ralentir l’exécution du programme. Gestion des erreurs : print ne gère pas les exceptions ou les erreurs de manière structurée. Pour ces raisons, il est souvent préférable d’utiliser des outils de débogage plus avancés, comme les tests unitaires ou les débogueurs intégrés, pour les projets plus complexes.",
    "description": "Au fil des semaines nous aurons l’occasion de localiser et de corriger différentes erreurs (ou bogues). Dans cette section “Erreurs et débogage”, vous trouverez des techniques qui permettent de déboguer vos programmes.\nLa méthode Print et le débogage Une erreur de syntaxe signifie que le code n’est pas conforme aux règles de syntaxe du langage. Cela est habituellement détecté immédiatement.",
    "tags": [],
    "title": "Erreurs communes",
    "uri": "/bases/langage-de-prog/erreurs/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes lors de la lecture de données au clavier La lecture de données au clavier en Python peut être source d’erreurs, mais en suivant les bonnes pratiques et en utilisant les astuces mentionnées, vous pouvez éviter ces erreurs et rendre votre code plus robuste.\nLa lecture de données au clavier est une tâche courante en Python, souvent réalisée avec la fonction input(). Cependant, des erreurs peuvent survenir, surtout pour les débutants. Explorons les erreurs courantes et voyons comment les éviter et les détecter facilement.\n1. Erreurs de type Erreurs courantes :\nConversion de type : La fonction input() retourne toujours une chaîne de caractères. Oublier de convertir cette chaîne en un autre type peut causer des erreurs. age = input(\"Entrez votre âge : \") print(age + 5) # TypeError: can only concatenate str (not \"int\") to str Astuces pour les éviter :\nConversion explicite : Convertir la chaîne de caractères en l’autre type nécessaire. age = int(input(\"Entrez votre âge : \")) print(age + 5) Utilisation de try et except : Gérer les exceptions pour éviter les plantages du programme. try: age = int(input(\"Entrez votre âge : \")) print(age + 5) except ValueError: print(\"Veuillez entrer un nombre valide.\") 2. Entrées inattendues Erreurs courantes :\nEntrées vides : L’utilisateur peut appuyer sur Entrée sans rien saisir, ce qui peut causer des erreurs si le programme attend une entrée spécifique. name = input(\"Entrez votre nom : \") if name == \"\": print(\"Erreur : le nom ne peut pas être vide.\") Astuces pour les éviter :\nValidation des entrées : Vérifier que l’entrée n’est pas vide et correspond aux attentes. name = input(\"Entrez votre nom : \") while not name.strip(): print(\"Erreur : le nom ne peut pas être vide.\") name = input(\"Entrez votre nom : \") 3. Gestion des espaces et des caractères spéciaux Erreurs courantes :\nEspaces non désirés : Les espaces en début ou fin de chaîne peuvent causer des problèmes lors de la comparaison ou du traitement des données. password = input(\"Entrez votre mot de passe : \") if password == \"secret \": print(\"Accès refusé.\") Astuces pour les éviter :\nUtilisation de strip() : Supprimer les espaces en début et fin de chaîne. password = input(\"Entrez votre mot de passe : \").strip() if password == \"secret\": print(\"Accès accordé.\") 4. Lecture de plusieurs valeurs Erreurs courantes :\nSéparation incorrecte des valeurs : Lire plusieurs valeurs séparées par des espaces ou des virgules peut causer des erreurs si la séparation n’est pas gérée correctement. data = input(\"Entrez deux nombres séparés par une virgule : \") num1, num2 = data.split(\",\") print(int(num1) + int(num2)) Astuces pour les éviter :\nValidation et gestion des exceptions : Vérifier que les valeurs sont correctement séparées et gérer les exceptions. data = input(\"Entrez deux nombres séparés par une virgule : \") try: num1, num2 = data.split(\",\") print(int(num1) + int(num2)) except ValueError: print(\"Erreur : veuillez entrer deux nombres séparés par une virgule.\")",
    "description": "Les erreurs communes lors de la lecture de données au clavier La lecture de données au clavier en Python peut être source d’erreurs, mais en suivant les bonnes pratiques et en utilisant les astuces mentionnées, vous pouvez éviter ces erreurs et rendre votre code plus robuste.\nLa lecture de données au clavier est une tâche courante en Python, souvent réalisée avec la fonction input(). Cependant, des erreurs peuvent survenir, surtout pour les débutants. Explorons les erreurs courantes et voyons comment les éviter et les détecter facilement.",
    "tags": [],
    "title": "Erreurs lors de la lecture de données au clavier",
    "uri": "/bases/langage-de-prog/erreurs/lecture-donnees/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec les structures if, elif et else Les structures conditionnelles if, elif et else sont fondamentales en programmation pour contrôler le flux d’exécution du programme. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Voici les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Erreurs de syntaxe Erreurs courantes :\nOublier les deux-points (:) : Chaque condition if, elif et else doit se terminer par un deux-points. if condition # Code Astuces pour les éviter :\nRelecture du code : Toujours vérifier que chaque condition se termine par un deux-points. Utilisation de l’IDE : Utiliser un environnement de développement intégré (IDE) qui souligne les erreurs syntaxiques. 2. Indentation incorrecte Erreurs courantes :\nMauvaise indentation : Python utilise l’indentation pour définir les blocs de code. Une mauvaise indentation peut causer des erreurs IndentationError. if condition: print(\"Condition vraie\") # IndentationError Astuces pour les éviter :\nUtilisation cohérente des espaces ou des tabulations : Choisir entre espaces et tabulations et s’y tenir tout au long du code. Configuration de l’éditeur : Configurer l’éditeur de texte pour afficher les caractères d’espacement et utiliser l’indentation automatique. 3. Conditions mal formulées Erreurs courantes :\nUtilisation incorrecte des opérateurs de comparaison : Confondre = et == ou utiliser des opérateurs incorrects. if a = 5: # SyntaxError # Code Astuces pour les éviter :\nRelecture du code : Vérifier que les opérateurs de comparaison sont utilisés correctement. Tests unitaires : Écrire des tests pour vérifier que les conditions fonctionnent comme prévu. 4. Oublier les cas elif et else Erreurs courantes :\nOublier de couvrir tous les cas possibles : Ne pas inclure de conditions elif ou else peut entraîner des comportements inattendus. if a \u003e 0: print(\"Positif\") elif a \u003c 0: print(\"Négatif\") # Que se passe-t-il si a == 0 ? Astuces pour les éviter :\nUtilisation de else : Toujours inclure une clause else pour couvrir les cas non spécifiés. if a \u003e 0: print(\"Positif\") elif a \u003c 0: print(\"Négatif\") else: print(\"Zéro\") 5. Conditions redondantes ou contradictoires Erreurs courantes :\nConditions redondantes : Vérifier la même condition plusieurs fois ou inclure des conditions qui se contredisent. if a \u003e 0: print(\"Positif\") elif a \u003e 0: print(\"Toujours positif\") # Condition redondante Astuces pour les éviter :\nSimplification des conditions : Réduire les conditions redondantes et s’assurer qu’elles sont mutuellement exclusives. if a \u003e 0: print(\"Positif\") elif a \u003c 0: print(\"Négatif\") else: print(\"Zéro\")",
    "description": "Les erreurs communes avec les structures if, elif et else Les structures conditionnelles if, elif et else sont fondamentales en programmation pour contrôler le flux d’exécution du programme. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Voici les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Erreurs de syntaxe Erreurs courantes :",
    "tags": [],
    "title": "Erreurs avec if elif et else",
    "uri": "/bases/langage-de-prog/erreurs/if-else-elif/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Qu’est-ce qu’une fonction récursive ? Une fonction récursive est une fonction qui s’appelle elle-même. Pour qu’une fonction récursive fonctionne correctement, elle doit avoir deux éléments essentiels :\nUn cas de base : Une condition qui arrête la récursion. Un appel récursif : La fonction s’appelle elle-même avec des arguments modifiés. Exemple simple : La factorielle d’un nombre Calculer la factorielle d’un nombre est un exemple classique de récursion. La factorielle de n (notée n!) est le produit de tous les entiers de 1 à n.\nVoici comment on peut définir la factorielle de manière récursive :\nLa factorielle de 0 est 1 (cas de base). La factorielle de n est n multiplié par la factorielle de n-1 (appel récursif). def factorielle(n): if n == 0: return 1 # Cas de base else: return n * factorielle(n - 1) # Appel récursif # Exemples d'utilisation print(factorielle(5)) # Affiche 120 Comment fonctionne la récursion ? Pour comprendre comment fonctionne la récursion, examinons l’exemple de la factorielle de 3 (3!).\nfactorielle(3) appelle factorielle(2). factorielle(2) appelle factorielle(1). factorielle(1) appelle factorielle(0). factorielle(0) retourne 1 (cas de base). factorielle(1) retourne 1 * 1 = 1. factorielle(2) retourne 2 * 1 = 2. factorielle(3) retourne 3 * 2 = 6. Exemple : La suite de Fibonacci La suite de Fibonacci est une autre application classique de la récursion. Chaque nombre de la suite est la somme des deux précédents.\ndef fibonacci(n): if n \u003c= 1: return n # Cas de base else: return fibonacci(n - 1) + fibonacci(n - 2) # Appel récursif # Exemples d'utilisation print(fibonacci(6)) # Affiche 8 Avantages et inconvénients de la récursion Avantages :\nSimplicité : Les fonctions récursives peuvent être plus simples et plus élégantes que leurs équivalents itératifs. Décomposition naturelle : Elles permettent de décomposer naturellement un problème en sous-problèmes similaires. Inconvénients :\nPerformance : Les fonctions récursives peuvent être moins efficaces en termes de temps et d’espace mémoire, surtout si elles ne sont pas optimisées. Limite de récursion : Python a une limite sur la profondeur de récursion, ce qui peut poser problème pour des entrées très grandes.",
    "description": "Qu’est-ce qu’une fonction récursive ? Une fonction récursive est une fonction qui s’appelle elle-même. Pour qu’une fonction récursive fonctionne correctement, elle doit avoir deux éléments essentiels :\nUn cas de base : Une condition qui arrête la récursion. Un appel récursif : La fonction s’appelle elle-même avec des arguments modifiés. Exemple simple : La factorielle d’un nombre Calculer la factorielle d’un nombre est un exemple classique de récursion. La factorielle de n (notée n!) est le produit de tous les entiers de 1 à n.",
    "tags": [],
    "title": "Les fonctions récursives",
    "uri": "/bases/langage-de-prog/fonction-recursive/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec la boucle while La boucle while est une structure de contrôle essentielle en Python, permettant d’exécuter un bloc de code tant qu’une condition est vraie. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Voyons les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Boucles infinies Erreurs courantes :\nCondition toujours vraie : Si la condition de la boucle while reste toujours vraie, la boucle ne se termine jamais, créant une boucle infinie. while True: print(\"Boucle infinie\") Astuces pour les éviter :\nMise à jour de la condition : Assurez-vous que la condition de la boucle peut devenir fausse. i = 0 while i \u003c 10: print(i) i += 1 Utilisation de break : Utilisez l’instruction break pour sortir de la boucle si une certaine condition est remplie. while True: response = input(\"Voulez-vous continuer ? (oui/non) : \") if response == \"non\": break 2. Conditions mal formulées Erreurs courantes :\nConditions incorrectes : Utiliser des conditions mal formulées peut entraîner des boucles infinies ou des boucles qui ne s’exécutent jamais. i = 10 while i \u003e 0: print(i) i -= 1 Astuces pour les éviter :\nTests unitaires : Écrire des tests pour vérifier que la condition de la boucle fonctionne comme prévu. Débogage : Utiliser des outils de débogage pour suivre l’exécution de la boucle et vérifier les valeurs des variables. 3. Mauvaise gestion des variables Erreurs courantes :\nVariables non initialisées : Oublier d’initialiser les variables utilisées dans la condition de la boucle peut causer des erreurs. while i \u003c 10: print(i) i += 1 # NameError: name 'i' is not defined Astuces pour les éviter :\nInitialisation des variables : Toujours initialiser les variables avant de les utiliser dans la condition de la boucle. i = 0 while i \u003c 10: print(i) i += 1 4. Boucles imbriquées Erreurs courantes :\nComplexité accrue : Les boucles while imbriquées peuvent rendre le code difficile à lire et à déboguer. i = 0 while i \u003c 3: j = 0 while j \u003c 3: print(i, j) j += 1 i += 1 Astuces pour les éviter :\nSimplification du code : Réduire l’imbrication des boucles en utilisant des fonctions ou des structures de données appropriées. for i in range(3): for j in range(3): print(i, j) 5. Utilisation incorrecte de continue Erreurs courantes :\nSaut de code important : Utiliser continue de manière incorrecte peut entraîner le saut de code important dans la boucle. i = 0 while i \u003c 10: i += 1 if i % 2 == 0: continue print(i) # Ne s'exécute que pour les valeurs impaires de i Astuces pour les éviter :\nRelecture du code : Vérifier que l’utilisation de continue n’entraîne pas le saut de code important. Utilisation de commentaires : Ajouter des commentaires pour expliquer pourquoi continue est utilisé et ce qu’il doit accomplir.",
    "description": "Les erreurs communes avec la boucle while La boucle while est une structure de contrôle essentielle en Python, permettant d’exécuter un bloc de code tant qu’une condition est vraie. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Voyons les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Boucles infinies Erreurs courantes :",
    "tags": [],
    "title": "Erreurs avec la boucle while",
    "uri": "/bases/langage-de-prog/erreurs/while/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Les listes dans les listes Une liste peut comporter tout type d’élément. Nous pouvons donc mettre des listes dans des listes. Nous parlons alors de listes (ou tableaux) à 2 dimensions.\n# Liste contenant 3 éléments # Chaque élément est une liste contenant 2 nombres matrice = [[1, 2], [3, 4], [5, 6]] Pour parcourir toutes les listes, il suffit de mettre une boucle dans une boucle :\n# On parcourt chaque éléments de la liste principale for sous_liste in matrice: # et ensuite chaque élément de la \"sous-liste\" for element in sous_liste: print(element) Les opérations vues sur les listes en 1 dimension fonctionnent aussi pour les listes en 2D:\nprint(matrice[0]) # affiche la première liste de la matrice print(matrice[0][1]) # affiche le 2e élément de la première liste de la matrice matrice.append([7, 8]) # ajoute une nouvelle liste à la matrice Comme nous l’avons vu plus haut, la fonction range() peut aussi être utilisé pour parcourir les listes à 2 dimensions :\n# On ajoute 1 à chaque élément de la matrice for i in range(len(matrice)): for j in range(len(matrice[i])): matrice[i][j] += 1",
    "description": "Les listes dans les listes Une liste peut comporter tout type d’élément. Nous pouvons donc mettre des listes dans des listes. Nous parlons alors de listes (ou tableaux) à 2 dimensions.\n# Liste contenant 3 éléments # Chaque élément est une liste contenant 2 nombres matrice = [[1, 2], [3, 4], [5, 6]] Pour parcourir toutes les listes, il suffit de mettre une boucle dans une boucle :",
    "tags": [],
    "title": "Les listes de listes",
    "uri": "/bases/langage-de-prog/listes-de-listes/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec la boucle for et la fonction range() La boucle for et la fonction range() sont des outils puissants en Python pour itérer sur des séquences. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Explorons les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Erreurs de syntaxe avec range() Erreurs courantes :\nOublier les parenthèses : La fonction range() nécessite des parenthèses pour fonctionner correctement. for i in range 10: # SyntaxError print(i) Astuces pour les éviter :\nRelecture du code : Toujours vérifier que range() est utilisé avec des parenthèses. for i in range(10): print(i) 2. Mauvaise utilisation des arguments de range() Erreurs courantes :\nArguments incorrects : Utiliser des arguments incorrects ou dans le mauvais ordre peut causer des erreurs. for i in range(10, 1): # Ne produit aucune itération print(i) Astuces pour les éviter :\nCompréhension des arguments : range(start, stop, step) où start est inclusif, stop est exclusif, et step est l’incrément. for i in range(1, 10, 2): print(i) # Affiche 1, 3, 5, 7, 9 3. Boucles infinies avec range() Erreurs courantes :\nIncrément incorrect : Utiliser un incrément incorrect peut causer des boucles infinies ou des itérations inattendues. for i in range(10, 0, -1): print(i) # Affiche 10, 9, 8, ..., 1 Astuces pour les éviter :\nVérification des arguments : S’assurer que l’incrément est cohérent avec les valeurs de début et de fin. for i in range(10, 0, -1): print(i) # Affiche 10, 9, 8, ..., 1 4. Modification de la séquence pendant l’itération Erreurs courantes :\nModification de la liste : Modifier une liste pendant son itération peut causer des comportements inattendus. numbers = [1, 2, 3, 4, 5] for num in numbers: if num % 2 == 0: numbers.remove(num) print(numbers) # Résultat inattendu Astuces pour les éviter :\nItération sur une copie : Itérer sur une copie de la liste pour éviter les modifications pendant l’itération. numbers = [1, 2, 3, 4, 5] for num in numbers[:]: if num % 2 == 0: numbers.remove(num) print(numbers) # Affiche [1, 3, 5] 5. Utilisation incorrecte de enumerate() Erreurs courantes :\nMauvaise gestion des indices : Utiliser enumerate() sans comprendre son fonctionnement peut causer des erreurs. fruits = [\"pomme\", \"banane\", \"cerise\"] for fruit in enumerate(fruits): print(fruit) # Affiche (0, 'pomme'), (1, 'banane'), (2, 'cerise') Astuces pour les éviter :\nDéballage des tuples : Utiliser le déballage des tuples pour accéder aux indices et aux valeurs. fruits = [\"pomme\", \"banane\", \"cerise\"] for index, fruit in enumerate(fruits): print(index, fruit) # Affiche 0 pomme, 1 banane, 2 cerise",
    "description": "Les erreurs communes avec la boucle for et la fonction range() La boucle for et la fonction range() sont des outils puissants en Python pour itérer sur des séquences. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Explorons les erreurs courantes et des astuces pour les éviter et les détecter facilement.",
    "tags": [],
    "title": "Erreurs avec la boucle for et la fonction range",
    "uri": "/bases/langage-de-prog/erreurs/for-range/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "L’instruction MATCH-CASE L’instruction match-case est inspirée des structures de correspondance de motifs (switch-case) présentes dans d’autres langages de programmation. Elle permet généralement de simplifier le traitement de différentes conditions en rendant le code plus lisible et plus structuré. Syntaxe de base Astuce La syntaxe de l’instruction match-case est similaire à celle d’une série de conditions if-elif-else, mais elle est souvent plus concise et expressive.\nSyntaxe générale:\ndef action(commande): match commande: case \"demarre\": print(\"Démarrage...\") case \"stop\": print(\"Arrêt...\") case \"pause\": print(\"Pause...\") case _: print(\"Commande inconnue\") Dans cet exemple, la fonction action utilise match pour comparer la variable commande à différents motifs (“demarre”, “stop”, “pause”). Si aucun motif ne correspond, le cas par défaut (_) est exécuté. Voici deux exemples concrets simples:\nExemple 1: Sélection de fruit:\ndef selectionner_fruit(fruit): match fruit: case \"pomme\": return \"C'est une pomme\" case \"banane\": return \"C'est une banane\" case \"cerise\": return \"C'est une cerise\" case _: return \"Fruit inconnu\" # Exemple d'utilisation print(selectionner_fruit(\"pomme\")) # C'est une pomme print(selectionner_fruit(\"kiwi\")) # Fruit inconnu Explication:\nmatch fruit:\nCompare la valeur de la variable fruit à différents motifs. case \"pomme\"\nVérifie si fruit est égal à \"pomme\". Si fruit correspond à “pomme”, le code suivant return \"C'est une pomme\" est exécuté. case \"banane\"\nVérifie si fruit est égal à \"banane\". Si fruit correspond à “banane”, le code suivant return \"C'est une banane\" est exécuté. case \"cerise\"\nVérifie si fruit est égal à \"cerise\". Si fruit correspond à “cerise”, le code suivant return \"C'est une cerise\" est exécuté. case _:\nLe symbole _ est un motif générique qui correspond à n’importe quelle valeur qui n’a pas été capturée par les motifs précédents. return \"Fruit inconnu\" : Si fruit ne correspond à aucun des motifs précédents, la fonction retourne \"Fruit inconnu\". Exemple 2: Classification d’animaux en fonction de leur type :\ndef classifier(animal): match animal: case \"chien\" | \"chat\" | \"lapin\": return \"Mammifère\" case \"aigle\" | \"canari\" | \"perroquet\": return \"Oiseau\" case \"serpent\" | \"lézard\" | \"tortue\": return \"Reptile\" case _: return \"Inconnu\" # Exemple d'utilisation animal = \"chat\" print(f\"{animal} est un {classifier(animal)}.\") # chat est une Mammifère Explication:\nmatch animal:\nCompare la valeur de la variable animal à différents motifs. case \"chien\" | \"chat\" | \"lapin\":\nVérifie si animal est égal à \"chien\", \"chat\" ou \"lapin\". Le symbole | signifie “ou”. Si animal correspond à l’un de ces trois mots, le code suivant est exécuté. return \"Mammifère\" : Si animal est \"chien\", \"chat\" ou \"lapin\", la fonction retourne la chaîne de caractères \"Mammifère\". case \"aigle\" | \"canari\" | \"perroquet\":\nVérifie si animal est égal à \"aigle\", \"canari\" ou \"perroquet\". return \"Oiseau\" : Si animal est l’un de ces trois mots, la fonction retourne \"Oiseau\". case \"serpent\" | \"lézard\" | \"tortue\":\nVérifie si animal est égal à \"serpent\", \"lézard\" ou \"tortue\". return \"Reptile\" : Si animal est l’un de ces trois mots, la fonction retourne \"Reptile\". case _:\nLe symbole _ est un motif générique qui correspond à n’importe quelle valeur qui n’a pas été capturée par les motifs précédents. return \"Inconnu\" : Si animal ne correspond à aucun des motifs précédents, la fonction retourne \"Inconnu\". Exemple de IF-ELIF-ELSE avec MATCH-CASE Soit l’exemple suivant vu précédemment. Re-écrivons-le avec match-case:\nage = 36 if 18 \u003c= age \u003c= 30: print(\"Vous êtes un jeune adulte\") elif 30 \u003c age \u003c 65: print(\"Avez-vous des enfants?\") elif age \u003e= 65: print(\"Bonne retraite!\") else: print(\"Vous êtes mineur\") Voici le même algorithme, mais avec match-case:\nage = 36 match age: case age if 18 \u003c= age \u003c= 30: print(\"Vous êtes un jeune adulte\") case age if 30 \u003c age \u003c 65: print(\"Avez-vous des enfants?\") case age if age \u003e= 65: print(\"Bonne retraite!\") case _: print(\"Vous êtes mineur\") Info Comme vous pouvez le voir, le code n’est pas vraiment plus simple. Dans ce cours, nous utiliserons principalement if-elif-else. Ceci dit, lorsque les directives ne vous obligent pas à utiliser if-elif-else, l’instruction match-case sera acceptée.",
    "description": "L’instruction MATCH-CASE L’instruction match-case est inspirée des structures de correspondance de motifs (switch-case) présentes dans d’autres langages de programmation. Elle permet généralement de simplifier le traitement de différentes conditions en rendant le code plus lisible et plus structuré. Syntaxe de base Astuce La syntaxe de l’instruction match-case est similaire à celle d’une série de conditions if-elif-else, mais elle est souvent plus concise et expressive.",
    "tags": [],
    "title": "Match Case",
    "uri": "/bases/langage-de-prog/match-case/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec les listes Les listes sont l’une des structures de données les plus utilisées en Python. Cependant, leur utilisation peut parfois mener à des erreurs courantes. Voici un aperçu de ces erreurs et des astuces pour les éviter ou les détecter facilement.\n1. IndexError : Liste hors limites Erreur :\nmy_list = [1, 2, 3] print(my_list[3]) # IndexError: list index out of range Astuce : Toujours vérifier la longueur de la liste avant d’accéder à un index.\nif index \u003c len(my_list): print(my_list[index]) else: print(\"Index hors limites\") 2. TypeError : Mélange de types Erreur :\nmy_list = [1, 'two', 3] total = sum(my_list) # TypeError: unsupported operand type(s) for +: 'int' and 'str' Astuce : Utiliser des listes homogènes ou convertir les types avant les opérations.\nmy_list = [1, 2, 3] total = sum(my_list) # Correct 3. Modification de la liste pendant l’itération Erreur :\nmy_list = [1, 2, 3, 4] for item in my_list: if item % 2 == 0: my_list.remove(item) # Cela peut causer des éléments manquants Astuce : Itérer sur une copie de la liste ou utiliser une compréhension de liste.\n# Itérer sur une copie for item in my_list[:]: if item % 2 == 0: my_list.remove(item) # Utiliser une compréhension de liste my_list = [item for item in my_list if item % 2 != 0] 4. Utilisation incorrecte de append et extend Erreur :\nmy_list = [1, 2, 3] my_list.append([4, 5]) # Résultat : [1, 2, 3, [4, 5]] Astuce : Utiliser extend pour ajouter plusieurs éléments.\nmy_list = [1, 2, 3] my_list.extend([4, 5]) # Résultat : [1, 2, 3, 4, 5] 5. Confusion entre copy et deepcopy Erreur :\nimport copy my_list = [[1, 2], [3, 4]] new_list = copy.copy(my_list) new_list[0][0] = 9 # Modifie aussi my_list Astuce : Utiliser deepcopy pour copier des listes imbriquées.\nnew_list = copy.deepcopy(my_list) new_list[0][0] = 9 # Ne modifie pas my_list",
    "description": "Les erreurs communes avec les listes Les listes sont l’une des structures de données les plus utilisées en Python. Cependant, leur utilisation peut parfois mener à des erreurs courantes. Voici un aperçu de ces erreurs et des astuces pour les éviter ou les détecter facilement.\n1. IndexError : Liste hors limites Erreur :",
    "tags": [],
    "title": "Erreurs avec les listes",
    "uri": "/bases/langage-de-prog/erreurs/listes/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les fonctions sont des blocs de code essentiels en Python, mais leur utilisation peut parfois entraîner des erreurs, surtout pour les débutants. Voici un aperçu des erreurs les plus courantes et des conseils pour les éviter.\n1. Oublier de définir la fonction avant de l’appeler En Python, une fonction doit être définie avant d’être appelée. Si vous essayez d’appeler une fonction avant sa définition, vous obtiendrez une erreur NameError.\n# Mauvais exemple resultat = addition(5, 3) def addition(a, b): return a + b Solution : Toujours définir la fonction avant de l’appeler.\n# Bon exemple def addition(a, b): return a + b resultat = addition(5, 3) 2. Mauvaise utilisation des arguments Les erreurs liées aux arguments incluent l’oubli de passer les arguments nécessaires ou le passage d’un nombre incorrect d’arguments.\ndef addition(a, b): return a + b # Mauvais exemple resultat = addition(5) # TypeError: missing 1 required positional argument: 'b' Solution : Vérifiez toujours que vous passez le bon nombre d’arguments.\n# Bon exemple resultat = addition(5, 3) 3. Utilisation incorrecte des variables globales et locales Confondre les variables globales et locales peut entraîner des comportements inattendus.\na = 10 def addition(b): return a + b # Mauvais exemple print(addition(5)) # Fonctionne, mais peut être source de confusion Solution : Utilisez des variables locales autant que possible et évitez de modifier les variables globales à l’intérieur des fonctions.\ndef addition(a, b): return a + b a = 10 print(addition(a, 5)) 4. Oublier de retourner une valeur Une fonction qui ne retourne pas explicitement une valeur retourne None par défaut.\ndef addition(a, b): somme = a + b # Mauvais exemple resultat = addition(5, 3) print(resultat) # Affiche None Solution : Assurez-vous de retourner une valeur si nécessaire.\n# Bon exemple def addition(a, b): return a + b resultat = addition(5, 3) print(resultat) # Affiche 8 5. Ne pas gérer les exceptions Les fonctions peuvent échouer pour diverses raisons, et ne pas gérer ces exceptions peut rendre le débogage difficile.\ndef division(a, b): return a / b # Mauvais exemple resultat = division(5, 0) # ZeroDivisionError: division by zero Solution : Utilisez des blocs try et except pour gérer les exceptions.\n# Bon exemple def division(a, b): try: return a / b except ZeroDivisionError: return \"Erreur : division par zéro\" resultat = division(5, 0) print(resultat) # Affiche \"Erreur : division par zéro\"",
    "description": "Les fonctions sont des blocs de code essentiels en Python, mais leur utilisation peut parfois entraîner des erreurs, surtout pour les débutants. Voici un aperçu des erreurs les plus courantes et des conseils pour les éviter.\n1. Oublier de définir la fonction avant de l’appeler En Python, une fonction doit être définie avant d’être appelée. Si vous essayez d’appeler une fonction avant sa définition, vous obtiendrez une erreur NameError.",
    "tags": [],
    "title": "Erreurs avec les fonctions",
    "uri": "/bases/langage-de-prog/erreurs/fonctions/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "La programmation orientée objet (POO) est un concept clé en Python et dans de nombreux autres langages de programmation. Voici une introduction simple :\nConcepts de base de la POO en Python Classes et Objets Classe : Une classe est comme un plan ou un modèle pour créer des objets. Elle définit les attributs (données) et les méthodes (fonctions) que les objets créés à partir de cette classe auront. Objet : Un objet est une instance d’une classe. Par exemple, si Chien est une classe, alors mon_chien peut être un objet de cette classe. class Chien: def __init__(self, nom, age): self.nom = nom self.age = age def aboyer(self): print(\"Woof!\") mon_chien = Chien(\"Rex\", 5) mon_chien.aboyer() # Affiche \"Woof!\" Encapsulation L’encapsulation consiste à restreindre l’accès à certaines parties d’un objet. Cela se fait en utilisant des attributs privés (commençant par un underscore _) et des méthodes pour accéder et modifier ces attributs. class CompteBancaire: def __init__(self, solde): self._solde = solde def deposer(self, montant): self._solde += montant def retirer(self, montant): if montant \u003c= self._solde: self._solde -= montant else: print(\"Fonds insuffisants\") def afficher_solde(self): print(f\"Solde: {self._solde}\") mon_compte = CompteBancaire(100) mon_compte.deposer(50) mon_compte.afficher_solde() # Affiche \"Solde: 150\" Héritage L’héritage permet de créer une nouvelle classe à partir d’une classe existante. La nouvelle classe (classe dérivée) hérite des attributs et méthodes de la classe existante (classe de base). class Animal: def __init__(self, nom): self.nom = nom def parler(self): pass class Chien(Animal): def parler(self): print(\"Woof!\") class Chat(Animal): def parler(self): print(\"Meow!\") mon_chien = Chien(\"Rex\") mon_chat = Chat(\"Mimi\") mon_chien.parler() # Affiche \"Woof!\" mon_chat.parler() # Affiche \"Meow!\" Polymorphisme Le polymorphisme permet d’utiliser une interface commune pour des objets de différentes classes. Par exemple, différentes classes peuvent avoir une méthode parler, mais chaque classe peut l’implémenter différemment. for animal in [mon_chien, mon_chat]: animal.parler()",
    "description": "La programmation orientée objet (POO) est un concept clé en Python et dans de nombreux autres langages de programmation. Voici une introduction simple :\nConcepts de base de la POO en Python Classes et Objets Classe : Une classe est comme un plan ou un modèle pour créer des objets. Elle définit les attributs (données) et les méthodes (fonctions) que les objets créés à partir de cette classe auront. Objet : Un objet est une instance d’une classe. Par exemple, si Chien est une classe, alors mon_chien peut être un objet de cette classe. class Chien: def __init__(self, nom, age): self.nom = nom self.age = age def aboyer(self): print(\"Woof!\") mon_chien = Chien(\"Rex\", 5) mon_chien.aboyer() # Affiche \"Woof!\" Encapsulation L’encapsulation consiste à restreindre l’accès à certaines parties d’un objet. Cela se fait en utilisant des attributs privés (commençant par un underscore _) et des méthodes pour accéder et modifier ces attributs. class CompteBancaire: def __init__(self, solde): self._solde = solde def deposer(self, montant): self._solde += montant def retirer(self, montant): if montant \u003c= self._solde: self._solde -= montant else: print(\"Fonds insuffisants\") def afficher_solde(self): print(f\"Solde: {self._solde}\") mon_compte = CompteBancaire(100) mon_compte.deposer(50) mon_compte.afficher_solde() # Affiche \"Solde: 150\" Héritage L’héritage permet de créer une nouvelle classe à partir d’une classe existante. La nouvelle classe (classe dérivée) hérite des attributs et méthodes de la classe existante (classe de base). class Animal: def __init__(self, nom): self.nom = nom def parler(self): pass class Chien(Animal): def parler(self): print(\"Woof!\") class Chat(Animal): def parler(self): print(\"Meow!\") mon_chien = Chien(\"Rex\") mon_chat = Chat(\"Mimi\") mon_chien.parler() # Affiche \"Woof!\" mon_chat.parler() # Affiche \"Meow!\" Polymorphisme Le polymorphisme permet d’utiliser une interface commune pour des objets de différentes classes. Par exemple, différentes classes peuvent avoir une méthode parler, mais chaque classe peut l’implémenter différemment. for animal in [mon_chien, mon_chat]: animal.parler()",
    "tags": [],
    "title": "La programmation orientée objet (POO)",
    "uri": "/bases/langage-de-prog/poo/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Qu’est-ce que pandas? Pandas est une bibliothèque Python utilisée pour la manipulation et l’analyse de données. Elle est particulièrement utile pour traiter de grandes quantités de données expérimentales.\nCe cours couvre les concepts de base de Pandas, en mettant l’accent sur les applications pratiques dans les sciences.\nInstallation de Pandas Avant de commencer, assurez vous d’avoir Pandas installé. Vous pouvez l’installer via pip :\npip install pandas Étape obligatoire pour utiliser Pandas Pour commencer, vous devez l’importer dans votre code.\nimport pandas as pd Pour vérifier que Pandas est bien installé sur votre environnement :\n# Version de Pandas pd.__version__ Structures de données de base Les Series Une Series est une structure de données unidimensionnelle semblable à une liste. Elle peut contenir des données de tout type (entiers, flottants, chaînes, etc.).\nCréation d’une série et accès à ses éléments import pandas as pd # Création d'une Series ma_serie = pd.Series([1, 2, 3, 4, 5]) print(f\"La série:\\n{ma_serie}\") # Accès par position print(f\"Premier élément: {ma_serie[0]}\") # La donnée en première position Affiche:\nLa série: 0 1 1 2 2 3 3 4 4 5 dtype: int64 Premier élément: 1 Les DataFrames Un DataFrame est une structure de données bidimensionnelle avec des étiquettes de lignes et de colonnes. C’est l’équivalent d’une feuille de calcul comme Excel.\nCréation d’un DataFrame # Création d'un DataFrame donnee = { \"Nom\": [\"Aline\", \"Robert\", \"Charles\"], \"Âge\": [25, 30, 35], \"Note\": [85.5, 90.3, 78.9] } df = pd.DataFrame(donnee) print(df) Affiche:\nNom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 2 Charles 35 78.9 Création d’un Dataframe à partir d’une Serie La méthode to_frame() permet de transformer une série en un DataFrame avec une seule colonne. Cela peut être utile lorsque vous souhaitez appliquer des opérations ou des méthodes spécifiques aux DataFrames sur une série.\nimport pandas as pd # Création d'une série ma_serie = pd.Series([1, 2, 3, 4, 5], name='Valeurs') # Conversion de la série en DataFrame df = ma_serie.to_frame() # Affichage du DataFrame print(df) Affiche:\nValeurs 0 1 1 2 2 3 3 4 4 5 Dans cet exemple, ma_serie est convertie en un DataFrame df avec une seule colonne nommée “Valeurs”.\nAccès aux colonnes et aux lignes d’un DataFrame Les méthodes df.loc et df.iloc de pandas sont utilisées pour accéder aux données dans un DataFrame, mais elles fonctionnent de manière différente :\ndf.loc : est basée sur les noms des lignes et des colonnes pour sélectionner les données. Par exemple :\ndf.loc['nom_ligne', 'nom_colonne'] Avantages : Plus intuitif lorsque vous travaillez avec des étiquettes de lignes et de colonnes. Inconvénients : Peut être plus lent que iloc pour de grandes quantités de données. df.iloc : est basée sur les indices numériques des lignes et des colonnes pour sélectionner les données. Par exemple :\ndf.iloc[0, 1] Avantages : Plus rapide et utile pour des opérations basées sur des positions. Inconvénients : Moins intuitif si vous ne connaissez pas les positions exactes des lignes et des colonnes¹². En résumé, utilisez loc lorsque vous travaillez avec des étiquettes et iloc lorsque vous travaillez avec des indice (nombres entiers).\nExemples:\nimport pandas as pd # Création du dataframe donnee = { 'Nom': ['Aline', 'Robert', 'Charles'], 'Âge': [25, 30, 35], 'Note': [85.5, 90.3, 78.9] } df = pd.DataFrame(donnee) print(f\"Le dataframe \\n{df}\") print() # Utilisation de df.loc # Sélection de la ligne avec l'index 1 (Robert) ligne_loc = df.loc[1] print(\"Utilisation de df.loc pour sélectionner la ligne avec l'index 1:\") print(ligne_loc) # Sélection des lignes avec les index 0 et 2 (Aline et Charles) lignes_loc = df.loc[[0, 2]] print(\"\\nUtilisation de df.loc pour sélectionner les lignes avec les index 0 et 2:\") print(lignes_loc) # Utilisation de df.iloc # Sélection de la ligne à la position 1 (Robert) ligne_iloc = df.iloc[1] print(\"\\nUtilisation de df.iloc pour sélectionner la ligne à la position 1:\") print(ligne_iloc) # Sélection des lignes aux positions 0 et 2 (Aline et Charles) lignes_iloc = df.iloc[[0, 2]] print(\"\\nUtilisation de df.iloc pour sélectionner les lignes aux positions 0 et 2:\") print(lignes_iloc) Voici ce que fait chaque partie du code :\ndf.loc[1] sélectionne la ligne avec l’index 1, c’est-à-dire la ligne correspondant à Robert. df.loc[[0, 2]] sélectionne les lignes avec les index 0 et 2, c’est-à-dire les lignes correspondant à Aline et Charles. df.iloc[1] sélectionne la ligne à la position 1, c’est-à-dire la ligne correspondant à Robert. df.iloc[[0, 2]] sélectionne les lignes aux positions 0 et 2, c’est-à-dire les lignes correspondant à Aline et Charles. Affiche :\nLe dataframe Nom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 2 Charles 35 78.9 Utilisation de df.loc pour sélectionner la ligne avec l'index 1: Nom Robert Âge 30 Note 90.3 Name: 1, dtype: object Utilisation de df.loc pour sélectionner les lignes avec les index 0 et 2: Nom Âge Note 0 Aline 25 85.5 2 Charles 35 78.9 Utilisation de df.iloc pour sélectionner la ligne à la position 1: Nom Robert Âge 30 Note 90.3 Name: 1, dtype: object Utilisation de df.iloc pour sélectionner les lignes aux positions 0 et 2: Nom Âge Note 0 Aline 25 85.5 2 Charles 35 78.9 Ajout et suppression de colonnes Vous pouvez facilement ajouter ou supprimer des colonnes dans un DataFrame.\nimport pandas as pd donnee = { 'Nom': ['Aline', 'Robert', 'Charles'], 'Âge': [25, 30, 35], 'Note': [85.5, 90.3, 78.9] } df = pd.DataFrame(donnee) # Ajout d'une nouvelle colonne df[\"Session\"] = \"Automne\" print(f\"La colonne Session ajoutée \\n{df}\\n\") # Suppression d'une colonne df = df.drop(columns=[\"Session\"]) print(f\"La colonne Session supprimée \\n{df}\\n\") Affiche:\nLa colonne Session ajoutée Nom Âge Note Session 0 Aline 25 85.5 Automne 1 Robert 30 90.3 Automne 2 Charles 35 78.9 Automne La colonne Session supprimée Nom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 2 Charles 35 78.9 Renommage de colonnes Les colonnes peuvent être renommées pour une meilleure clarté.\n# Renommage des colonnes df = df.rename(columns={\"Nom\": \"Prénom\"}) print(f\"La colonne Nom modifiée \\n{df}\\n\") Affiche:\nLa colonne Nom modifiée Prénom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 2 Charles 35 78.9 Tri d’un DataFrame Supposons que nous ayons un DataFrame df que nous voulons trier par la colonne âge.\nimport pandas as pd # Création du DataFrame df = pd.DataFrame({ 'Nom': ['Aline', 'Robert', 'Charles'], 'Âge': [25, 30, 35], }) # Tri du DataFrame par la colonne 'âge' df_trie = df.sort_values(by='Âge') print(df_trie) Dans cet exemple, nous avons un DataFrame df avec deux colonnes : Nom et Âge. La fonction sort_values() pour trier le DataFrame par la colonne âge. Le paramètre by='âge' indique la colonne sur laquelle nous voulons effectuer le tri.\nAffiche:\nnom âge 2 Charles 20 0 Aline 25 1 Robert 30 Fusion de Dataframes Supposons que nous ayons deux DataFrames, df1 et df2, que nous voulons fusionner sur une colonne commune appelée id.\nimport pandas as pd # Création des DataFrames df1 = pd.DataFrame({ 'id': [1, 2, 3], 'prénom': ['Aline', 'Robert', 'Charles'] }) df2 = pd.DataFrame({ 'id': [1, 2, 4], 'âge': [25, 30, 35] }) # Fusion des DataFrames sur la colonne 'id' df_fusionne = pd.merge(df1, df2, on='id', how='inner') print(df_fusionne) Dans cet exemple, nous avons deux DataFrames df1 et df2. Nous utilisons la fonction merge() pour les fusionner sur la colonne id. Le paramètre how='inner' indique que nous voulons une jointure interne, ce qui signifie que seules les lignes avec des valeurs correspondantes dans les deux DataFrames seront incluses dans le résultat final.\nAffiche:\nid prénom âge 0 1 Aline 25 1 2 Robert 30 Gestion des données de type date Travailler avec des données temporelles est essentiel dans de nombreuses disciplines scientifiques. Pandas rend cette tâche beaucoup plus simple en fournissant des outils pour manipuler et analyser les dates.\nConversion des chaînes de caractères en dates Lorsque vous chargez des données, les dates peuvent être sous forme de chaînes de caractères. La première étape consiste donc à les convertir type datetime.\nimport pandas as pd # Chargement des données donnees_date = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'], 'Température': [20, 21, 19]} df = pd.DataFrame(donnees_date) # Conversion en datetime df['Date'] = pd.to_datetime(df['Date']) print(df) Affiche:\nDate Température 0 2024-01-01 20 1 2024-01-02 21 2 2024-01-03 19 Extraction des composants de la date Une fois les dates converties en datetime, vous pouvez extraire facilement des composants spécifiques comme l’année, le mois ou le jour.\n# Extraction de l'année df['Année'] = df['Date'].dt.year # Extraction du mois df['Mois'] = df['Date'].dt.month # Extraction du jour df['Jour'] = df['Date'].dt.day print(df) Affiche:\nDate Température Année Mois Jour 0 2024-01-01 20 2024 1 1 1 2024-01-02 21 2024 1 2 2 2024-01-03 19 2024 1 3 Manipulation des dates Pandas permet aussi de faire des manipulations temporelles comme le filtrage par date, l’ajout de jours ou la création de plages de dates.\nFiltrage par date # Filtrage pour obtenir les données de janvier 2024 masque = (df['Date'] \u003e= '2024-01-01') \u0026 (df['Date'] \u003c= '2024-01-31') donnee_janvier = df.loc[masque] print(donnee_janvier) Affiche:\nDate Température 0 2024-01-01 20 1 2024-01-02 21 2 2024-01-03 19 Ajout de jours # Ajout de 5 jours à chaque date df['Date plus 5'] = df['Date'] + pd.Timedelta(days=5) print(df) Affiche:\nDate Température Date plus 5 0 2024-01-01 20 2024-01-06 1 2024-01-02 21 2024-01-07 2 2024-01-03 19 2024-01-08 Création d’une plage de dates # Création d'une plage de dates (D = Day) plage_date = pd.date_range(start='2024-01-01', end='2024-01-10', freq='D') print(plage_date) Affiche:\nDatetimeIndex(['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05', '2024-01-06', '2024-01-07', '2024-01-08', '2024-01-09', '2024-01-10'], dtype='datetime64[ns]', freq='D') Exemple complet import pandas as pd # Données data = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'], 'Température': [20, 21, 19]} df = pd.DataFrame(data) # Conversion en datetime df['Date'] = pd.to_datetime(df['Date']) # Extraction des composants de la date df['Année'] = df['Date'].dt.year df['Mois'] = df['Date'].dt.month df['Jour'] = df['Date'].dt.day # Filtrage par date masque = (df['Date'] \u003e= '2024-01-01') \u0026 (df['Date'] \u003c= '2024-01-31') donnees_janvier = df.loc[masque] # Ajout de jours df['Date plus 5'] = df['Date'] + pd.Timedelta(days=5) # Création d'une plage de dates plage_date = pd.date_range(start='2024-01-01', end='2024-01-10', freq='D') print(f\"Le dataframe \\n{df}\\n\") print(f\"Les données du mois de janvier \\n{donnees_janvier}\\n\") print(f\"La plage de dates du 1er au 10 janvier 2024 \\n{plage_date}\\n\") Affiche:\nLe dataframe Date Température Année Mois Jour Date plus 5 0 2024-01-01 20 2024 1 1 2024-01-06 1 2024-01-02 21 2024 1 2 2024-01-07 2 2024-01-03 19 2024 1 3 2024-01-08 Les données du mois de janvier Date Température Année Mois Jour 0 2024-01-01 20 2024 1 1 1 2024-01-02 21 2024 1 2 2 2024-01-03 19 2024 1 3 La plage de dates du 1er au 10 janvier 2024 DatetimeIndex(['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05', '2024-01-06', '2024-01-07', '2024-01-08', '2024-01-09', '2024-01-10'], dtype='datetime64[ns]', freq='D') Utilisation de fichiers de données Le traitement des fichiers contenant des données est essentiel en programmation Python, en particulier dans le domaine des sciences de données.\nIntroduction aux fichiers CSV CSV signifie Comma-Separated Values (valeurs séparées par des virgules). C’est un format de fichier simple utilisé pour stocker des données tabulaires, comme une feuille de calcul Excel.\nPandas fourni des fonctionnalités pour lire des fichiers csv ou en créer.\nImportation et exportation de données Lecture de fichiers CSV Pandas permet de les lire facilement. Le code suivant, permet de lire le contenu du fichier donnees.csv et d’afficher les premières lignes (par défaut 5). On peut préciser le nombre de ligne à afficher, en spécifiant une valeur dans head() par exemple df.head(12) affichera les 12 premières lignes du dataframe.\n# Lecture d'un fichier CSV df = pd.read_csv(\"donnees.csv\") print(df.head()) Écriture de fichiers CSV Vous pouvez également écrire des données dans un fichier CSV.\n# Écriture d'un DataFrame dans un fichier CSV df.to_csv(\"fichier.csv\", index=False) L’argument index=False est utilisé pour indiquer que vous ne souhaitez pas inclure l’index du dataframe dans le fichier CSV exporté. Par défaut, Pandas inclut l’index du dataframe comme première colonne dans le fichier CSV. En utilisant index=False, vous pouvez éviter cela.\nVoici un exemple pour illustrer :\nimport pandas as pd # Création du dataframe donnee = { 'Nom': ['Aline', 'Robert', 'Charles'], 'Âge': [25, 30, 35], 'Note': [85.5, 90.3, 78.9] } df = pd.DataFrame(donnee) # Exportation du dataframe en CSV sans l'index df.to_csv(\"fichier-sans-index.csv\", index=False) # Exportation du dataframe en CSV avec l'index (par défaut) df.to_csv(\"fichier-avec-index.csv\") Dans fichier_sans_index.csv, le fichier CSV n’aura pas de colonne d’index, tandis que dans fichier_avec_index.csv, la première colonne sera l’index du dataframe.\nFichier csv avec index\nFichier csv avec index\nFichier csv sans index\nFichier csv sans index\nManipulation de données Sélection et filtrage de données Vous pouvez sélectionner des colonnes spécifiques ou filtrer des lignes en fonction de conditions.\n# Sélection de colonnes ages = df['Âge'] print(f\"Les âges sont:\\n{ages}\\n\") # Filtrage de lignes df_filtre = df[df['Note'] \u003e 80] print(f\"Le dataframe contenant seulement les notes \u003e 80 \\n{df_filtre}\\n\") Affiche :\nLes âges sont: 0 25 1 30 2 35 Name: Âge, dtype: int64 Le dataframe contenant seulement les notes \u003e 80 Nom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 Gestion des valeurs manquantes Les données expérimentales peuvent souvent contenir des valeurs manquantes. Pandas offre des méthodes pour les gérer.\nRemplissage des valeurs manquantes:\ndf.fillna(0, inplace=True) Cette ligne remplace toutes les valeurs manquantes (NaN) dans le dataframe df par 0. L’argument inplace=True signifie que la modification est faite directement sur le dataframe df sans créer une nouvelle copie.\nSuppression des lignes avec des valeurs manquantes:\ndf.dropna(inplace=True) Cette ligne supprime toutes les lignes du dataframe df qui contiennent au moins une valeur manquante (NaN). Comme précédemment, inplace=True signifie que la modification est faite directement sur le dataframe df.\nSi inplace=False, les modifications ne sont pas appliquées directement au dataframe original. Au lieu de cela, une nouvelle copie du dataframe avec les modifications est retournée. Le dataframe original reste inchangé.\nAnalyse de données Statistiques descriptives Pandas fournit des méthodes pour calculer des statistiques descriptives rapidement.\n# Statistiques descriptives print(f\"Statistiques : \\n{df.describe()}\\n\") Affiche :\nStatistiques : Âge Note count 3.0 3.000000 mean 30.0 84.900000 std 5.0 5.723635 min 25.0 78.900000 25% 27.5 82.200000 50% 30.0 85.500000 75% 32.5 87.900000 max 35.0 90.300000 La méthode df.describe() fournit des statistiques descriptives pour les colonnes numériques d’un dataframe. Voici les informations qu’elle donne :\nStatistique Description count Le nombre de valeurs non manquantes mean La moyenne des valeurs std L’écart type, qui mesure la dispersion des valeurs par rapport à la moyenne min La valeur minimale 25% Le premier quartile (25ème percentile), qui est la valeur en dessous de laquelle se trouvent 25% des données 50% La médiane (50ème percentile), qui est la valeur en dessous de laquelle se trouvent 50% des données 75% Le troisième quartile (75ème percentile), qui est la valeur en dessous de laquelle se trouvent 75% des données max La valeur maximale Groupement et agrégation Le groupement et l’agrégation sont essentiels pour analyser des données catégorielles.\nimport pandas as pd # Création du DataFrame data = { 'Substance': ['Eau', 'Eau', 'Eau', 'Acide sulfurique', 'Acide sulfurique', 'Acide sulfurique', 'Sodium', 'Sodium', 'Sodium'], 'Concentration (mol/L)': [0.1, 0.2, 0.3, 1.0, 1.5, 2.0, 0.5, 0.7, 0.9], 'pH': [7.0, 7.1, 7.2, 1.0, 1.2, 1.5, 13.0, 13.2, 13.5], 'Température (°C)': [25, 25, 25, 20, 20, 20, 30, 30, 30] } df = pd.DataFrame(data) # Affichage du DataFrame print(f\"Affichage des données \\n{df}\\n\") # Grouper par la colonne Substance et calcul de la moyenne des autres colonnes df_groupe = df.groupby(\"Substance\").mean() print(f\"Affichage des données groupées par substance \\n{df_groupe}\\n\") Affiche:\nAffichage des données Substance Concentration (mol/L) pH Température (°C) 0 Eau 0.1 7.0 25 1 Eau 0.2 7.1 25 2 Eau 0.3 7.2 25 3 Acide sulfurique 1.0 1.0 20 4 Acide sulfurique 1.5 1.2 20 5 Acide sulfurique 2.0 1.5 20 6 Sodium 0.5 13.0 30 7 Sodium 0.7 13.2 30 8 Sodium 0.9 13.5 30 Affichage de la moyenne des données groupées par substance Concentration (mol/L) pH Température (°C) Substance Acide sulfurique 1.5 1.233333 20.0 Eau 0.2 7.100000 25.0 Sodium 0.7 13.233333 30.0 Cas avertissement de FutureWarning Attention Si vous rencontrez un avertissement FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.*, vous devez soit spécifier explicitement numeric_only=True ou sélectionner uniquement les colonnes numériques avant d’appliquer la fonction mean()\nExemple:\ndonnee = { \"Nom\": [\"Aline\", \"Robert\", \"Charles\", \"Julie\"], \"Âge\": [25, 30, 35, 25], \"Note\": [85.5, 90.3, 78.9, 88.9] } df = pd.DataFrame(donnee) df_groupe = df.groupby(\"Âge\").mean(numeric_only=True) print(f\"Affichage de la moyenne des données groupées par âge \\n{df_groupe}\\n\") Affiche:\nAffichage de la moyenne des données groupées par âge Note Âge 25 87.2 30 90.3 35 78.9 Les attributs index et values des DataFrames et des Series .index : Définition : L’attribut .index d’un DataFrame ou d’une Series représente les étiquettes des lignes. Pour un DataFrame, il s’agit des étiquettes des lignes, et pour une Series, il s’agit des étiquettes des éléments. Utilisation : Il est souvent utilisé pour accéder ou manipuler les indices des données. Par exemple, dans une Series contenant des précipitations annuelles (Année, Précipitation), .index contiendrait les années. total_annee = df.groupby('Année')['Précipitation'].sum() print(total_annee.index) # Affiche les années .values : Définition : L’attribut .values d’un DataFrame ou d’une Series représente les données sous forme de tableau (numPy). Pour un DataFrame, il s’agit des valeurs de toutes les cellules, et pour une Series, il s’agit des valeurs des éléments. Utilisation : Il est utilisé pour accéder directement aux valeurs des données sans les étiquettes. Par exemple, dans une Series contenant des précipitations annuelles (Année, Précipitation), .values contiendrait les valeurs des précipitations. total_par_annee = df.groupby('Année')['Précipitation'].sum() print(total_par_annee.values) # Affiche les précipitations totales pour chaque année En résumé, .index vous donne les étiquettes des lignes (ou des éléments dans une Series), tandis que .values vous donne les valeurs des données.\nFonctions et méthodes Voici un tableau de quelques méthodes et fonctions incontournables en analyse de données scientifiques :\nMéthode/Fonction Description read_csv() Lire des fichiers CSV et les convertir en DataFrame head() Afficher les premières lignes d’un DataFrame describe() Fournir des statistiques descriptives pour les colonnes numériques d’un DataFrame info() Afficher un résumé concis du DataFrame, y compris le type de données et les valeurs manquantes groupby() Grouper les données par une ou plusieurs colonnes et appliquer des fonctions d’agrégation pivot_table() Créer des tableaux croisés dynamiques pour résumer les données plot() Générer des graphiques simples pour visualiser les données corr() Calculer la matrice de corrélation entre les colonnes numériques merge() Fusionner deux DataFrames sur une ou plusieurs colonnes clés dropna() Supprimer les lignes ou colonnes contenant des valeurs manquantes fillna() Remplace les lignes ou colonnes contenant des valeurs manquantes par une valeur donnée to_frame() Transforme une série en un DataFrame avec une seule colonne sort_values() Trie les valeurs d’une colonne d’un DataFrame Visualisation de données Bien que Pandas ne soit pas une bibliothèque de visualisation, il s’intègre bien avec Matplotlib pour créer des graphiques simples.\nInfo Nous verrons comment utiliser la bibliothèque Matplotlib pour tracer des graphiques, la semaine prochaine.\nPour tout savoir sur Pandas: Site officiel Pandas.",
    "description": "Qu’est-ce que pandas? Pandas est une bibliothèque Python utilisée pour la manipulation et l’analyse de données. Elle est particulièrement utile pour traiter de grandes quantités de données expérimentales.\nCe cours couvre les concepts de base de Pandas, en mettant l’accent sur les applications pratiques dans les sciences.\nInstallation de Pandas Avant de commencer, assurez vous d’avoir Pandas installé. Vous pouvez l’installer via pip :",
    "tags": [],
    "title": "Pandas (intermédiaire-avancé)",
    "uri": "/bases/langage-de-prog/pandas/pandas/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre quels sont les objectifs du cours 420-SN1-RE. Connaitre les responsabilités de l’enseignante et celles des étudiants Comprendre les éléments de base de la programmation. Se familiariser à l’environnement de travail. Savoir déterminer les données en entrée, en sortie et leurs traitements dans des problèmes scientifique simples. Plan de la leçon Connexion à Moodle et présentation du site du cours ~15 mins. Présentation de votre enseignante ~5 mins. Présentation des étudiants (prénom, [nom] , passes-temps, expérience en programmation) ~20 mins. Présentation du cours ~25 mins. Pause 5 minutes. Quiz Moodle : Évaluation diagnostique ~5 mins. L’environnement de développement (Python, Visual Studio Code et Jupyter Notebook) ~20 mins. Pause 5 mins. Programme et langage de programmation ~5 mins. Le cycle de développement de logiciel ~5 mins. L’analyse du problème: détermination et traitement des données ~15 mins. Atelier: Analyse de problèmes simples ~30 mins. Pour la semaine prochaine.",
    "description": "Objectifs de la leçon Comprendre quels sont les objectifs du cours 420-SN1-RE. Connaitre les responsabilités de l’enseignante et celles des étudiants Comprendre les éléments de base de la programmation. Se familiariser à l’environnement de travail. Savoir déterminer les données en entrée, en sortie et leurs traitements dans des problèmes scientifique simples. Plan de la leçon Connexion à Moodle et présentation du site du cours ~15 mins. Présentation de votre enseignante ~5 mins. Présentation des étudiants (prénom, [nom] , passes-temps, expérience en programmation) ~20 mins. Présentation du cours ~25 mins. Pause 5 minutes. Quiz Moodle : Évaluation diagnostique ~5 mins. L’environnement de développement (Python, Visual Studio Code et Jupyter Notebook) ~20 mins. Pause 5 mins. Programme et langage de programmation ~5 mins. Le cycle de développement de logiciel ~5 mins. L’analyse du problème: détermination et traitement des données ~15 mins. Atelier: Analyse de problèmes simples ~30 mins. Pour la semaine prochaine.",
    "tags": [],
    "title": "Présentations et introduction à la programmation",
    "uri": "/semaine1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Régression Linéaire",
    "content": "Voici comment calculer une droite de régression linéaire en utilisant NumPy, une bibliothèque Python puissante pour les calculs numériques.\nÉtapes du calcul Importer NumPy : Tout d’abord, vous devez importer la bibliothèque NumPy.\nimport numpy as np Préparer les données : Vous devez avoir deux ensembles de données : les valeurs de la variable indépendante (x) et les valeurs de la variable dépendante (y).\nx = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) Calculer les coefficients de la croite de régression : Utilisez les formules de la régression linéaire pour calculer les coefficients a (pente) et b (ordonnée à l’origine).\n**Formule pour la pente a ** : $$ a = \\frac{n(\\sum xy) - (\\sum x)(\\sum y)}{n(\\sum x^2) - (\\sum x)^2} $$ **Formule pour l’ordonnée à l’origine b ** : $$ b = \\frac{(\\sum y) - a(\\sum x)}{n} $$ Voici comment les calculer avec NumPy :\nn = len(x) sum_x = np.sum(x) sum_y = np.sum(y) sum_xy = np.sum(x * y) sum_x2 = np.sum(x**2) a = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2) b = (sum_y - a * sum_x) / n Calculer les valeurs prédites : Utilisez les coefficients a et b pour calculer les valeurs prédites de y pour chaque valeur de x .\ny_pred = a * x + b Tracer le graphique : Utilisez Matplotlib pour tracer les points de données et la droite de régression.\nimport matplotlib.pyplot as plt plt.scatter(x, y, color='blue', label='Données réelles') plt.plot(x, y_pred, color='red', label='Régression linéaire') plt.xlabel('x') plt.ylabel('y') plt.title('Régression Linéaire') plt.legend() plt.show() Exemple Complet Voici le code complet pour calculer et tracer une droite de régression linéaire avec NumPy :\nimport numpy as np import matplotlib.pyplot as plt # Données x = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) # Calcul des coefficients n = len(x) sum_x = np.sum(x) sum_y = np.sum(y) sum_xy = np.sum(x * y) sum_x2 = np.sum(x**2) a = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2) b = (sum_y - a * sum_x) / n # Valeurs prédites y_pred = a * x + b # Tracer le graphique plt.scatter(x, y, color='blue', label='Données réelles') plt.plot(x, y_pred, color='red', label='Régression linéaire') plt.xlabel('x') plt.ylabel('y') plt.title('Régression Linéaire') plt.legend() plt.show()",
    "description": "Voici comment calculer une droite de régression linéaire en utilisant NumPy, une bibliothèque Python puissante pour les calculs numériques.\nÉtapes du calcul Importer NumPy : Tout d’abord, vous devez importer la bibliothèque NumPy.\nimport numpy as np Préparer les données : Vous devez avoir deux ensembles de données : les valeurs de la variable indépendante (x) et les valeurs de la variable dépendante (y).\nx = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) Calculer les coefficients de la croite de régression : Utilisez les formules de la régression linéaire pour calculer les coefficients a (pente) et b (ordonnée à l’origine).",
    "tags": [],
    "title": "Calcul d'une droite de régression linéaire avec NumPy",
    "uri": "/bases/langage-de-prog/reg-lineaire/reglineaire_numpy/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Présentations et introduction à la programmation",
    "content": "Le plan et la vue synoptique du cours Note Vous trouverez l’intégralité du plan de cours sur Moodle. C’est cette version que vous devrez consulter au cours de la session. Sur Moodle, vous trouverez également la vue synoptique du cours, qui permet d’avoir une vue d’ensemble des étapes de la session.\nLa pondération 1-2-3 La pondération d’un cours, le nombre d’heures en moyenne par semaine qu’un.e élève doit effectuer pour réussir le cours. Dans l’ordre, pour le cours 420-SN1-RE:\n1 = le nombre d’heure de cours théorique en classe 2 = le nombre d’heures d’ateliers en classe 3 = le nombre d’heures de travail personnel en dehors de la classe Les objectifs du cours, les attitudes à développer voir plan de cours p.2\nLes cours pour lesquels ce cours est préalable voir plan de cours p.2\nLes responsabilités de l’enseignante Fournir du matériel pédagogique. Créer un environnement d’apprentissage positif et inclusif qui favorise le respect mutuel et l’engagement des élèves. Aider les élèves à développer des compétences critiques et analytiques, ainsi que des compétences sociales et professionnelles. Communiquer efficacement avec les élèves concernant les progrès, les attentes et les préoccupations. Traiter tous les élèves avec équité et respect, et être sensible aux facteurs qui influencent leur apprentissage. Les responsabilités de l’élève Les élèves doivent lire / visionner le matériel assigné avant la classe pour laquelle ils sont programmés. Assister aux cours et arriver à l’heure. Participer activement en classe. Effectuer les ateliers. Demander de l’aide tôt s’ils ont des problèmes. .\nLe contexte d’apprentissage voir plan de cours p.3\nLes évaluations des apprentissages voir plan de cours p.6\nÉvaluation Date évaluation/remise Pondération 10 quiz Moodle Hebdomadaires 20% Minitest Semaine #4 10% Examen Semaine #10 30% Projet intégrateur Semaine #15 40% Les règles d’évaluation des apprentissages voir plan de cours p.7-8\nPause: 5 minutes .",
    "description": "Le plan et la vue synoptique du cours Note Vous trouverez l’intégralité du plan de cours sur Moodle. C’est cette version que vous devrez consulter au cours de la session. Sur Moodle, vous trouverez également la vue synoptique du cours, qui permet d’avoir une vue d’ensemble des étapes de la session.",
    "tags": [],
    "title": "Présentation du cours",
    "uri": "/semaine1/pr%C3%A9sentation-du-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Présentations et introduction à la programmation",
    "content": ".\nQu’est-ce qu’un programme ? Un programme, ou une application, ou encore un logiciel, est un outil permettant la réalisation de tâches.\nTraitement de texte Envois de messages Prévision météorologique Gestion de stock Montage vidéo Pour réaliser ces tâches, un programme va implémenter un ou plusieurs algorithmes dans un langage de programmation.\nQu’est-ce qu’un algorithme ? Un algorithme est une suite d’actions qui suivent un ordre précis. Cette suite d’actions représente les traitements sur les données. Un algorithme doit être clair et précis. Pour aider à concevoir la solution, un algorithme peut être traduit en ordinogramme. Attention Un algorithme ne s’exécute pas, il représente les étapes que le programme devra faire. C’est l’implémentation (le code) avec un langage qui s’exécute. Il peut y avoir plusieurs implémentations d’un même algorithme. Exemples d’algorithmes que vous connaissez déjà :\nUne recette de cuisine. Les instructions pour assembler un meuble. Les instructions pour préparer un café chaud avec du lait. La méthode pour calculer la somme des nombres de 1 à 100. Etc. Qu’est-ce qu’un langage de programmation ? Un langage de programmation est un ensemble de mots clés et des règles de syntaxe qui permettent d’écrire un programme exécutable par un système informatique.\nNB: un système informatique ne comprend que le binaire (0 et 1), un langage de programmation est le meilleur moyen d’avoir un langage intelligible pour faire une interface entre l’homme et la machine (le binaire).\nLe rêve ultime est d’utiliser le langage naturel (le français par exemple) pour écrire un programme. C’est ce qu’essaye d’entreprendre certaines compagnies d’intelligence artificielle. Les résultats pour le moment restent mitigés.\nEn attendant la réalisation de cette promesse, voici quelques langages couramment utilisés:\nEx: Python, C/C++, C#, java, Matlab, …. Langages de programmation les plus populaires : TIOBE Index Info Aucun langage n’est parfait pour toutes les tâches. On doit choisir le meilleur compromis pour la tâche à accomplir.\nEn général les gros logiciels professionnels sont écrit avec plusieurs langages de programmation.\nCycle de développement logiciel Le cycle de développement d’un logiciel se décompose en plusieurs étapes que nous pouvons retrouver à travers ce schéma :\nGoffinet, F. (2021, 11 novembre). Concepts de développement logiciel.\nLe schéma représente un cercle fermé car un logiciel n’est jamais complètement fini. Il est en constante évolution dû à des besoins utilisateurs grandissants.\nPourquoi Python ? Ce langage est très utilisé dans la communauté scientifique, car il est facile à prendre en main et il offre une bonne compatibilité avec les autres outils scientifiques. Il est souvent défini comme une colle entre ces outils.\nIl propose aussi un grand nombre de librairies d’analyse scientifique très robustes comme : NumPy, Pandas, MatplotLib…\nPython est un langage interprété orienté objet. Sa syntaxe simple offre une multitude de possibilité de développement. Il est possible de créer ses propres modules qui seront ensuite partagés à la communauté. Exemple : pipy.\nC’est un langage de programmation assez classique, il propose les mécanismes standards suivants :\nDonnées typées : entiers, réels, booléens, chaînes de caractères. Structures avancées de données : listes, dictionnaires, classes. Séquences d’instructions : écrire et exécuter une série de commandes sans avoir à intervenir entre les instructions. Structures algorithmiques : branchements conditionnels et boucles. Programmation structurée : utiliser les procédures et fonctions pour mieux organiser son code. Appeler plusieurs fichiers d’extension “.py” dans d’autres programmes à l’aide de la commande “import”. Il offre aussi l’avantage d’être un langage libre et open source.\nComment écrire un programme ? Visual Studio Code Dans ce cours, nous allons utiliser un environnement de développement (IDE) pour développer nos programmes d’analyse scientifiques avec Python. Il s’agit de Visual Studio Code.\nVisual Studio Code est comme un cahier de notes pour écrire du code.\nIl est gratuit et peut être utilisé avec beaucoup de langages de programmation, dont Python.\nIl a des fonctionnalités pratiques, comme :\naider à compléter le code. executer le programme en cours de développement. trouver des erreurs. mettre en forme le code, etc. On peut aussi ajouter des extensions pour avoir plus de fonctionnalités, comme intégrer des bibliothèques scientifiques, des vérificateurs de code, des testeurs, etc.\nInterface de Visual Studio Code Premier exemple de programme en Python Exemple de programme simple dans python :\n# Exemple d'un programme simple qui effectue la somme de 2 nombres # Données en entrée x = 5 y = 7 # Traitement somme = x + y # Affichage print('La somme x + y est égale à : ', somme) Info Un programme informatique fait ce que vous lui dites de faire, pas ce que vous voulez qu’il fasse.\nVoyons ensemble comment exécuter ce programme.\nExemple à télécharger\nOutils: VS Code et Jupyter\nPAUSE 5 minutes .",
    "description": ".\nQu’est-ce qu’un programme ? Un programme, ou une application, ou encore un logiciel, est un outil permettant la réalisation de tâches.\nTraitement de texte Envois de messages Prévision météorologique Gestion de stock Montage vidéo Pour réaliser ces tâches, un programme va implémenter un ou plusieurs algorithmes dans un langage de programmation.",
    "tags": [],
    "title": "Introduction à la programmation",
    "uri": "/semaine1/introduction-la-programmation/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Présentations et introduction à la programmation",
    "content": ".\nL’importance de l’analyse de problèmes Attention Avant de commencer à coder, il est fortement recommandé de décortiquer le problème. C’est plus efficace de créer un algorithme (une série d’étapes logiques) pour résoudre un problème, avant de se lancer dans l’écriture du code.\nEn quoi consiste l’analyse d’un problème ? À ce stade, ce n’est pas nécessaire de connaitre la syntaxe du langage de programmation.\nL’objectif est d’identifier :\nles données nécessaires au programme (données d’entrée) les actions à faire sur les données (traitements) les résultats à obtenir (données de sortie) Chaque opération de l’algorithme est une instruction, et il est important de tester l’algorithme avec des valeurs d’essai pour vérifier son bon fonctionnement, un processus appelé “la trace de l’algorithme”.\nLes données d’entrée Les données d’entrée sont les informations dont nous disposons au début. En bref, la question qui se pose est: “De quoi avons-nous besoin pour obtenir le résultat recherché?” Exemple : si nous étudions la croissance des plantes, les données d’entrée pourraient être la quantité de lumière, la température, le type de sol, etc.\nLes données de sortie Les données de sortie sont les résultats que nous souhaitons obtenir à partir des données d’entrée. Dans l’exemple de croissance des plantes, les données de sortie pourraient être: La hauteur de la plante. Le nombre de feuille. La couleur des fleurs. etc. Les traitements Les traitements sont les modifications, manipulations faites sur les données d’entrée pour obtenir les données de sortie. Cela peut impliquer des calculs mathématiques, des expériences en laboratoire, des simulations informatiques, etc. Dans l’exemple de la croissance des plantes, le traitement pourrait consister à: planter des graines dans différents types de sol. mesurer leur croissance au fil du temps. Un exemple simple Exemple : Calcul de l’aire d’un cercle\nRappel: la formule pour calculer l’aire d’un cercle est: aire = PI * rayon^2\nDonnées d’entrée : ? Données de sortie : ? Nature des traitements : ? Info La semaine prochaine, nous verrons une des façons les plus répandues de traduire un algorithme avant de commencer à coder: l’ordinogramme",
    "description": ".\nL’importance de l’analyse de problèmes Attention Avant de commencer à coder, il est fortement recommandé de décortiquer le problème. C’est plus efficace de créer un algorithme (une série d’étapes logiques) pour résoudre un problème, avant de se lancer dans l’écriture du code.\nEn quoi consiste l’analyse d’un problème ? À ce stade, ce n’est pas nécessaire de connaitre la syntaxe du langage de programmation.",
    "tags": [],
    "title": "Du problème à l'algorithme au programme",
    "uri": "/semaine1/analyse-de-probl%C3%A8mes/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Présentations et introduction à la programmation",
    "content": "Analyse de problèmes",
    "description": "Analyse de problèmes",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine1/ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Présentations et introduction à la programmation",
    "content": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #1. Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 2. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "description": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #1. Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 2. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "tags": [],
    "title": "Pour le prochain cours",
    "uri": "/semaine1/pour-le-prochain-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre les rôles du pseudo-code et de l’ordinogramme. Savoir comment créer un ordinogramme. Écrire un premier script Python. Savoir déclarer et initialiser des variables de différents types. Utiliser des variables dans des opérations simples en respectant les priorités des opérateurs. Plan de la leçon Quiz: Introduction à la programmation et analyse de problèmes (10 mins). Algorithme en ordinogramme ~15 mins. Pause 5 mins Les variables et les types de données ~30 mins. Les opérateurs arithmétiques et l’affichage de données ~10 mins Pause 5 mins Les nombres à virgule et les erreurs d’arrondi ~10mins. Atelier - Ordinogramme Atelier - Variables et expressions Pour la semaine prochaine.",
    "description": "Objectifs de la leçon Comprendre les rôles du pseudo-code et de l’ordinogramme. Savoir comment créer un ordinogramme. Écrire un premier script Python. Savoir déclarer et initialiser des variables de différents types. Utiliser des variables dans des opérations simples en respectant les priorités des opérateurs. Plan de la leçon Quiz: Introduction à la programmation et analyse de problèmes (10 mins). Algorithme en ordinogramme ~15 mins. Pause 5 mins Les variables et les types de données ~30 mins. Les opérateurs arithmétiques et l’affichage de données ~10 mins Pause 5 mins Les nombres à virgule et les erreurs d’arrondi ~10mins. Atelier - Ordinogramme Atelier - Variables et expressions Pour la semaine prochaine.",
    "tags": [],
    "title": "Ordinogramme et introduction à Python",
    "uri": "/semaine2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Ordinogramme et introduction à Python",
    "content": ".\nAvant d’implémenter l’algorithme dans un langage en particulier, il existe plusieurs manières / outils pour nous aider à valider formellement le bon fonctionnement de l’algorithme :\ndu pseudo-code1. un ordinogramme / organigramme de programmation. L’ordinogramme (ou organigramme de programmation) Les ordinogrammes est une représentation graphiques des étapes de l’algorithme. Le programmeur devra traduire l’ordinogramme à l’aide d’un langage de programmation. L’organigramme de programmation utilise des symboles normalisés représentés ci- dessous : .\nExemples d’ordinogrammes Exemple 1 : Devinette d’un nombre\n.\nNote La compréhension des algorithmes et la capacité à les représenter sous forme d’ordinogrammes sont des compétences précieuses à acquérir.\nPause : 5 minutes Le Python est un langage tellement proche du pseudo-code, que nous le mentionnons seulement pour que vous en ayez connaissance. Nous ne l’utiliseront pas pour ce cours. ↩︎",
    "description": ".\nAvant d’implémenter l’algorithme dans un langage en particulier, il existe plusieurs manières / outils pour nous aider à valider formellement le bon fonctionnement de l’algorithme :\ndu pseudo-code1. un ordinogramme / organigramme de programmation. L’ordinogramme (ou organigramme de programmation) Les ordinogrammes est une représentation graphiques des étapes de l’algorithme. Le programmeur devra traduire l’ordinogramme à l’aide d’un langage de programmation. L’organigramme de programmation utilise des symboles normalisés représentés ci- dessous : .",
    "tags": [],
    "title": "Ordinogramme",
    "uri": "/semaine2/ordinogramme/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Ordinogramme et introduction à Python",
    "content": ".\nDéfinition des variables Définition Une variable est une zone de la mémoire de l’ordinateur dans laquelle une valeur est stockée. Une variable est définie par un nom et sa valeur. Vous pouvez imaginer une variable comme une boîte dans laquelle vous pouvez mettre des choses, comme des nombres, du texte, des listes, etc..\nComment nommer une variable ? Pour garantir la lisibilité et la maintenabilité de votre code, il est essentiel de suivre certaines règles de nommage des variables en Python. Voici les principales règles à respecter :\nUtiliser des noms significatifs :\nChoisissez des noms de variables qui décrivent clairement leur contenu ou leur rôle. Par exemple, age, nom_utilisateur, ou total_facture sont des noms explicites. Commencer par une lettre ou un underscore :\nLes noms de variables doivent commencer par une lettre (a-z, A-Z) ou un underscore (_). Par exemple, nom, _compteur. Utiliser des lettres, des chiffres et des underscores :\nAprès le premier caractère, vous pouvez utiliser des lettres, des chiffres (0-9) et des underscores. Par exemple, compteur1, total_facture_2024. Respecter la casse :\nPython est sensible à la casse, ce qui signifie que variable, Variable et VARIABLE sont trois variables différentes. Utilisez une convention cohérente, comme le snake_case (mots séparés par des underscores) pour les variables : nombre_utilisateurs. Éviter les mots réservés :\nNe pas utiliser les mots réservés de Python comme noms de variables. Par exemple, print, class, for, if sont des mots réservés et ne peuvent pas être utilisés comme noms de variables. Exemples de bonnes et de mauvaises pratiques # Bonnes pratiques age_utilisateur nom_utilisateur total_facture # Mauvaises pratiques 1valise\t# Commence par un chiffre total-facture\t# Utilise un tiret au lieu d'un underscore class\t# Utilise un mot réservé 'class' point equivalence\t# Contient un espace opposé\t# Contient une lettre accentuée Les commentaires Les commentaires commencent par le symbole # (dièse).\nPython ignore les commentaires, c’est-à-dire qu’il ne les exécute pas.\nLes commentaires sont utilisés pour :\nExpliquer le code Rendre le code plus lisible Empêcher l’exécution lors de tests du code Déclaration et assignation Le symbole = est appelé opérateur d’affectation. Il permet d’assigner une valeur à une variable.\nAttention Cet opérateur s’utilise toujours de la droite vers la gauche. Par exemple, dans l’instruction x = 5, Python attribue la valeur située à droite (ici, 5) à la variable située à gauche (ici, x).\nvariable = valeur Par exemple:\nx = 5 nom = \"Alice\" prix = 19.99 Assignation multiple Python permet l’assignation multiple, où vous pouvez assigner des valeurs à plusieurs variables en une seule ligne.\na, b, c = 1, 2, 3 Vous pouvez également assigner la même valeur à plusieurs variables simultanément.\nx = y = z = 0 Types de variables En programmation, il existe plusieurs types de variables :\nles nombres entiers (int) les nombres à virgules dit les flottants (float) les chaînes de caractères (string) les booléens (bool) les listes (list) les dictionnaires (dict) Python est un langage à typage dynamique, ce qui signifie que vous n’avez pas besoin de spécifier le type de données lors de la déclaration d’une variable. Le type de la variable est déterminé automatiquement en fonction de la valeur assignée.\nage = 30 # type int nom = \"Robert\" # type str temperature = 36.6 # type float est_present = True # type bool La méthode type() est une fonction intégrée en Python qui permet de déterminer le type d’une variable.\nPour utiliser type(), il suffit de mettre le nom de la variable ciblée dans les parenthèses. Par exemple :\nage = 30 print(type(age)) # Affiche \u003cclass 'int'\u003e nom = \"Robert\" print(type(nom)) # Affiche \u003cclass 'str'\u003e temperature = 36.6 print(type(temperature)) # Affiche \u003cclass 'float'\u003e est_present = True print(type(est_present)) # Affiche \u003cclass 'bool'\u003e Le transtypage (Casting) ou la conversion de types L’opération de transtypage consiste à convertir une variable en un type différent de son type original.\nPour ce faire, il existe différentes méthodes selon le type de données désiré.\nint(): Converti en nombre entier. float(): Converti en type flottant ou nombre à virgule. str(): Converti en chaine de caractères. Exemple:\nx = 10 # entier\ry = \"20\" # chaine\r# y est changé en entier pour l'additionner à x\rsomme = x + int(y) Ce code affichera 30\nNote La fonction int() est couramment utilisée pour convertir un nombre flottant en un entier en le tronquant, c’est-à-dire en supprimant la partie décimale sans arrondir. Par exemple, int(9.9) renverra 9. Il est important de noter que int() ne fait que tronquer le nombre et ne l’arrondit pas. Pour arrondir un flottant à l’entier le plus proche, vous pouvez utiliser la fonction round().\nAttention Dans le cas où vous essayez de modifier une variable de type chaîne de caractères vers un entier ou un flottant, une erreur surviendra car la conversion n’est pas possible.\nExemple :\nfloat(\"Valorant\") --------------------------------------------------------------------------- ValueError Traceback (most recent call last) Cell In[3], line 1 ----\u003e 1 float(\"Valorant\") ValueError: could not convert string to float: 'Valorant' Les chaines de caractères Pour définir une chaîne de caractères, il faut l’entourer de guillemets (doubles \" \" ou simples ' ') afin d’indiquer à Python le début et la fin de la chaîne de caractères.\nExemples de chaines de caractères\nmessage_accueil = \"Bonjour tout le monde!\" message = 'Comment allez-vous?' Lorsqu’une chaine de caractères contient plus de deux guillemets simples ou plus de deux guillemets doubles, à l’exécution cela peut causer une erreur de syntaxe et l’arrêt du programme. comme dans l’exemple ci-dessous:\nmessage_guillemets_simples = 'Bonjour, comment allez vous aujourd'hui ?' message_guillemets_doubles = \"Bonjour, comment allez \"vous ?\" print(message_guillemets_simples) print(message_guillemets_doubles) Le résultat\n.\nNote NB: Remarquez l’absence de l’affichage du deuxième print\nComment éviter ce problème ? Il existe deux solutions:\nMélanger les types de guillemets : Utiliser les guillemets doubles pour encadrer la chaine de caractères et le guillemet simple dans sont usage naturel, comme dans le mot aujourd’hui. Il faut ‘échapper’ le guillemet qu’on veut qui s’affiche comme un guillemet. L’échappement se fait en précédent le guillemet visé par une barre oblique inversée \\ (backslash). Comme dans l’exemple suivant:\nmessage_guillemets = \"Bonjour, comment allez vous aujourd'hui ?\" message_guillemet_echappe = 'Bonjour, comment allez vous aujourd\\'hui ?' print(message_guillemets) print(message_guillemet_echappe) Le résultat\n.\nLa concaténation de chaines de caractères La concaténation de chaînes en programmation c’est la combinaison de deux chaînes ou plus pour former une seule chaîne. En Python, cela se fait à l’aide de l’opérateur + et elle est simple :\nVous prenez deux chaînes de caractères. Vous utilisez l’opérateur + pour les joindre. Python combine les chaînes pour en faire une seule. Exemple :\n# Définir deux chaînes de caractères chaine1 = \"Bonjour, \" chaine2 = \"monde !\" # Concaténer les chaînes chaine_concatenee = chaine1 + chaine2 # Afficher la chaîne concaténée print(chaine_concatenee) Résultat :\nBonjour, monde ! Attention Types identiques : Seules les chaînes peuvent être concaténées entre elles. Si vous essayez de concaténer une chaîne avec un autre type de données (comme un entier ou un float), Python renverra une erreur. Conversion nécessaire : Pour concaténer une chaîne avec un nombre, vous devez d’abord convertir le nombre en chaîne à l’aide de la fonction str().",
    "description": ".\nDéfinition des variables Définition Une variable est une zone de la mémoire de l’ordinateur dans laquelle une valeur est stockée. Une variable est définie par un nom et sa valeur. Vous pouvez imaginer une variable comme une boîte dans laquelle vous pouvez mettre des choses, comme des nombres, du texte, des listes, etc..",
    "tags": [],
    "title": "Variables et types de données",
    "uri": "/semaine2/variables-et-types-de-donn%C3%A9es/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Ordinogramme et introduction à Python",
    "content": ".\nLes opérateurs arithmétiques Les opérateurs permettent d’effectuer des opérations sur des variables. En Python, il existe plusieurs types d’opérateurs :\nArithmétiques. De comparaison. Logiques. Info Nous verrons les deux derniers types lors de l’études des structures conditionnelles. Pour l’instant, concentrons nous sur les opérateurs arithmétiques.\nLes opérateurs arithmétiques sont utilisés pour effectuer des calculs mathématiques courants.\nSoient a = 10 et b = 3\nOpération (opérateur) Exemple Addition (+) a + b donne 13 Soustraction (-) a - b donne 7 Multiplication (*) a * b donne 30 Division (/) a / b donne 3.3333… Modulo (%) a % b donne 1 Exponentiation (**) a ** b donne 1000 Division entière (//) a // b donne 3 Affichage des données L’affichage des données se fait à l’aide de la méthode print().\nVoici quelques variables à afficher :\n# x est un entier x = 5 # y est un flottant y = 7.5 # salutations est une chaîne de caractères salutations = \"Bienvenue dans la faille de l'invocateur !\" # ulti_actif est un booléen qui aura pour valeur Vrai ou Faux (Faux dans notre exemple) ulti_actif = False Pour afficher le résultat de nos variables, rien de plus simple, il suffit de mettre le nom de la variable entre les parenthèses :\n# Utiliser la méthode print() pour afficher les résultats print(x) print(y) print(salutations) print(ulti_actif) Lorsque vous exécuterez votre cellule, vous devriez voir le résultat suivant :\n5 7.5 Bienvenue dans la faille de l'invocateur ! False print permet d’afficher le contenu de plusieurs variables (quelque soit leur type) en les séparant par des virgules :\nage = 32 nom = \"Jean\" print(nom, \"a\", age, \"ans\") # Affiche Jean a 32 ans Pause: 5 minutes .",
    "description": ".\nLes opérateurs arithmétiques Les opérateurs permettent d’effectuer des opérations sur des variables. En Python, il existe plusieurs types d’opérateurs :\nArithmétiques. De comparaison. Logiques. Info Nous verrons les deux derniers types lors de l’études des structures conditionnelles. Pour l’instant, concentrons nous sur les opérateurs arithmétiques.\nLes opérateurs arithmétiques sont utilisés pour effectuer des calculs mathématiques courants.",
    "tags": [],
    "title": "Opérateurs arithmétiques et l'affichage",
    "uri": "/semaine2/operateurs-arithm-affichage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Ordinogramme et introduction à Python",
    "content": "Les nombres flottants Attention En Python, c’est le point qui est utilisé comme séparateur décimal. Ainsi, 3.14 est un nombre reconnu comme un flottant, alors que 3,14 ne l’est pas.\nLes erreurs d’arrondi Les erreurs d’arrondi sont un phénomène courant en Python. Elles surviennent principalement en raison de la manière dont les nombres à virgule flottante sont représentés en mémoire. Voici une explication détaillée :\nReprésentation des nombres à virgule flottante :\nEn Python, les nombres flottants sont représentés en binaire (série de 1 et de 0. Certains nombres décimaux ne peuvent pas être représentés exactement en binaire, ce qui entraîne des approximations. Exemple d’erreur d’arrondi :\nConsidérez l’exemple suivant : print(0.1 + 0.2) On pourrait s’attendre à ce que le résultat soit 0.3, mais en réalité, il affiche quelque chose comme 0.30000000000000004. Cela est dû à l’approximation binaire de 0.1 et 0.2. Conséquences des erreurs d’arrondi :\nLes erreurs d’arrondi peuvent entraîner des résultats inattendus dans les calculs, surtout lorsqu’ils sont accumulés sur de nombreuses opérations. Elles peuvent également poser des problèmes dans les comparaisons de flottants. Par exemple : # Est-ce que 0.1 + 0.2 est égal à 0.3? print(0.1 + 0.2 == 0.3) # Affiche False (faux) Technique simple pour gérer les erreurs d’arrondi Utiliser la fonction round() :\nVous pouvez utiliser la fonction round() pour arrondir les nombres à un certain nombre de décimales.\nprint(round(0.1 + 0.2, 1)) # Affiche 0.3 Note La bibliothèque NumPy fourni d’autres méthodes permettant de contrer les erreurs d’arrondi avec les nombres flottants. Nous les verrons lors du cours de la semaine 13.\nNotation scientifique On peut écrire des nombres très grands ou très petits avec des puissances de 10 en utilisant le symbole e :\nnombre1 = 1e6 # 1000000.0 nombre2 = 3.12e-3 # 0.00312",
    "description": "Les nombres flottants Attention En Python, c’est le point qui est utilisé comme séparateur décimal. Ainsi, 3.14 est un nombre reconnu comme un flottant, alors que 3,14 ne l’est pas.\nLes erreurs d’arrondi Les erreurs d’arrondi sont un phénomène courant en Python. Elles surviennent principalement en raison de la manière dont les nombres à virgule flottante sont représentés en mémoire. Voici une explication détaillée :",
    "tags": [],
    "title": "Nombres flottants et erreurs d'arrondi",
    "uri": "/semaine2/erreurs-arrondi/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Ordinogramme et introduction à Python",
    "content": "Atelier - Ordinogrammes Avant d’effectuer vos exercices vous devez installer drawio sur VS Code:\nEtape 1: Rendez-vous dans la partie de gauche de Visual Studio Code et trouvez le logo “Extensions”, cherchez draw.io dans la barre de recherche.\nEtape 2: cliquez sur installer Exercice 1 Écrire un ordinogramme qui demande à l’utilisateur de saisir trois nombres et calcule la moyenne de trois nombres. Fichier pour l’exercice 1\nExercice 2 Écrire un ordinogramme qui calcule et affiche l’aire d’un rectangle à partir de la longueur et de la largeur saisies par l’utilisateur. Fichier pour l’exercice 2\nExercice 3 Écrire un ordinogramme qui demande à l’utilisateur de saisir le rayon d’un cercle, puis calcule la circonférence du cercle. Fichier pour l’exercice 3\nExercice 4 Écrivez un ordinogramme qui demande à l’utilisateur de saisir une température en Fahrenheit, puis la convertit en Celsius. Fichier pour l’exercice 4\nExercice 5 Reprenez l’ordinogramme qui fait deviner un nombre à l’utilisateur, et modifiez le pour indiquer à l’utilisateur si le nombre saisi est plus grand ou plus petit. Fichier pour l’exercice 5\nExercice 6 Écrire un ordinogramme qui demande à l’utilisateur de saisir un nombre puis affiche tous ses diviseurs entiers. Voici 2 exemples:\ndiviseurs de 30: 1, 2, 3, 5, 6, 10, 15, 30 diviseurs de 45: 1, 3, 5, 9, 15, 45 Astuce Quelle opération mathématique vous permet de savoir si un nombre est un diviseur entier ? Quand sait-on lorsqu’on a trouvé tous les diviseurs ? Fichier pour l’exercice 6\nInfo L’algorithme ci-dessous est la première partie de l’algorithme du plus grand diviseur commun:\nDresser la liste des diviseurs de chacun des nombres. Repérer les diviseurs communs. Choisir le plus grand de ces diviseurs. Exemple de calcul de PGCD PGCD(30, 45):\nchercher les diviseurs diviseurs de 30: {1, 2, 3, 5, 6, 10, 15, 30} diviseurs de 45: {1, 3, 5, 9, 15, 45} repérer les diviseurs commun {1, 3, 5, 15} choisir le plus grand : 15 Atelier - Variables, types de données et erreurs d’arrondi Python- La base",
    "description": "Atelier - Ordinogrammes Avant d’effectuer vos exercices vous devez installer drawio sur VS Code:\nEtape 1: Rendez-vous dans la partie de gauche de Visual Studio Code et trouvez le logo “Extensions”, cherchez draw.io dans la barre de recherche.\nEtape 2: cliquez sur installer",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine2/ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Ordinogramme et introduction à Python",
    "content": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #2. Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 3. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "description": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #2. Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 3. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "tags": [],
    "title": "Pour le prochain cours",
    "uri": "/semaine2/pour-le-prochain-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Lire des données saisies au clavier par l’utilisateur. Afficher des données dans le terminal. Comprendre les avantages de la documentation du code. Connaitre et comprendre les différentes sources d’erreurs de syntaxe. Commencer à déboguer un programme à l’aide de la méthode print(). Plan de la leçon Quiz: Ordinogrammes et base de Python (10 mins) Lecture de données et affichage textuel des résultats ~15mins Documentation du code ~5mins Pause 5 mins La syntaxe est les erreurs ~10mins La vérification du bon fonctionnement d’un programme ~5mins Pause 5 mins Révision pour le minitest (10%) de la semaine prochaine ~30mins Atelier: Lecture et affichage de données ~20mins Atelier: Déboguer des programmes simples ~20mins Pour la semaine prochaine",
    "description": "Objectifs de la leçon Lire des données saisies au clavier par l’utilisateur. Afficher des données dans le terminal. Comprendre les avantages de la documentation du code. Connaitre et comprendre les différentes sources d’erreurs de syntaxe. Commencer à déboguer un programme à l’aide de la méthode print(). Plan de la leçon Quiz: Ordinogrammes et base de Python (10 mins) Lecture de données et affichage textuel des résultats ~15mins Documentation du code ~5mins Pause 5 mins La syntaxe est les erreurs ~10mins La vérification du bon fonctionnement d’un programme ~5mins Pause 5 mins Révision pour le minitest (10%) de la semaine prochaine ~30mins Atelier: Lecture et affichage de données ~20mins Atelier: Déboguer des programmes simples ~20mins Pour la semaine prochaine",
    "tags": [],
    "title": "Interagir avec le programme",
    "uri": "/semaine3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Interagir avec le programme",
    "content": ".\nPour qu’un programme soit réutilisable, il faut que l’utilisateur puisse interagir avec, c’est-à-dire lui fournir des données en entrée à volonté.\nLa capacité d’un programme de lire des données au clavier est essentielle en programmation.\nLecture de données au clavier La méthode input() est utilisée pour lire une ligne de texte entrée par l’utilisateur. Elle permet de capturer les données saisies au clavier et de les utiliser dans un programme. Voici un exemple simple :\n# Demander à l'utilisateur de saisir son nom nom = input(\"Entrez votre nom : \") # Afficher un message de bienvenue print(\"Bonjour\", nom) Dans cet exemple :\nLa fonction input(\"Entrez votre nom : \") affiche le message “Entrez votre nom : \" et attend que l’utilisateur saisisse quelque chose. Une fois que l’utilisateur a saisi son nom et appuyé sur Entrée, le texte saisi est stocké dans la variable nom. La fonction print(\"Bonjour\", nom) affiche un message de bienvenue en utilisant le nom saisi par l’utilisateur. Quelques points importants à noter :\nLa méthode input() retourne toujours une chaîne de caractères. Si vous avez besoin d’un autre type de données (comme un nombre), vous devrez convertir la chaîne en utilisant des fonctions comme int() ou float(). Vous pouvez personnaliser le message affiché par input() pour guider l’utilisateur sur ce qu’il doit saisir. Par exemple, pour demander un âge et l’utiliser dans un calcul :\n# Demander à l'utilisateur de saisir son âge age = input(\"Entrez votre âge : \") # Convertir l'âge en entier age = int(age) # Calculer l'année de naissance approximative annee_naissance = 2024 - age # Afficher l'année de naissance print(\"Vous êtes probablement né(e) en \", annee_naissance) Ordinogramme Pour représenter la saisie et la lecture d’une donnée, on utilise le rectangle (traitement) et le parallélogramme (entrée de données). Par exemple, l’ordinogramme du code précédent est:\nAffichage textuel des résultats Rappel: La fonction print() affiche les données qui sont indiquées entre les parenthèses, séparés par une virgule. Ces données s’affichent séparées par des espaces.\nSi l’on veut personnaliser l’affichage des nos données. il va falloir les formater.\nFormater l’affichage Python permet de formater des chaînes de caractères de différentes manières, notamment avec\nLes f-strings (recommandés) La méthode format() (encore utilisée) L’opérateur de formatage %(désuet). Aujourd’hui les méthodes 2 et 3 sont obsolètes, la méthode préconisée pour le formatage est les f-string que nous verrons plus en détail ici.",
    "description": ".\nPour qu’un programme soit réutilisable, il faut que l’utilisateur puisse interagir avec, c’est-à-dire lui fournir des données en entrée à volonté.\nLa capacité d’un programme de lire des données au clavier est essentielle en programmation.\nLecture de données au clavier La méthode input() est utilisée pour lire une ligne de texte entrée par l’utilisateur. Elle permet de capturer les données saisies au clavier et de les utiliser dans un programme. Voici un exemple simple :",
    "tags": [],
    "title": "Lecture et affichage de données",
    "uri": "/semaine3/lecture-et-affichage-de-donn%C3%A9es/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Interagir avec le programme",
    "content": ".\nPourquoi documenter le code ? La documentation du code est essentielle pour rendre votre code compréhensible et maintenable par d’autres développeurs, ainsi que par vous-même à l’avenir.\nIl existe différentes raisons de vouloir documenter le code:\nPour expliquer une instruction (commentaire) Pour décrire un module ou sous-programme (docstring) Pour incorporer du texte avec du code (programme lettré) Info Pour l’instant, on se contentera de documenter le code à l’aide de commentaires. Plus tard dans la session, on utilisera des docstrings et la programmation lettrée.\nLes commentaires Les commentaires sont des notes que vous ajoutez directement dans le code pour expliquer ce que fait une section spécifique. Python ignore les commentaires, c’est-à-dire qu’il ne les exécute pas.\nLes commentaires commencent par le symbole # (dièse).\nLes commentaires sont utilisés pour :\nExpliquer le code Rendre le code plus lisible Empêcher l’exécution lors de tests du code Exemple en Python :\n# Cette fonction calcule la somme de deux nombres def addition(a, b): return a + b Pause : 5 minutes",
    "description": ".\nPourquoi documenter le code ? La documentation du code est essentielle pour rendre votre code compréhensible et maintenable par d’autres développeurs, ainsi que par vous-même à l’avenir.\nIl existe différentes raisons de vouloir documenter le code:\nPour expliquer une instruction (commentaire) Pour décrire un module ou sous-programme (docstring) Pour incorporer du texte avec du code (programme lettré) Info Pour l’instant, on se contentera de documenter le code à l’aide de commentaires. Plus tard dans la session, on utilisera des docstrings et la programmation lettrée.",
    "tags": [],
    "title": "Documentation du code",
    "uri": "/semaine3/documentation/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Interagir avec le programme",
    "content": ".\nLa syntaxe et les erreurs d’exécution en Python Python est un langage de programmation réputé pour sa simplicité et sa lisibilité. Toutefois, comme tout langage de programmation, il est sujet aux erreurs de syntaxe et d’exécution.\nComprendre la syntaxe de Python et savoir comment gérer les erreurs d’exécution est essentiel pour écrire des programmes robustes et fiables. La détection et la correction des erreurs, qu’elles soient de syntaxe ou d’exécution, permettent d’améliorer la qualité du code et d’assurer son bon fonctionnement.\nComprendre comment identifier et corriger ces erreurs est essentiel pour tout développeur.\nLes erreurs que l’on rencontre en programmation sont de 2 types:\nsyntaxique: Comme dans un langage naturelle, on peut faire des fautes d’orthographe ou de grammaire. logique: La syntaxe est correcte, mais les opérations ne répondent pas au problème, ou donnent un mauvais résultat. La syntaxe en Python La syntaxe de Python est conçue pour être claire et concise.\nVoici quelques rappels des éléments clés de la syntaxe Python :\nDéclaration des variables\nLes variables en Python sont créées en les assignant à une valeur sans avoir besoin de déclarer leur type explicitement. Les noms de variables sont sujets à des règles bien précises qui doivent être respectées.\nIndentation:\nPython utilise l’indentation pour délimiter les blocs de code. Une indentation incorrecte entraînera une erreur de syntaxe.\nStructures de contrôle\nLes structures de contrôle, comme les structures conditionnelles et les boucles, doivent être correctement indentées et formées.\nLes erreurs de syntaxe Les erreurs de syntaxe surviennent lorsque le code ne respecte pas les règles syntaxiques de Python. Ces erreurs sont détectées lors de la phase d’interprétation du code, avant l’exécution du programme.\n1. Les erreurs d’indentation Les erreurs d’indentation sont parmi les plus courantes en Python. Elles se produisent lorsque les blocs de code ne sont pas correctement alignés.\ndef ma_fonction(): print(\"Début de la fonction\") print(\"Erreur d'indentation ici\") # Erreur d'indentation 2. Parenthèses, crochets et accolades non fermés Les erreurs de parenthèses et de crochets non fermés se produisent lorsque les parenthèses, crochets ou accolades ne sont pas correctement fermés.\n# Manque une parenthèse fermante print(\"Bonjour\" # Manque un crochet fermant ma_liste = [1, 2, 3, 4 3. Syntaxe invalide D’autres erreurs de syntaxe incluent l’utilisation incorrecte des mots-clés ou des opérateurs.\n# Utilisation incorrecte du mot-clé def 123fonction(): # Les noms de fonctions ne peuvent pas commencer par un chiffre # Opérateur incorrect resultat = 5 * * 2 # Les opérateurs doivent être correctement espacés 4. Erreurs d’exécution Les erreurs d’exécution, ou exceptions, surviennent pendant l’exécution du programme. Elles sont souvent causées par des opérations illégales, telles que la division par zéro ou l’accès à un index de liste inexistant.\nLes types d’exceptions courantes ZeroDivisionError Cette erreur se produit lorsqu’une division par zéro est tentée.\na = 10 / 0 # ZeroDivisionError IndexError Cette erreur se produit lorsqu’un index inexistant est accédé dans une liste.\nma_liste = [1, 2, 3] print(ma_liste[5]) # IndexError KeyError Cette erreur se produit lorsqu’une clé inexistante est accédée dans un dictionnaire.\nmon_dict = {\"nom\": \"Alice\", \"âge\": 25} print(mon_dict[\"adresse\"]) # KeyError TypeError Cette erreur se produit lorsqu’une opération ou une fonction est appliquée à un objet de type inapproprié.\nprint(\"Bonjour\" + 5) # TypeError Messages d’erreur et débogage Les messages d’erreur en Python sont généralement explicites et indiquent la nature de l’erreur ainsi que la ligne du code où elle s’est produite. Analyser ces messages est crucial pour identifier et corriger les erreurs.\nExemple de message d’erreur Traceback (most recent call last): File \"main.py\", line 2, in \u003cmodule\u003e a = 10 / 0 ZeroDivisionError: division by zero Dans cet exemple, le message d’erreur indique une ZeroDivisionError sur la ligne 2 de main.py.\nVérification du fonctionnement d’un programme La méthode print est l’une des techniques les plus simples et les plus couramment utilisées pour déboguer un programme en Python. Bien que ce ne soit pas la méthode la plus sophistiquée ni la plus efficace pour les projets complexes, print peut être extrêmement utile pour comprendre le flux d’exécution d’un programme, inspecter les valeurs des variables et identifier les points où le programme ne fonctionne pas comme prévu.\nPrincipe de base L’idée de base de l’utilisation de print pour le débogage est d’insérer des instructions print à divers endroits du programme pour afficher les valeurs des variables et les messages d’état. Cela permet de suivre l’exécution du programme et de localiser les problèmes.\ndef addition(a, b): print(\"Entrée dans la fonction addition avec a=\",a,\" et b=\",b) resultat = a + b print(\"Résultat de l'addition: \", resultat) return resultat # Exemple d'utilisation resultat = addition(3, 5) print(\"Le résultat final est: \", resultat) Les limites de la méthode print Bien que la méthode print soit simple et efficace pour les petits projets ou pour un débogage rapide, elle présente des limites, notamment :\nVerbiage excessif : Trop d’instructions print peuvent rendre la sortie du programme difficile à lire. Performance : L’utilisation excessive de print peut ralentir l’exécution du programme. Gestion des erreurs : print ne gère pas les exceptions ou les erreurs de manière structurée. Pour ces raisons, il est souvent préférable d’utiliser des outils de débogage plus avancés, comme les tests unitaires ou les débogueurs intégrés, pour les projets plus complexes.\nPause : 5 minutes Révision pour le minitest ==\u003e Moodle",
    "description": ".\nLa syntaxe et les erreurs d’exécution en Python Python est un langage de programmation réputé pour sa simplicité et sa lisibilité. Toutefois, comme tout langage de programmation, il est sujet aux erreurs de syntaxe et d’exécution.\nComprendre la syntaxe de Python et savoir comment gérer les erreurs d’exécution est essentiel pour écrire des programmes robustes et fiables. La détection et la correction des erreurs, qu’elles soient de syntaxe ou d’exécution, permettent d’améliorer la qualité du code et d’assurer son bon fonctionnement.",
    "tags": [],
    "title": "Syntaxe et erreurs d'exécution",
    "uri": "/semaine3/erreurs-syntaxe/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Interagir avec le programme",
    "content": "Lecture et affichage de données\nErreurs de syntaxe - FACULTATIF",
    "description": "Lecture et affichage de données\nErreurs de syntaxe - FACULTATIF",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine3/ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Interagir avec le programme",
    "content": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #3. Réviser la matière des trois premières semaines, en vue du mini-test (10%) qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 4. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.\nInformations sur le mini-test de la semaine prochaine Test sur Moodle (15 questions à choix multiple, phrases à compléter, ordinogramme à faire) Durée: 40 minutes. Le quiz se fermera automatiquement après 40 minutes. Matière: les trois premières semaines inclusivement. Analyse de problèmes Variables et types de données Chaînes de caractères (concaténation et gestion des guillemets) Ordinogrammes Erreurs d’arrondi avec les flottants Interagir avec le programme (input et print et transtypage)",
    "description": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #3. Réviser la matière des trois premières semaines, en vue du mini-test (10%) qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 4. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "tags": [],
    "title": "Pour le prochain cours",
    "uri": "/semaine3/pour-le-prochain-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre la base des expressions booléennes. Comprendre les structures conditionnelles if, elif et else. Savoir représenter les structures conditionnelles dans un ordinogramme. Utiliser les instructions if, elif et else. Écrire des conditions utilisant les opérateurs logiques (and, or, not). Savoir tester des nombres à virgule. Implémenter des structures conditionnelles imbriquées. Appliquer les structures conditionnelles dans des cas pratiques. Plan de la leçon Mini-test (40 mins) Les opérateurs et les expressions booléennes. ~10mins Les structures conditionnelles if, elif et else. ~10mins L’ordinogramme de structures conditionnelles. ~5mins Pause 5 minutes. Les opérateurs logiques dans les structures conditionnelles. ~5mins Tests avec les nombres flottants. ~5mins Pause 5 minutes. Atelier: Évaluer des expressions booléennes. Atelier: Utiliser des structures conditionnelles dans des cas simples. Atelier: Tester les nombres à virgule. Pour la semaine prochaine.",
    "description": "Objectifs de la leçon Comprendre la base des expressions booléennes. Comprendre les structures conditionnelles if, elif et else. Savoir représenter les structures conditionnelles dans un ordinogramme. Utiliser les instructions if, elif et else. Écrire des conditions utilisant les opérateurs logiques (and, or, not). Savoir tester des nombres à virgule. Implémenter des structures conditionnelles imbriquées. Appliquer les structures conditionnelles dans des cas pratiques. Plan de la leçon Mini-test (40 mins) Les opérateurs et les expressions booléennes. ~10mins Les structures conditionnelles if, elif et else. ~10mins L’ordinogramme de structures conditionnelles. ~5mins Pause 5 minutes. Les opérateurs logiques dans les structures conditionnelles. ~5mins Tests avec les nombres flottants. ~5mins Pause 5 minutes. Atelier: Évaluer des expressions booléennes. Atelier: Utiliser des structures conditionnelles dans des cas simples. Atelier: Tester les nombres à virgule. Pour la semaine prochaine.",
    "tags": [],
    "title": "Structures conditionnelles",
    "uri": "/semaine4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures conditionnelles",
    "content": "Les opérateurs de comparaison Les opérateurs de comparaison permettent de comparer des valeurs et de déterminer si une condition est vraie ou fausse.\nSoient a = 10 et b = 3\nOpération (opérateur) Exemple Égalité (==) a == b donne faux (False) Inégalité (!=) a != b donne vrai (True) Supérieur à (\u003e) a \u003e b donne vrai (True) Inférieur à (\u003c) a \u003c b donne faux (False) Supérieur ou égal à (\u003e=) a \u003e= b donne vrai (True) Inférieur ou égal à (\u003c=) a \u003c= b donne faux (False) Les opérateurs logiques Les opérateurs logiques permettent de combiner des expressions booléennes.\nSoient x = True et y = False\nOpération (opérateur) Explication Exemple Et (and) Renvoie True si les deux expressions sont vraies. x and y donne False Ou (or) Renvoie True si au moins l’une des expressions est vraie. x or y donne True Non (not) Inverse la valeur d’une expression (si c’était True, devient False, et vice versa). not x donne False Les priorités des opérateurs La priorité des opérateurs, aussi appelée précédence des opérateurs, est la règle qui définit quel opérateur doit être évalué en premier dans une expression.\nVoici les niveaux de priorité en Python, du plus élevé au plus bas :\nParenthèses (()) : Modifie la priorité normale des opérations. Exponentiation (**) : L’opérateur d’exponentiation a la plus haute priorité. Multiplication, Division, Division entière, Modulo (*, /, //, %) : Ces opérateurs ont la même priorité entre eux. Addition et Soustraction (+, -) : Ces opérateurs ont une priorité inférieure à celle des opérateurs de multiplication/division. Opérateurs de comparaison (==, !=, \u003c, \u003e, \u003c=, \u003e=) : Évaluent l’égalité ou la relation entre deux valeurs. Opérateurs logiques (and, or, not) : not a la priorité la plus élevée, suivi de and, puis or. NB: En cas d’égalité de priorité, l’ordre se fera de gauche à droite.\nLes expressions booléennes Définition Une expression booléenne est une formule mathématique qui évalue à vrai (True) ou faux (False). Elles sont utilisées en programmation dans les structures conditionnelles et répétitives, pour prendre des décisions logiques. Autrement dit, elles servent à exécuter du code en fonction de certaines conditions.\nExemples d’application Exemple #1 Soit l’expression: (5 + 3) * 2**2/4\nL’ordre d’exécution sera:\nOrdre Détail Nouvelle expression 1. Parenthèses On calcule l’expression entre parenthèses: (5+3) = 8 (8) * 2**2/4 2. Exponentiation On calcule l’élévation à la puissance : 2**2 = 4 (8) * 4/4 3. Multiplication On multiplie le résultat des parenthèses par le résultat de l’exponentiation: 8*4 = 32 32/4 4. Addition N/A Pas de changement 5. Division On divise le résultat de la multiplication par 4 Le résultat final de l’expression (5 + 3) * 2 ** 2 / 4 est 8 Exemple #2 Supposons que nous ayons deux variables a et b, avec a = 10 et b = 5. Nous voulons vérifier si a est plus grand que b et si b multiplié par 2 est égal à a. L’expression serait : (a \u003e b) and (b * 2 == a) ou si on remplace les valeurs de a et b l’expression devient: (10 \u003e 5) and (5 * 2 == 10).\nOrdre Expression calculée Résultat 1. Parenthèses (10 \u003e 5)et (5 * 2 == 10) (True) et (10 == 10) 2. Opérations logiques (True) and (True) Les deux parties de l’expression sont vraies L’expression complète est donc évaluée à True. Exemple avec l’instruction conditionnelle IF:\ntemperature = 25 # La condition/test: Est-ce que la température est plus grande que 20? if temperature \u003e 20:\tprint(\"Il fait chaud\") else: print(\"Il fait froid\") Voyons maintenant que sont les structures conditionnelles.",
    "description": "Les opérateurs de comparaison Les opérateurs de comparaison permettent de comparer des valeurs et de déterminer si une condition est vraie ou fausse.\nSoient a = 10 et b = 3\nOpération (opérateur) Exemple Égalité (==) a == b donne faux (False) Inégalité (!=) a != b donne vrai (True) Supérieur à (\u003e) a \u003e b donne vrai (True) Inférieur à (\u003c) a \u003c b donne faux (False) Supérieur ou égal à (\u003e=) a \u003e= b donne vrai (True) Inférieur ou égal à (\u003c=) a \u003c= b donne faux (False) Les opérateurs logiques Les opérateurs logiques permettent de combiner des expressions booléennes.",
    "tags": [],
    "title": "Les opérateurs et les expressions booléennes",
    "uri": "/semaine4/expressions-booleennes/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures conditionnelles",
    "content": "Les tests Definition Les tests sont très importants en programmation car ils permettent à l’ordinateur de prendre des décisions. Pour coder des tests, on utilise des structures conditionnelles.\nLes structures conditionnelles Les structures conditionnelles sont essentielles pour la logique d’un programme. Elles permettent d’exécuter différentes actions en fonction de la valeur de certaines variables ou expressions. En Python, les structures conditionnelles sont if (Si), elif (Sinon Si), et else (Sinon). Voici comment elles fonctionnent :\nif : Utilisé pour vérifier si une condition est vraie. Si c’est le cas, le bloc de code associé est exécuté. elif : Utilisé pour vérifier une autre condition si la première est fausse. else : Utilisé pour exécuter un bloc de code si toutes les conditions précédentes sont fausses. Importance de l’indentation Attention L’indentation est très importante en Python. Elle indique quels blocs de code appartiennent à quelles conditions.\nVoici deux exemples pour illustrer cela :\nnombre = 5 if nombre == 5: print(\"Le test est vrai\") print(\"car la variable nombre vaut\", nombre) Dans cet exemple, les deux print sont exécutés si nombre vaut 5.\nnombre = 7 if nombre == 5: print(\"Le test est vrai\") print(\"car la variable nombre vaut, nombre) Dans cet exemple, l pemierprint ne sera pas exécuté, car la condition nombre == 5 est fausse (False).Le deuxième print sera toujours exécuté, peu importe la valeur de nombre.\nL’erreur IndentationError Cette erreur se produit lorsque l’indentation de votre code n’est pas correcte. Voici quelques types courants d’IndentationError :\nIndentationError: expected an indented block : Cette erreur survient lorsque Python s’attend à un bloc de code indenté, mais ne le trouve pas. Par exemple, après une instruction comme if, for, ou while, vous devez indenter le code qui suit. Exemple:\nif True: print(\"Ce code causera l'erreur IndentationError\") Cell In[3], line 2 print(\"Ce code causera l'erreur IndentationError\") ^ IndentationError: expected an indented block after 'if' statement on line 1 IndentationError: unexpected indent : Cette erreur se produit lorsque vous avez indenter une ligne de code de manière inattendue. Cela peut arriver si vous ajoutez une indentation supplémentaire là où elle n’est pas nécessaire. Exemple:\ndef my_function(): print(\"Hello, world!\") print(\"Ce code causera l'erreur IndentationError\") Cell In[4], line 3 print(\"Ce code causera l'erreur IndentationError\") ^ IndentationError: unexpected indent IndentationError: unindent does not match any outer indentation level : Cette erreur survient lorsque les niveaux d’indentation ne sont pas alignés correctement. Cela peut se produire si vous mélangez des espaces et des tabulations pour l’indentation. Exemple:\nfor i in range(5): print(i) print(\"Ce code causera l'erreur IndentationError\") File \u003ctokenize\u003e:3 print(\"Ce code causera l'erreur IndentationError\") ^ IndentationError: unindent does not match any outer indentation level L’instruction IF L’instruction if permet de tester une condition. Si la condition est vraie, le bloc de code associé est exécuté.\nSyntaxe générale :\nif condition: # bloc de code à exécuter si la condition est vraie Exemple :\nage = 18 if age \u003e= 18: print(\"Vous êtes majeur.\") Note Que se passe t-il si l’âge était inférieur à 18?\nL’instruction ELSE L’instruction else s’utilise avec if pour définir un bloc de code à exécuter si la condition du if est fausse.\nSyntaxe :\nif condition: # bloc de code à exécuter si la condition est vraie else: # bloc de code à exécuter si la condition est fausse Exemple :\nage = 16 if age \u003e= 18: print(\"Vous êtes majeur.\") else: print(\"Vous êtes mineur.\") Note Comment faire pour pouvoir afficher un message différent selon différentes tranches d’âge adultes ?\nL’instruction ELIF L’instruction elif permet de tester plusieurs conditions. Si la condition if est fausse, Python vérifie la condition elif. Si elle est vraie, le bloc de code associé est exécuté.\nSyntaxe :\nif condition1: # bloc de code à exécuter si condition1 est vraie elif condition2: # bloc de code à exécuter si condition1 est fausse et condition2 est vraie else: # bloc de code à exécuter si toutes les conditions précédentes sont fausses Exemple :\nage = 36 if 18 \u003c= age \u003c= 30: print(\"Vous êtes un jeune adulte\") elif 30 \u003c age \u003c 65: print(\"Avez-vous des enfants?\") elif age \u003e= 65: print(\"Bonne retraite!\") else: print(\"Vous êtes mineur\") Ordinogrammes des structures conditionnelles Les instructions IF et ELSE L’instruction ELIF Les opérateurs logiques dans les conditions Il est possible de combiner plusieurs conditions avec les opérateurs logiques and (ET), or (OU), et not (NON).\nExemple 1: Meilleure façon d’écrire le code de l’exemple de l’instruction ELIF\nage = 36 if age \u003e= 18 and age \u003c= 30: print(\"Vous êtes un jeune adulte\") elif age \u003e 30 and age \u003c 65: print(\"Avez-vous des enfants?\") elif age \u003e= 65: print(\"Bonne retraite!\") else: print(\"Vous êtes mineur\") Exemple 2:\nage = 20 permis = True if age \u003e= 18 and permis: print(\"Vous pouvez conduire.\") else: print(\"Vous ne pouvez pas conduire.\") L’opérateur in avec if En Python, l’opérateur in est souvent utilisé avec une condition if pour vérifier si un élément se trouve dans une séquence (comme une liste, une chaîne de caractères, etc.).\n# Exemple avec une liste fruits = ['pomme', 'banane', 'cerise'] # Vérifier si 'banane' est dans la liste if 'banane' in fruits: print(\"La banane est dans la liste des fruits!\") else: print(\"La banane n'est pas dans la liste des fruits.\") Dans cet exemple, if 'banane' in fruits: vérifie si 'banane' est un élément de la liste fruits. Si c’est le cas, le message “La banane est dans la liste des fruits!” sera affiché.\nOn peux utiliser in de la même manière avec des chaînes de caractères :\n# Exemple avec une chaîne de caractères phrase = \"Bonjour tout le monde\" # Vérifier si 'Bonjour' est dans la phrase if 'Bonjour' in phrase: print(\"Le mot 'Bonjour' est dans la phrase!\") else: print(\"Le mot 'Bonjour' n'est pas dans la phrase.\") Ici, if 'Bonjour' in phrase: vérifie si 'Bonjour' est une sous-chaîne de phrase.\nPause : 5 minutes Voyons maintenant comment tester les nombres flottants.",
    "description": "Les tests Definition Les tests sont très importants en programmation car ils permettent à l’ordinateur de prendre des décisions. Pour coder des tests, on utilise des structures conditionnelles.\nLes structures conditionnelles Les structures conditionnelles sont essentielles pour la logique d’un programme. Elles permettent d’exécuter différentes actions en fonction de la valeur de certaines variables ou expressions. En Python, les structures conditionnelles sont if (Si), elif (Sinon Si), et else (Sinon). Voici comment elles fonctionnent :",
    "tags": [],
    "title": "Les instructions if else elif",
    "uri": "/semaine4/les-structures-conditionnelles/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures conditionnelles",
    "content": "Les structures conditionnelles imbriquées Les tests peuvent être imbriquées, c’est-à-dire qu’on peut mettre un IF dans une autre.\nLa syntaxe générale Exemple\nscore = 75 if score \u003e 50: if score \u003e 70: print(\"Bien joué !\") else: print(\"Pas mal, mais peut mieux faire.\") else: print(\"Il faut travailler davantage.\") Dans ce cas, comme score est 75, le programme affichera “Bien joué !”.\nExplication:\nDéfinition de la variable : score est défini avec une valeur de 75. Première condition : Si score est supérieur à 50, le programme vérifie une deuxième condition. Deuxième condition : Si score est supérieur à 70, le programme affiche “Bien joué !”. Sinon : Si score est supérieur à 50 mais pas supérieur à 70, le programme affiche “Pas mal, mais peut mieux faire.” Sinon : Si score n’est pas supérieur à 50, le programme affiche “Il faut travailler davantage.”",
    "description": "Les structures conditionnelles imbriquées Les tests peuvent être imbriquées, c’est-à-dire qu’on peut mettre un IF dans une autre.\nLa syntaxe générale Exemple\nscore = 75 if score \u003e 50: if score \u003e 70: print(\"Bien joué !\") else: print(\"Pas mal, mais peut mieux faire.\") else: print(\"Il faut travailler davantage.\") Dans ce cas, comme score est 75, le programme affichera “Bien joué !”.",
    "tags": [],
    "title": "Structures conditionnelles imbriquées",
    "uri": "/semaine4/imbriquees/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures conditionnelles",
    "content": "Les bases des nombres à virgule flottante (floats) Rappel: Les nombres à virgule flottante sont des nombres avec des décimales, comme 0.1, 2.5, ou 3.14.\nAttention En Python, ces nombres peuvent parfois être un peu imprécis à cause de la façon dont les ordinateurs les stockent.\nExemple:\nImaginez que vous additionnez 0.1 et 0.2. Vous attendez que le résultat soit 0.3, mais en Python, cela peut donner un résultat très légèrement différent, comme 0.30000000000000004. C’est à cause des petites erreurs de calcul. Comment tester les floats correctement Évitez la comparaison directe : Ne comparez pas directement deux floats avec == car cela peut échouer à cause des petites erreurs.\na = 0.1 + 0.2 print(a == 0.3) # Cela peut retourner False Utilisez une tolérance : Vérifiez si les nombres sont “assez proches” en utilisant une tolérance.\n# On importe le paquet des fonctions mathématiques import math a = 0.1 + 0.2 b = 0.3 print(math.isclose(a, b, rel_tol=1e-9)) # Cela retourne True Explication:\nVoici comment cela fonctionne :\na et b : Les deux valeurs que vous comparez. rel_tol : La tolérance relative, qui est le maximum de différence autorisée entre a et b, relative à la magnitude des valeurs. Par défaut, cette tolérance est de 1e-9. La fonction retourne True si les valeurs sont considérées comme proches, sinon False.",
    "description": "Les bases des nombres à virgule flottante (floats) Rappel: Les nombres à virgule flottante sont des nombres avec des décimales, comme 0.1, 2.5, ou 3.14.\nAttention En Python, ces nombres peuvent parfois être un peu imprécis à cause de la façon dont les ordinateurs les stockent.\nExemple:\nImaginez que vous additionnez 0.1 et 0.2. Vous attendez que le résultat soit 0.3, mais en Python, cela peut donner un résultat très légèrement différent, comme 0.30000000000000004. C’est à cause des petites erreurs de calcul. Comment tester les floats correctement Évitez la comparaison directe : Ne comparez pas directement deux floats avec == car cela peut échouer à cause des petites erreurs.",
    "tags": [],
    "title": "Tester des nombres flottants",
    "uri": "/semaine4/tests-flottants/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures conditionnelles",
    "content": "Évaluer des expressions booléennes\nLes structures conditionnelles\nTester les flottants",
    "description": "Évaluer des expressions booléennes\nLes structures conditionnelles\nTester les flottants",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine4/ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures conditionnelles",
    "content": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #4. Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 5. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "description": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #4. Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 5. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "tags": [],
    "title": "Pour le prochain cours",
    "uri": "/semaine4/pour-le-prochain-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre l’utilité des structures répétitives (les boucles) Utiliser la boucle WHILE Utiliser la boucle FOR et la fonction RANGE() Contrôler les boucles à l’aide des instructions break et continue Plan de la leçon Quiz: Interaction avec le programme et les conditions (10 mins) Les instructions répétitives en générale ~5mins La boucle WHILE ~15mins Pause 5 minutes. La boucle FOR ~10mins Contrôler les boucles ~5mins Pause 5 minutes. Atelier: Utiliser la boucle While. Atelier: Utiliser la boucle For. Atelier: break et continue. Pour la semaine prochaine.",
    "description": "Objectifs de la leçon Comprendre l’utilité des structures répétitives (les boucles) Utiliser la boucle WHILE Utiliser la boucle FOR et la fonction RANGE() Contrôler les boucles à l’aide des instructions break et continue Plan de la leçon Quiz: Interaction avec le programme et les conditions (10 mins) Les instructions répétitives en générale ~5mins La boucle WHILE ~15mins Pause 5 minutes. La boucle FOR ~10mins Contrôler les boucles ~5mins Pause 5 minutes. Atelier: Utiliser la boucle While. Atelier: Utiliser la boucle For. Atelier: break et continue. Pour la semaine prochaine.",
    "tags": [],
    "title": "Structures répétitives",
    "uri": "/semaine5/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures répétitives",
    "content": "Définition des instructions répétitives Définition Les instructions répétitives, également appelées boucles, sont des structures de contrôle qui permettent d’exécuter un bloc de code plusieurs fois. En Python, les deux principales boucles sont for et while.\nImportance des boucles en programmation Les boucles jouent un rôle crucial en programmation pour plusieurs raisons :\nAutomatisation des tâches répétitives : Elles permettent d’exécuter une série d’instructions plusieurs fois sans avoir à les écrire manuellement. Efficacité et réduction du code : Utiliser des boucles réduit la quantité de code nécessaire, rendant les programmes plus courts et plus faciles à lire. Traitement des collections de données : Les boucles sont indispensables pour parcourir et manipuler des structures de données comme les listes, les tuples, les dictionnaires, et les ensembles. Implémentation d’algorithmes : De nombreux algorithmes, comme les tris et les recherches, reposent sur des boucles pour fonctionner correctement. Exemples d’utilisation courants Voici quelques exemples courants où les boucles sont utilisées en programmation :\nParcourir une liste : Accéder à chaque élément d’une liste pour effectuer des opérations comme la somme, la moyenne, ou la recherche d’un élément spécifique. Calculer des valeurs : Utiliser une boucle for pour calculer des valeurs comme la somme des nombres de 1 à 100. Générer des séquences : Créer des séquences de nombres ou d’autres valeurs. Répéter des actions jusqu’à une condition : Utiliser une boucle while pour répéter une action jusqu’à ce qu’une condition soit remplie. Voyons maintenant comment utiliser les boucles while et for.",
    "description": "Définition des instructions répétitives Définition Les instructions répétitives, également appelées boucles, sont des structures de contrôle qui permettent d’exécuter un bloc de code plusieurs fois. En Python, les deux principales boucles sont for et while.\nImportance des boucles en programmation Les boucles jouent un rôle crucial en programmation pour plusieurs raisons :\nAutomatisation des tâches répétitives : Elles permettent d’exécuter une série d’instructions plusieurs fois sans avoir à les écrire manuellement. Efficacité et réduction du code : Utiliser des boucles réduit la quantité de code nécessaire, rendant les programmes plus courts et plus faciles à lire. Traitement des collections de données : Les boucles sont indispensables pour parcourir et manipuler des structures de données comme les listes, les tuples, les dictionnaires, et les ensembles. Implémentation d’algorithmes : De nombreux algorithmes, comme les tris et les recherches, reposent sur des boucles pour fonctionner correctement. Exemples d’utilisation courants Voici quelques exemples courants où les boucles sont utilisées en programmation :",
    "tags": [],
    "title": "Les instructions répétitives",
    "uri": "/semaine5/boucles/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures répétitives",
    "content": "La boucle WHILE La boucle while permet d’exécuter un bloc de code tant qu’ une condition donnée est vraie.\nLa syntaxe de base est la suivante :\nwhile condition: # bloc de code à exécuter Principe de base: la condition de la boucle while est évaluée avant chaque exécution du bloc de code. Si la condition est vraie, le bloc de code s’exécute. Après chaque exécution, la condition est réévaluée. Ce processus se répète jusqu’à ce que la condition devienne fausse, auquel moment la boucle se termine et le programme continue avec les instructions suivantes.\nInfo La boucle while s’utilise, lorsque le nombre d’itérations (répétitions) n’est pas connu d’avance.. Typiquement avec des saisies utilisateurs\nExemple simple :\ncompteur = 0 while compteur \u003c 5: print(compteur) compteur += 1 0 1 2 3 4 Dans cet exemple, la boucle s’exécute tant que la valeur de compteur est inférieure à 5.\nBoucle WHILE dans un ordinogramme Pour la boucle while, l’ordinogramme commence par une décision basée sur la condition de la boucle. Si la condition est vraie, le flux continue vers les instructions à répéter, puis retourne à la condition initiale.\nExemple:\nConditions et boucles infinies Attention La boucle while nécessite une condition de sortie pour éviter les boucles infinies.\nIl est courant d’utiliser une variable de contrôle (la variable test) qui est modifiée à chaque itération (répétition).\nImportance de la condition de sortie Exemple où la condition de sortie est omise:\n# Boucle sans la condition de sortie nombre = 10 while nombre \u003e 0: print(nombre) On obtient ce qu’on appelle une boucle infinie, car la valeur de nombre reste toujours à 10:\n10 10 10 10 10 10 ... Astuce Dans Jupyter Notebook, pour sortir d’une boucle infinie, il faut cliquer sur l’icône carrée (voir image ci-dessous) dans la barre d’outils pour interrompre le noyau Python (kernel).\nExemple corrigé avec la condition de sortie:\n# Boucle avec condition de sortie nombre = 10 while nombre \u003e 0: print(nombre) # Condition de sortie nombre -= 1 10 9 8 7 6 5 4 3 2 1 Dans cet exemple, l’instruction nombre -= 1 permet de faire changer (décrémenter, ou diminuer) la valeur la variable nombre jusqu’à ce qu’elle atteigne 0.\nAffichage sur la même ligne Par défaut, la fonction print() ajoute une nouvelle ligne après chaque affichage. On peut changer ce comportement avec le mot clé end.\nVoici quelques cas où l’utilisation de end peut être utile :\nÉviter les nouvelles lignes :\nEn utilisant end='', on peut éviter cela et continuer l’affichage sur la même ligne.\ni = 0 while i \u003c 5: print(i, end=' ') i += 1 Cela affichera : 0 1 2 3 4 sur une seule ligne.\nAjouter un séparateur personnalisé :\nOn peut utiliser end pour ajouter un séparateur personnalisé entre les éléments imprimés. Par exemple, pour ajouter une virgule et un espace :\ni = 0 while i \u003c 5: print(i, end=', ') i += 1 Cela affichera : 0, 1, 2, 3, 4, .\nLes opérateurs raccourcis Voici quelques opérateurs raccourcis en Python :\nOpérateur Description Exemple += Addition et assignation a += 5 équivaut à a = a + 5 -= Soustraction et assignation a -= 3 équivaut à a = a - 3 *= Multiplication et assignation a *= 2 équivaut à a = a * 2 /= Division et assignation a /= 4 équivaut à a = a / 4 %= Modulo et assignation a %= 3 équivaut à a = a % 3 **= Exponentiation et assignation a **= 2 équivaut à a = a ** 2 //= Division entière et assignation a //= 2 équivaut à a = a // 2 Ces opérateurs sont très pratiques pour simplifier et rendre le code plus lisible.\nLes opérateurs d’incrémentation et de décrémentation Les opérateurs d’incrémentation et de décrémentation servent à augmenter de 1 (incrémenter) ou diminuer de 1 (décrémenter) des variables numériques (entiers).\nVoici un tableau avec ces opérateurs :\nOpérateur Description Exemple += Incrémentation a += 1 équivaut à a = a + 1 -= Décrémentation a -= 1 équivaut à a = a - 1 Exemples détaillés : Incrémentation :\na = 5 a += 1 # Maintenant, a vaut 6 Décrémentation :\na = 5 a -= 1 # Maintenant, a vaut 4 Ces opérateurs sont très utiles pour simplifier les opérations courantes d’incrémentation et de décrémentation dans les boucles et autres structures de contrôle.\nPause : 5 minutes",
    "description": "La boucle WHILE La boucle while permet d’exécuter un bloc de code tant qu’ une condition donnée est vraie.\nLa syntaxe de base est la suivante :\nwhile condition: # bloc de code à exécuter Principe de base: la condition de la boucle while est évaluée avant chaque exécution du bloc de code. Si la condition est vraie, le bloc de code s’exécute. Après chaque exécution, la condition est réévaluée. Ce processus se répète jusqu’à ce que la condition devienne fausse, auquel moment la boucle se termine et le programme continue avec les instructions suivantes.",
    "tags": [],
    "title": "La boucle while",
    "uri": "/semaine5/while/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures répétitives",
    "content": "La boucle FOR Info La boucle for est utilisée pour itérer sur une séquence d’éléments, comme une liste, une chaîne de caractères, ou un tuple.\nElle s’utilise, lorsque le nombre d’itérations (répétitions) est connu d’avance.\nLa syntaxe de base est la suivante :\nfor element in sequence: # bloc de code à exécuter Exemple simple :\nliste_nombres = [1, 2, 3, 4, 5] for nombre in liste_nombres: print(nombre) Dans cet exemple, chaque élément représenté par la variable nombre de la liste_nombres est affiché à l’écran.\nVoici comment cela fonctionne:\nla boucle for commence par prendre le premier élément de la liste et exécute le bloc de code indenté qui suit. Après avoir exécuté le bloc de code pour cet élément, elle passe au suivant, et ainsi de suite, jusqu’à ce qu’elle ait parcouru tous les éléments de la séquence. Résultat:\n1 2 3 4 5 Info Nous étudierons ces types de séquences dans ce cours, en commençant par les listes, dès la semaine prochaine.\nUtilisation avec des listes et des chaînes de caractères La boucle for est particulièrement utile pour parcourir des listes et des chaînes de caractères.\nParcourir une liste :\nfruits = [\"pomme\", \"banane\", \"cerise\"] for fruit in fruits: print(fruit) Parcourir une chaîne de caractères :\nmot = \"Python\" for lettre in mot: print(lettre) P y t h o n La fonction RANGE() La fonction range() génère une séquence de nombres entiers (pas de flottants), ce qui est très utile pour les boucles for. range(n) génèra n-1 entiers en commençant par 0. Exemple, si n = 3, range(n) donnera 0, 1, 2. Une instruction for est toujours de la forme:\nfor variable-de-controle in iterable : Définition Un itérable est un objet ou une structure de données sur lequel on peut parcourir ou répéter des actions. Imaginez une liste de courses : vous pouvez passer en revue chaque élément un par un. De la même manière, en programmation, un itérable permet de traiter chaque élément de manière séquentielle, comme une liste, un tableau, etc..\nLa fonction range() est un itérable, dans le sens qu’elle génère une séquence de nombres.\nGénérer des séquences de nombres (entiers):\nfor i in range(5): print(i) Cela affichera les nombres de 0 à 4. range(5) génère la séquence de 5 entiers suivants: 0, 1, 2, 3, 4\nLe nombre d’arguments de la fonction RANGE La fonction range() peut accepter un, deux ou trois arguments, selon les besoins.\nVoici un aperçu des différents cas où range() peut accepter plus d’un argument :\nDeux arguments : Lorsque range() accepte deux arguments, ils représentent le début et la fin de la séquence. Par exemple, range(3, 10) génère une séquence de nombres commençant à 3 et se terminant juste avant 10 (c’est-à-dire 3, 4, 5, 6, 7, 8, 9).\nfor i in range(3, 10): print(i) 3 4 5 6 7 8 9 Trois arguments : Avec trois arguments, le premier représente le début de la séquence, le deuxième la fin, et le troisième le pas (ou l’incrément). Par exemple, range(3, 10, 2) génère une séquence de nombres commençant à 3, se terminant juste avant 10, avec un pas de 2 (c’est-à-dire 3, 5, 7, 9).\nfor i in range(3, 10, 2): print(i) Astuce De manière générale, pour générer une séquence croissante d’entiers consécutifs dont le premier terme est debut et le dernier terme est fin, on peut écrire:\ndebut = 3 fin = 10 for i in range(debut,fin+1): print(i, end=\"-\") # Affiche 3-4-5-6-7-8-9-10 Info Nous verrons les fonctions arrange() et linespace() dans le cours sur la bibliothèque NumPy.\nBoucle FOR dans un ordinogramme Dans un ordinogramme, une boucle for est représentée par un rectangle qui contient la condition de la boucle, avec une flèche qui boucle vers l’arrière pour indiquer la répétition.\nLes boucles imbriquées Définition Les boucles imbriquées sont des boucles à l’intérieur d’autres boucles. Elles sont utiles pour travailler avec des structures de données multidimensionnelles.\nExemple :\nInfo Nous verrons les tableaux 1D dans le cours sur la bibliothèque NumPy.\n# Tableau 2D tableau = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Pour chaque ligne du tableau for ligne in tableau: # Pour chaque élément de la ligne for element in ligne: # Affiche l'élément print(element, end=\" \") Cet exemple parcourt chaque élément d’un tableau 2D et les affiche ainsi:\n1 2 3 4 5 6 7 8 9",
    "description": "La boucle FOR Info La boucle for est utilisée pour itérer sur une séquence d’éléments, comme une liste, une chaîne de caractères, ou un tuple.\nElle s’utilise, lorsque le nombre d’itérations (répétitions) est connu d’avance.\nLa syntaxe de base est la suivante :\nfor element in sequence: # bloc de code à exécuter Exemple simple :",
    "tags": [],
    "title": "La boucle for et la fonction range",
    "uri": "/semaine5/for/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures répétitives",
    "content": "Les instructions BREAK et CONTINUE Les instructions break et continue sont utilisées pour contrôler le flux des boucles.\nL’instruction BREAK L’instruction break permet de sortir immédiatement d’une boucle, même si la condition de la boucle n’est pas encore remplie.\nfor i in range(10): if i == 5: break print(i) Dans cet exemple, la boucle s’arrête lorsque i vaut 5, donc les nombres de 0 à 4 sont imprimés.\nL’instruction CONTINUE L’instruction continue permet de passer immédiatement à l’itération suivante de la boucle, en sautant le reste du code à l’intérieur de la boucle pour l’itération en cours.\nfor i in range(10): if i % 2 == 0: continue print(i) Dans cet exemple, seuls les nombres impairs de 0 à 9 sont imprimés, car continue saute les itérations où i est pair.\nl’instruction ELSE avec les boucles En Python, les boucles for et while peuvent avoir une clause else. Le bloc else est exécuté lorsque la boucle se termine normalement (c’est-à-dire sans rencontrer une instruction break).\nFonctionnement et exemples :\nfor i in range(5): print(i) else: print(\"La boucle s'est terminée normalement.\") Dans cet exemple, le message “La boucle s’est terminée normalement.” est affiché après que la boucle for ait terminé toutes ses itérations.\nUn autre exemple avec une condition de sortie :\nfor i in range(5): if i == 3: break print(i) else: print(\"La boucle s'est terminée normalement.\") Dans cet exemple, le message else n’est pas affiché car la boucle est interrompue par l’instruction break lorsque i vaut 3.\nPause : 5 minutes",
    "description": "Les instructions BREAK et CONTINUE Les instructions break et continue sont utilisées pour contrôler le flux des boucles.\nL’instruction BREAK L’instruction break permet de sortir immédiatement d’une boucle, même si la condition de la boucle n’est pas encore remplie.\nfor i in range(10): if i == 5: break print(i) Dans cet exemple, la boucle s’arrête lorsque i vaut 5, donc les nombres de 0 à 4 sont imprimés.",
    "tags": [],
    "title": "Le contrôle des boucles",
    "uri": "/semaine5/controle/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures répétitives",
    "content": "Boucle while\nBoucle for\nInstructions break et continue",
    "description": "Boucle while\nBoucle for\nInstructions break et continue",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine5/ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Structures répétitives",
    "content": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #5. Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 6. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "description": "Pour augmenter vos chances de réussite Terminer et soumettre l’atelier #5. Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 6. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "tags": [],
    "title": "Pour le prochain cours",
    "uri": "/semaine5/pour-le-prochain-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre les concepts de base et fondamentaux des listes Savoir manipuler des listes dans un contexte scientifique Appliquer la logique des boucles avec les listes Utiliser d’autres fonctionnalités courantes des listes Comprendre les notions d’objet et d’encapsulation Plan de la leçon Quiz: Les boucles (10 mins) L’importance des listes en programmation et en contexte scientifique. ~5mins Création, accès, modification, ajout et suppression d’éléments d’une liste. ~15mins Pause 5 minutes. Parcourir les éléments d’une liste. ~10mins Autres manipulations courantes sur les listes ~15mins Faire la somme de tous les éléments d’une liste. Obtenir le nombre d’éléments d’une liste (sa taille ou longueur). Trier les éléments d’une liste. Trouver les éléments uniques d’une liste. Filtrer les nombres pairs d’une liste. Pause 5 minutes. Les chaines de caractères sont des listes ~5mins Les chaines de caractères sont des objets ~5mins Ateliers: Les listes et les chaines de caractères Pour la semaine prochaine.",
    "description": "Objectifs de la leçon Comprendre les concepts de base et fondamentaux des listes Savoir manipuler des listes dans un contexte scientifique Appliquer la logique des boucles avec les listes Utiliser d’autres fonctionnalités courantes des listes Comprendre les notions d’objet et d’encapsulation Plan de la leçon Quiz: Les boucles (10 mins) L’importance des listes en programmation et en contexte scientifique. ~5mins Création, accès, modification, ajout et suppression d’éléments d’une liste. ~15mins Pause 5 minutes. Parcourir les éléments d’une liste. ~10mins Autres manipulations courantes sur les listes ~15mins Faire la somme de tous les éléments d’une liste. Obtenir le nombre d’éléments d’une liste (sa taille ou longueur). Trier les éléments d’une liste. Trouver les éléments uniques d’une liste. Filtrer les nombres pairs d’une liste. Pause 5 minutes. Les chaines de caractères sont des listes ~5mins Les chaines de caractères sont des objets ~5mins Ateliers: Les listes et les chaines de caractères Pour la semaine prochaine.",
    "tags": [],
    "title": "Les listes et le traitement des chaines de caractères",
    "uri": "/semaine6/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les listes et le traitement des chaines de caractères",
    "content": "L’importance des listes Les listes sont l’une des structures de données les plus utilisées en Python. Elles permettent de stocker plusieurs éléments de différents types dans une seule variable, ce qui les rend très pratiques pour gérer des collections de données.\nDéfinition Une liste est une collection ordonnée et modifiable d’éléments. Chaque élément de la liste a une position définie, appelée indice, qui commence à 0 pour le premier élément.\nLes listes sont particulièrement utiles pour :\nGérer des collections de données : Par exemple, une liste de noms, de numéros, ou d’éléments complexes (objets). Effectuer des opérations à répétition : Parcourir les éléments d’une liste pour les traiter. Modifier des données : Ajouter, supprimer ou modifier des éléments de la liste. Pourquoi utiliser des listes ? Mise en situation Vous devez gérer les données des planètes des différents systèmes solaires. Chaque planète a un nom et une distance par rapport à notre soleil. Vous ne savez pas combien de planètes sont exactement présentes dans ces systèmes solaires. Vous devez afficher le nom de toutes les planètes et leur distance par rapport à notre soleil.\nSolution sans liste # Saisie de chaque variable planete_01_nom = \"Mercure\" planete_01_distance = 58 planete_02_nom = \"Vénus\" # .... planete_08_distance = 2871 # Affichage des noms et des distances un par un print(planete_01_nom, planete_01_distance) # .... print(planete_08_nom, planete_08_distance) Solution avec une liste L’utilisation des listes permettra d’exécuter cette tâche beaucoup plus facilement. Vous pourrez ajouter/modifier/enlever des planètes. Et vous pourrez ajouter plusieurs informations pour chaque planète.\n# Remplissage de la liste planetes = [] planetes.append([\"Mercure\", 58]) planetes.append([\"Vénus\", 108.2]) .... planetes.append([\"Uranus\", 2871]) # Affichage des noms et des distances dans une boucle for planete in planetes: print(planete[0], planete[1]) Qu’est-ce qu’une liste ? Les listes en Python sont définies en utilisant des crochets [ ].\nCaractéristiques d’une liste Ordonnée : Les éléments de la liste conservent un ordre défini, ce qui signifie que l’ordre dans lequel vous ajoutez les éléments est préservé. Modifiable : Une liste peut être modifiée après sa création, ce qui signifie que vous pouvez ajouter, supprimer ou changer des éléments. Taille dynamique : Une liste en Python peut changer de taille dynamiquement. Vous pouvez ajouter ou supprimer des éléments sans avoir à spécifier la taille initiale de la liste. Hétérogène : En Python, une liste peut contenir des éléments de différents types (entiers, chaînes de caractères, listes, etc.). Bien qu’il est possible de le faire, il faut rester prudent lorsqu’on utilise des listes hétérogènes. Elles pourraient entraîner des erreurs, notamment dans les boucles. Création d’une liste Pour créer une liste en Python, on utilise des crochets [] :\n# Création d'une liste vide ma_liste = [] # ou ma_liste = list() # Liste avec des éléments ma_liste = [6, 3, 8, 9, 7, 3, 1, 2] Accès aux éléments d’une liste Les crochets [] sont aussi utilisés pour accéder directement à l’élément correspondant.\nNote Rappel : Les indices commencent à zéro.\nma_liste = [6, 3, 8, 9, 7, 3, 1, 2] # Accès au premier élément print(ma_liste[0]) # Affiche 6 # Accès au dernier élément print(ma_liste[-1]) # Affiche 2 # Opérations sur les éléments de la liste x = ma_liste[1] + ma_liste[3] # est l'équivalent de 3 + 9, soit les éléments qui se trouve aux indices 1 et 3 print(x) # Affiche 12 Modification des éléments d’une liste Les listes sont modifiables, ce qui signifie que l’on peut changer la valeur des éléments :\nma_liste = [6, 3, 8, 9, 7, 3, 1, 2] # La valeur de la case à l'indice 2 est maintenant 0 ma_liste[2] = 0 # La valeur de la case à l'indice 4 est maintenant la même que celle de la case à l'indice 7 ma_liste[4] = ma_liste[7] Ajout et suppression d’éléments d’une liste On peut ajouter des éléments à une liste avec append() ou insert(), et les supprimer avec remove() ou pop().\nAjout d’éléments # Liste vide ma_liste = [] # Ajoute la valeur 6 à la fin de la liste ma_liste.append(6) # Ajoute la valeur 3 à la fin de la liste ma_liste.append(3) ma_liste.append(8) ma_liste.append(9) ma_liste.append(7) ma_liste.append(3) ma_liste.append(1) ma_liste.append(2) Note Chaque nouveau nombre est ajouté dans l’ordre. La liste conservera cet ordre, s’il n’est pas volontairement modifié dans le code.\nInsertion d’éléments La méthode\nma_liste = [0, 9, 9, 3, 1] # Insert la valeur 7 à la case 3 ma_liste.insert(3, 7) Suppression d’éléments Attention Lors de la suppression, les valeurs après sont décalées.\nma_liste = [0, 3, 0, 9, 9, 3, 1, 2] # Supprime le dernier élément de la liste ma_liste.pop() ma_liste = [0, 3, 0, 9, 9, 3, 1] # Supprime l'élément à l'indice 2 ma_liste.pop(2) ma_liste = [0, 3, 9, 9, 3, 1] # Supprime la première occurrence de la valeur 3 ma_liste.remove(3) Pause 5 minutes Parcourir les éléments d’une liste (à l’aide d’une boucle) Un premier exemple serait de parcourir chacun des éléments de la liste avec une boucle for:\nma_liste = [1, 2, 3, 4, 5, 6, 7] # Affichage de chacun des éléments de la liste for element in ma_liste: print(element, end=\",\")\t# Affiche 1, 2, 3, 4, 5, 6, 7 Il est aussi possible d’utiliser la fonction range() afin de parcourir la liste à l’aide des indices:\nma_liste = [1, 2, 3, 4, 5, 6, 7] # On additionne 1 à chaque élément de la liste for i in range(len(ma_liste)): ma_liste[i] = ma_liste[i] + 1\tprint(ma_liste, end=\" \")\t# Affiche 2 3 4 5 6 7 8 Enfin, la boucle while peut aussi être utile:\n# On affiche les premiers éléments de la liste. # On arrête dès que le total des nombres lus dépasse 10 ma_liste = [1, 2, 3, 4, 5, 6, 7] total = 0 i = 0 while total \u003c 10: print(ma_liste[i], end=\".\") total += ma_liste[i] i += 1 Affiche:\n1.2.3.4. Autres manipulations courantes sur les listes Faire la somme de tous les éléments d’une liste. Avec sum(ma_liste) on obtient la somme des éléments numériques d’une liste. Par exemple:\nnotes = [15, 18, 12, 20, 17] somme = sum(notes) print(\"La somme des notes est: \", somme) Cela affiche:\nLa somme des notes est: 82 Obtenir le nombre d’éléments d’une liste (sa taille ou longueur). La méthode len(ma_liste) donne le nombre d’éléments de la liste. Par exemple:\nnotes = [15, 18, 12, 20, 17] nb_notes = len(notes) print(\"La liste contient\", nb_notes, \"notes\") Résultat :\nLa liste contient 5 notes Obtenir la position d’un élément dans une liste La méthode index() est utilisée pour trouver la position (l’indice) d’un élément spécifique dans une liste. Voici comment elle fonctionne :\nSyntaxe liste.index(element, debut, fin) element : L’élément dont vous voulez trouver l’indice. debut (optionnel) : La position de départ pour la recherche. fin (optionnel) : La position de fin pour la recherche. # Créer une liste fruits = ['pomme', 'banane', 'cerise', 'banane'] # Trouver la position de 'banane' indice_banane = fruits.index('banane') print(f\"L'indice de l'élément 'banane' est : {indice_banane}. 'banane' est donc le {indice_banane+1}e élément\") Résultat\nL'indice de l'élément 'banane' est : 1. 'banane' est donc le 2e élément Dans cet exemple, la méthode index() retourne l’indice de la première occurrence de 'banane' dans la liste, qui est 1.\nUtilisation avec les paramètres debut et fin Vous pouvez également spécifier une plage de recherche en utilisant les paramètres debut et fin :\n# Trouver l'indice de 'banane' après la position 1 index_banane_apres_1 = fruits.index('banane', 2) print(f\"L'indice de 'banane' après la position 1 est : {index_banane_apres_1}\") Résultat\nL'indice de 'banane' après la position 1 est : 3 Ici, la méthode index() commence la recherche à partir de l’indice 2 et trouve la deuxième occurrence de 'banane' à l’indice 3.\nTrier les éléments d’une liste. La méthode ma_liste.sort() en Python est utilisée pour trier les éléments d’une liste. Exemples:\nma_liste = [0, 3, 9, 9, 3, 1] # La liste est triée en ordre croissant ma_liste.sort() # La liste est triée en ordre décroissant ma_liste.sort(reverse=True) Attention Lorsqu’il s’agit de chaînes de caractères (str) avec un mélange de majuscules et de minuscules, le tri se fait par défaut en premier sur les majuscules et après sur les minuscules. Ce comportement vient de leur position dans la table ASCII.\nPar exemple:\nLa liste ['Banane', 'ananas', 'Cerise'] sera triée en ['Banane', 'Cerise', 'ananas'].\nPour effectuer un tri sans tenir compte de la casse, vous pouvez utiliser le paramètre key avec la fonction str.lower, comme ceci : ma_list.sort(key=str.lower). Cela convertira temporairement chaque élément en minuscules pour le tri, tout en conservant la casse originale dans la liste triée.\nExemple :\nma_liste = ['Banane', 'ananas', 'Cerise'] ma_liste.sort(key = str.lower) print(ma_liste)\t# Affiche ['ananas', 'Banane', 'Cerise'] Trouver les éléments uniques d’une liste. Dans ce cas, on utilise list() et set(), comme dans cet exemple:\nma_liste = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5] uniques = list(set(ma_liste)) print(uniques) # Affiche [1, 2, 3, 4, 5] Filtrer les nombres pairs d’une liste. Note L’opérateur modulo (%) est utilisé ici pour vérifier si un nombre est divisible par 2 sans reste, ce qui signifie qu’il est pair.\nPour extraire les nombres pairs d’une liste, en utilisant l’opérateur modulo (%), vous pouvez utiliser une boucle pour parcourir la liste et pour chaque élément de la liste vérifier si le nombre est pair. S’il l’est on l’ajoute dans une autre liste comme suit :\nnombres = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Liste vide pour stocker les nombres pairs pairs = [] # Recherche des nombres pairs for nombre in nombres: # Si le nombre est pair, on l'ajoute dans la liste \"paires\" if nombre % 2 == 0: pairs.append(nombre) # On affiche la liste des nombres pairs print(pairs) # Affiche [2, 4, 6, 8, 10] D’autres fonctions ou méthodes de listes Fonction Description max() Retourne la valeur maximum de la liste min() Retourne la valeur minimum de la liste del() Supprime un élément selon sa position extend() Ajoute tous les éléments d’une liste dans une autre liste clear() Efface tous les éléments d’une liste index() Retourne l’indice du premier élément dont la valeur est égale à celle spécifiée insert(position, element) Insert un élément à la position designée reverse() Inverse l’ordre des éléments de la liste copy() Retourne une copie superficielle de la liste Pour voir des exemples de ces fonctions, cliquez ici\nRéférence site w3schools.com",
    "description": "L’importance des listes Les listes sont l’une des structures de données les plus utilisées en Python. Elles permettent de stocker plusieurs éléments de différents types dans une seule variable, ce qui les rend très pratiques pour gérer des collections de données.\nDéfinition Une liste est une collection ordonnée et modifiable d’éléments. Chaque élément de la liste a une position définie, appelée indice, qui commence à 0 pour le premier élément.",
    "tags": [],
    "title": "Les Listes",
    "uri": "/semaine6/listes/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les listes et le traitement des chaines de caractères",
    "content": "Quelques rappels sur les chaînes de caractères Une chaîne de caractères est simplement plusieurs caractères regroupés ensemble, entourés de guillemets simples (') ou doubles (\"). Les caractères peuvent être des lettres, chiffres, symboles ou espaces. Les chaines de caractères sont appelées string. Nous pouvons concaténer des chaînes, mais ce n’est pas tout… ##3 Opérations sur les chaines de caractères\nLes chaînes de caractères en Python sont puissantes et flexibles. En les traitant comme des listes de caractères, vous pouvez effectuer une variété d’opérations pour manipuler et transformer vos données textuelles. Par exemple: extraire ou chercher des sous-chaînes, les modifier, etc…\nOpérations Définition * Multiplie (répète) une chaîne + Concatène des chaînes Les chaines de caractères sont des listes Accès aux caractères individuels Vous pouvez accéder à chaque caractère d’une chaîne en utilisant des indices, de la même manière que vous le feriez avec une liste. Les indices commencent à 0.\nchaine = \"Bonjour\" print(chaine[0]) # Affiche B print(chaine[1]) # Affiche o Longueur d’une chaine de caractères Vous pouvez obtenir le nombre de caractères dans une chaine, avec la méthode len().\nchaine = \"Bonjour\" longueur = len(chaine) print(\"La longueur de la chaîne est:\", longueur) Affiche :\nLa longueur de la chaîne est: 7 Itération sur les caractères Vous pouvez itérer sur chaque caractère d’une chaîne en utilisant une boucle for.\nchaine = \"Bonjour\" for caractere in chaine: print(caractere) Affiche:\nB o n j o u r Slicing (découpage) Le slicing vous permet d’extraire une sous-chaîne d’une chaîne existante.\nchaine = \"Bonjour\" # Extraire les caractères aux index 1 à 3 inclus sous_chaine = chaine[1:4] print(sous_chaine) # Affiche onj Conversion entre chaînes et listes Vous pouvez convertir une chaîne en une liste de caractères et vice versa.\nchaine = \"Bonjour\" liste_caracteres = list(chaine) print(liste_caracteres) # Affiche ['B', 'o', 'n', 'j', 'o', 'u', 'r'] chaine_recomposee = ''.join(liste_caracteres) print(chaine_recomposee) # Affiche Bonjour Autres méthodes utiles des chaînes Python fournit de nombreuses méthodes intégrées pour manipuler les chaînes de caractères.\nMéthodes Définition [ ] Accède à un caractère selon sa position [pos1:pos2 ] Accède aux caractères situés à l’indice pos1 jusqu’à l’indice précédant pos2 [pos1: ] Accède aux caractères situés à l’indice pos1 jusqu’à la fin de la chaine de caractères [:pos2 ] Accède au premier caractère (indice 0) jusqu’au caractères à l’indice précédant pos2 len() Retourne la longueur de la chaîne str() Convertit en chaîne de caractères lower() Convertit tous les caractères de la chaîne en minuscules islower() Vérifie si une chaîne de caractères est en minuscules et retourne True si c’est le cas, False sinon upper() Convertit tous les caractères de la chaîne en majuscules. isupper() Vérifie si une chaîne de caractères est en majuscules et retourne True si c’est le cas, False sinon isdigit() Vérifie si une chaîne de caractères est numérique et retourne True si c’est le cas, False sinon isalpha() Vérifie si une chaîne de caractères est alpha-numérique et retourne True si c’est le cas, False sinon find() Renvoie l’indice de la première occurrence de la sous-chaîne split(delimiteur) Découper une chaîne en une liste de sous-chaînes. join() Concatène une séquence d’éléments (comme une liste) en une seule chaîne replace(ancienne, nouvelle) Remplacer une sous-chaîne par une autre. strip() Supprime les espaces (ou autres caractères spécifiés) au début et à la fin de la chaîne Quelques exemples:\nchaine = \"Bonjour\" print(chaine.upper()) # BONJOUR print(chaine.replace('o', 'a')) # Banjaur print(chaine.split('o')) # ['B', 'nj', 'ur'] print(chaine.strip()) # Bonjour (si des espaces étaient présents) Exemples avec les chaînes de caractères\nRéférence w3schools.com\nFormater les chaines de caractères Insertion de variables Il est possible d’insérer facilement des variables dans des chaînes de caractères. Une première solution est d’utiliser la concaténation:\nnombre1 = 23 nombre2 = 35 la_chaine = \"Le nombre \" + str(nombre1) + \" est plus petit que \" + str(nombre2) print(la_chaine) # Affiche: Le nombre 23 est plus petit que 35 Mais il est préférable d’utiliser les f-strings\nLes f-Strings Exemple:\nnombre1 = 23 nombre2 = 35 la_chaine = f'Le nombre {nombre1} est plus petit que {nombre2}' print(la_chaine) # Affiche: Le nombre 23 est plus petit que 35 Explication:\nf-string : Le f avant les guillemets indique que la chaîne de caractères est une f-string. Cela permet d’incorporer des expressions Python directement dans la chaîne. { } : Les accolades { } sont utilisées pour inclure des expressions Python à l’intérieur de la chaîne. Ces expressions sont évaluées au moment de l’exécution et leurs valeurs sont insérées dans la chaîne. Les caractères “spéciaux” Rappel : Le \\ permet d’échapper le caractère suivant.\nLe tableau ci-dessous présente quelques caractères d’échappement couramment utilisés en Python et leur rôle respectif :\nCaractère Rôle \\t Tabulation \\n Retour de ligne \\\\ Barre oblique inversée (Backslash) Pause 5 minutes",
    "description": "Quelques rappels sur les chaînes de caractères Une chaîne de caractères est simplement plusieurs caractères regroupés ensemble, entourés de guillemets simples (') ou doubles (\"). Les caractères peuvent être des lettres, chiffres, symboles ou espaces. Les chaines de caractères sont appelées string. Nous pouvons concaténer des chaînes, mais ce n’est pas tout… ##3 Opérations sur les chaines de caractères",
    "tags": [],
    "title": "Les chaînes de caractères",
    "uri": "/semaine6/chaines_caracteres/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les listes et le traitement des chaines de caractères",
    "content": "Listes: La base\nListes: En sciences\nListes: Système solaire\nLes chaînes de caractères",
    "description": "Listes: La base\nListes: En sciences\nListes: Système solaire\nLes chaînes de caractères",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine6/ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les listes et le traitement des chaines de caractères",
    "content": "Pour augmenter vos chances de réussite Terminer et soumettre le(s) atelier(s). Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Réviser la matière du cours depuis le début de la session. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "description": "Pour augmenter vos chances de réussite Terminer et soumettre le(s) atelier(s). Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Réviser la matière du cours depuis le début de la session. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "tags": [],
    "title": "Pour le prochain cours",
    "uri": "/semaine6/pour-le-prochain-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Réviser les notions vues jusqu’à présent en mettant l’emphase sur les éléments de compétence obligatoires. Plan de la leçon Quiz: Les listes et les chaines de caractères (10 mins)\nRévision:\nCompréhension de la syntaxe de base : Connaître les types de données, les variables, les opérateurs, et les structures de contrôle comme les conditions et les boucles. Manipulation des structures de données : Savoir utiliser les listes pour organiser et gérer les données. Programmation orientée objet (POO) : Comprendre le concept d’objets à l’aide des chaines de caractères. Deux exercices récapitulatifs\nAttention Le contenu de cette section n’est pas exhaustif. L’emphase est mise sur les éléments importants ou les moins bien assimilés.",
    "description": "Objectifs de la leçon Réviser les notions vues jusqu’à présent en mettant l’emphase sur les éléments de compétence obligatoires. Plan de la leçon Quiz: Les listes et les chaines de caractères (10 mins)\nRévision:\nCompréhension de la syntaxe de base : Connaître les types de données, les variables, les opérateurs, et les structures de contrôle comme les conditions et les boucles. Manipulation des structures de données : Savoir utiliser les listes pour organiser et gérer les données. Programmation orientée objet (POO) : Comprendre le concept d’objets à l’aide des chaines de caractères. Deux exercices récapitulatifs",
    "tags": [],
    "title": "Révision des semaines 1 à 6",
    "uri": "/semaine7/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Révision des semaines 1 à 6",
    "content": "Les variables et les types de données On utilise des variables en programmation pour stocker des informations que l’on peut réutiliser et manipuler plus tard au lieu d’écrire à nouveau la valeur. Les types des variables et les transtypage Python supporte plusieurs types de données de base. Pour l’instant nous avons vu: nombre_entier = 15\t# int nombre_flottant = 15.0\t# float chaine_caracteres = \"Je suis une chaine de caractères\" # str chaine_caracteres = 'Je suis aussi une chaine de caractères'\t# str valeur_booleenne = True\t# bool autre_valeur_booleenne = False\t# bool une_liste = [1, 2, 3, 4, 5]\t# list Une_autre_liste = [\"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\"]\t# list Transtypage : C’est la conversion d’un type de données à un autre. Par exemple, convertir une chaîne en entier avec int(\"123\") ou un entier en chaîne avec str(123). Utilisation de variables Avant d’utiliser une variable, il faut la déclarer, c’est-à-dire la nommer et lui donner une valeur. Le nom d’une variable doit respecter certains critères: Ils doivent commencer par une lettre ou un underscore (_), suivis de lettres, chiffres ou underscores. Ils sont sensibles à la casse (age et Age sont différents). Ils ne peuvent contenir ni espaces, ni lettres accentuées. Attention Si vous oubliez de déclarer une variable avant de l’utiliser, ou si vous vous trompez en écrivant son nom, cela causera l’erreur NameError comme dans l’exemple ci-dessous:\nnombre1 = 5 nombre2 = 10 somme = nombre1 + nombre2 + nombre3 --------------------------------------------------------------------------- NameError Traceback (most recent call last) Cell In[20], line 4 1 nombre1 = 5 2 nombre2 = 10 ----\u003e 4 somme = nombre1 + nombre2 + nombre3 NameError: name 'nombre3' is not defined Les commentaires Les commentaires sont des lignes de texte dans le code qui sont ignorées par l’interpréteur. Ils sont utilisés pour expliquer le code, pour désactiver des ligne de code ou pour laisser des notes aux programmeurs. Python utilise le symbole # suivi du texte du commentaire. Les opérateurs de division Division classique (/) : Cet opérateur divise deux nombres et retourne un résultat en nombre flottant (même si les deux nombres sont des entiers).\nDivision entière (//) : Cet opérateur divise deux nombres et retourne le quotient entier de la division, en ignorant la partie décimale.\nModulo (%) : Cet opérateur retourne le reste de la division de deux nombres.\nLes nombres flottants et les erreurs d’arrondi Les erreurs d’arrondi avec les nombres flottants en Python proviennent de la manière dont les nombres sont représentés en mémoire. Les nombres flottants sont stockés en binaire, ce qui peut entraîner des approximations pour certains nombres décimaux. Par conséquent, des opérations arithmétiques peuvent produire des résultats légèrement inexacts. Lire et traiter des données saisies au clavier Lorsqu’on veut utiliser une donnée qui est fournie au programme par l’utilisateur (saisie au clavier), la fonction input() est utilisée. input() permet de faire trois actions: Afficher un message pour guider l’utilisateur. Lire la donnée saisie au clavier par l’utilisateur. Stocker la donnée dans une variable. Exemple général :\nvariable = input(\"Texte pour guider l'utilisateur\") Attention Les données lues avec input() sont toujours de type chaîne de caractères. Il est donc nécessaire de les convertir en un autre type, lorsqu’on souhaite les utiliser dans des calculs.\nLes conditions et les instructions IF, ELIF, ELSE Les conditions Les conditions (ou tests) sont des expressions booléennes. Leurs résultats sont soit True, soit False. Elles s’expriment à l’aide d’opérateurs de comparaison (==, !=, \u003e, \u003e=, \u003c, \u003c=) et/ou des opérateurs logiques (and, or, not). Les instructions IF, ELIF, ELSE if condition: # bloc de code si condition est vraie elif autre_condition: # bloc de code si autre_condition est vraie else: # bloc de code si aucune condition n'est vraie Attention N’oubliez pas les : après les conditions du if et du elif et après le else. Après le else, il n’y a pas de condition. elif et else ne sont pas toujours nécessaires. elif: Si d’autres conditions doivent être vérifiées lorsque la condition du if est True. else: Les traitements à faire lorsque la condition du if est False. Les boucles WHILE et FOR Boucle while : Répète un bloc de code tant qu’ une condition est vraie. while condition: # bloc de code Boucle for : Itère sur une séquence (range(), liste, tuple, chaîne, etc.). for element in sequence: # bloc de code Forcer l’arrêt (BREAK) ou forcer le saut (CONTINUE) d’une itération d’une boucle break : Interrompt la boucle. continue : Passe à l’itération suivante de la boucle. Attention Avec la boucle while il faut explicitement modifier la variable de test pour la faire passer à la valeur de l’itération suivante. Avec la boucle for, ce changement se fait tout seul. Traitement lorsqu’une boucle se termine normalement L’instruction else dans les boucles permet d’exécuter un bloc de code, lorsque la boucle se termine normalement (sans break). L’indentation et la logique du code Attention L’indentation est essentielle pour définir les blocs de code qui doivent être exécutés en fonction des conditions. L’indentation et les instructions IF, ELIF et ELSE # Début de la structure if condition1: # Code exécuté si condition1 est vraie elif condition2: # Code exécuté si condition1 est fausse ET condition2 est vraie else: # Code exécuté si aucune des conditions précédentes n'est vraie # Extérieur de la structure conditionnelle L’indentation et la boucle WHILE # Début de la boucle while while condition: # Code exécuté tant que condition est vraie # Instructions pour modifier la variable de test pour éviter d'entrer dans une boucle infinie. # Extérieur de la boucle while L’indentation et la boucle FOR # Début de la boucle for for element in sequence: # Code exécuté pour chaque élément dans la séquence # Extérieur de la boucle for L’indentation et les instructions BREAK et CONTINUE # Début de la boucle for for element in sequence: if condition_arret: # Code exécuté si condition_arret est vraie break # Sort de la boucle if condition_continuer: # Code exécuté si condition_continuer est vraie continue # Passe à l'itération suivante # Code exécuté si aucune des conditions n'est vraie # Extérieur de la boucle for L’indentation et l’instruction ELSE dans les boucles # Début de la boucle for for element in sequence: if condition_arret: # Code exécuté si condition_arret est vraie break # Sort de la boucle else: # Code exécuté si la boucle se termine normalement (sans break) # Extérieur de la boucle for # Début de la boucle while while condition: # Code exécuté tant que condition est vraie if condition_arret: # Code exécuté si condition_arret est vraie break # Sort de la boucle else: # Code exécuté si la boucle se termine normalement (sans break) # Extérieur de la boucle while La fonction print En Python, la fonction print() est utilisée pour afficher des messages ou des valeurs à l’écran. Utilisation de base print(\"Bonjour le monde\") # Affiche : Bonjour le monde Affichage de plusieurs éléments print(\"Bonjour\", \"le\", \"monde\") # Affiche : Bonjour le monde L’argument end Par défaut, print() ajoute un saut de ligne (\\n) à la fin de chaque appel. L’argument end permet de modifier ce comportement.\nExemple: Utilisation de end pour créer une liste sur une seule ligne :\nfor i in range(5): print(i, end=\", \") # Affiche : 0, 1, 2, 3, 4,",
    "description": "Les variables et les types de données On utilise des variables en programmation pour stocker des informations que l’on peut réutiliser et manipuler plus tard au lieu d’écrire à nouveau la valeur. Les types des variables et les transtypage Python supporte plusieurs types de données de base. Pour l’instant nous avons vu: nombre_entier = 15\t# int nombre_flottant = 15.0\t# float chaine_caracteres = \"Je suis une chaine de caractères\" # str chaine_caracteres = 'Je suis aussi une chaine de caractères'\t# str valeur_booleenne = True\t# bool autre_valeur_booleenne = False\t# bool une_liste = [1, 2, 3, 4, 5]\t# list Une_autre_liste = [\"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\"]\t# list Transtypage : C’est la conversion d’un type de données à un autre. Par exemple, convertir une chaîne en entier avec int(\"123\") ou un entier en chaîne avec str(123). Utilisation de variables Avant d’utiliser une variable, il faut la déclarer, c’est-à-dire la nommer et lui donner une valeur. Le nom d’une variable doit respecter certains critères: Ils doivent commencer par une lettre ou un underscore (_), suivis de lettres, chiffres ou underscores. Ils sont sensibles à la casse (age et Age sont différents). Ils ne peuvent contenir ni espaces, ni lettres accentuées. Attention Si vous oubliez de déclarer une variable avant de l’utiliser, ou si vous vous trompez en écrivant son nom, cela causera l’erreur NameError comme dans l’exemple ci-dessous:",
    "tags": [],
    "title": "Python: La base",
    "uri": "/semaine7/python-base/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Révision des semaines 1 à 6",
    "content": "Qu’est-ce qu’un ordinogramme ? Un ordinogramme est une représentation graphique des étapes d’un algorithme. Il utilise des symboles normalisés pour représenter différentes actions ou décisions, et des flèches pour indiquer la séquence des étapes.\nSymboles courants Oval : Début et fin du processus. Rectangle : Action ou opération. Losange : Décision ou condition. Parallélogramme : Entrée ou sortie de données. Flèches : Indiquent la direction du flux. Utilisation des ordinogrammes Planification : Aide à planifier et à organiser les étapes d’un programme avant de coder. Communication : Facilite la communication de la logique du programme entre les membres d’une équipe. Débogage : Aide à identifier et à corriger les erreurs logiques dans un programme. Documentation : Sert de documentation visuelle pour le programme, utile pour la maintenance future. Exemple (avec saisie au clavier, conditions et boucle) Voici un exemple d’ordinogramme pour un programme qui :\nDemande à l’utilisateur d’entrer un nombre entier entre 1 et 10 vérifie si le nombre est pair. Si le nombre est pair il le multiplie par 3 Il affiche le résultat Sinon Il redemande à l’utilisateur d’entrer un nombre entre 1 et 10",
    "description": "Qu’est-ce qu’un ordinogramme ? Un ordinogramme est une représentation graphique des étapes d’un algorithme. Il utilise des symboles normalisés pour représenter différentes actions ou décisions, et des flèches pour indiquer la séquence des étapes.\nSymboles courants Oval : Début et fin du processus. Rectangle : Action ou opération. Losange : Décision ou condition. Parallélogramme : Entrée ou sortie de données. Flèches : Indiquent la direction du flux. Utilisation des ordinogrammes Planification : Aide à planifier et à organiser les étapes d’un programme avant de coder. Communication : Facilite la communication de la logique du programme entre les membres d’une équipe. Débogage : Aide à identifier et à corriger les erreurs logiques dans un programme. Documentation : Sert de documentation visuelle pour le programme, utile pour la maintenance future. Exemple (avec saisie au clavier, conditions et boucle) Voici un exemple d’ordinogramme pour un programme qui :",
    "tags": [],
    "title": "Les ordinogrammes",
    "uri": "/semaine7/ordinogramme/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Révision des semaines 1 à 6",
    "content": "Comment créer une liste ma_liste_vide = [] ma_liste = [1, 2, 3, 4, 5] Comment accéder aux éléments d’une liste premier_element = ma_liste[0] # Accède au premier élément dernier_element = ma_liste[-1] # Accède au dernier élément Comment ajouter ou supprimer des éléments ma_liste.append(6) # Ajoute 6 à la fin de la liste ma_liste.remove(3) # Supprime la première occurrence de 3 Comment modifier un élément d’une liste ma_liste[1] = 10 # Change le deuxième élément en 10 Comment lire les éléments d’une liste un à un (boucle) for element in ma_liste: print(element) Comment extraire une sous-liste d’une liste sous_liste = ma_liste[1:3] # Prend les éléments de l'indice 1 à 2 Comment obtenir l’indice (position) d’un élément dans une liste ma_liste.index(element, debut, fin)",
    "description": "Comment créer une liste ma_liste_vide = [] ma_liste = [1, 2, 3, 4, 5] Comment accéder aux éléments d’une liste premier_element = ma_liste[0] # Accède au premier élément dernier_element = ma_liste[-1] # Accède au dernier élément Comment ajouter ou supprimer des éléments ma_liste.append(6) # Ajoute 6 à la fin de la liste ma_liste.remove(3) # Supprime la première occurrence de 3 Comment modifier un élément d’une liste ma_liste[1] = 10 # Change le deuxième élément en 10 Comment lire les éléments d’une liste un à un (boucle) for element in ma_liste: print(element) Comment extraire une sous-liste d’une liste sous_liste = ma_liste[1:3] # Prend les éléments de l'indice 1 à 2 Comment obtenir l’indice (position) d’un élément dans une liste ma_liste.index(element, debut, fin)",
    "tags": [],
    "title": "Les listes",
    "uri": "/semaine7/listes/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Révision des semaines 1 à 6",
    "content": "L’échappement de caractères L’échappement de caractères permet d’inclure des caractères spéciaux dans une chaîne de caractères. Cela se fait en utilisant le caractère de barre oblique inverse (\\). Caractères spéciaux courants :\n\\' : Apostrophe ou guillemet simple \\\" : Guillemets doubles \\\\ : Barre oblique inverse \\n : Nouvelle ligne \\t : Tabulation chaine = \"Ceci est une ligne.\\nEt ceci est une nouvelle ligne.\" print(chaine) # Affiche : # Ceci est une ligne. # Et ceci est une nouvelle ligne. Inclure des guillemets dans une chaîne :\nchaine = \"Il a dit : \\\"Bonjour tout le monde!\\\"\" print(chaine) # Affiche : Il a dit : \"Bonjour tout le monde!\" Utilisation de la barre oblique inverse :\nchemin = \"C:\\\\Utilisateurs\\\\NomUtilisateur\\\\Documents\" print(chemin) # Affiche : C:\\Utilisateurs\\NomUtilisateur\\Documents La concaténation de chaînes de caractères La concaténation consiste à assembler plusieurs chaînes de caractères en une seule. En Python, il existe plusieurs méthodes pour y parvenir : Utilisation de l’opérateur + Utilisation de la méthode join() Utilisation de l’opérateur * pour répéter une chaîne Accès aux caractères d’une chaine On utilise les [] et l’indice de position du caractère, comme avec les listes. NB : L’indice du premier caractères est toujours 0. Obtenir la longueur d’une chaine de caractères La méthode len() est utilisée. Lire les caractères d’une chaine un à un La boucle for permet de parcourir chaque caractères d’une chaine. Mettre en MAJUSCULES ou en minuscule La méthode upper() permet de mettre les caractères en MAJUSCULES. La méthode lower() permet de mettre les caractères en minuscules. Extraire une partie d’une chaine de caractère (slicing) L’utilisation de [debut : fin] permet d’extraire une sous-chaine de la chaine initiale, à partir du caractères à l’indice debut et jusqu’au caractères en position fin-1 inclus. Diviser une chaine en spécifiant un délimiteur de sous-chaines La méthode split() divise une chaîne de caractères en une liste de sous-chaînes, en utilisant un séparateur spécifié (par défaut, un espace). Convertir une chaine de caractère en liste La fonction list() crée une liste où chaque élément est un caractère de la chaîne. En d’autres termes, elle transforme la chaîne de caractères en une liste de ses caractères individuels. Formatage à l’aide de f-strings Les f-strings permettent d’incorporer des expressions à l’intérieur de chaînes de caractères en utilisant des accolades {}. age = 25 nom = \"Nathalie\" message = f\"{nom} a {age} ans et dans 5 ans, elle aura {age + 5} ans.\" print(message) # Affiche: Nathalie a 25 ans et dans 5 ans , elle aura 30 ans.",
    "description": "L’échappement de caractères L’échappement de caractères permet d’inclure des caractères spéciaux dans une chaîne de caractères. Cela se fait en utilisant le caractère de barre oblique inverse (\\). Caractères spéciaux courants :\n\\' : Apostrophe ou guillemet simple \\\" : Guillemets doubles \\\\ : Barre oblique inverse \\n : Nouvelle ligne \\t : Tabulation chaine = \"Ceci est une ligne.\\nEt ceci est une nouvelle ligne.\" print(chaine) # Affiche : # Ceci est une ligne. # Et ceci est une nouvelle ligne. Inclure des guillemets dans une chaîne :",
    "tags": [],
    "title": "Les chaines de caractères",
    "uri": "/semaine7/chaines/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Révision des semaines 1 à 6",
    "content": "Objectif : Ces exercices visent à évaluer votre compréhension de la syntaxe de base (variables et types de données, l’interaction avec le programme, les expressions booléennes et les conditions, les boucles, la manipulation des listes des chaînes de caractères.\nEn bas de l’énoncé de cet exercice, vous avez des exemples de résultats attendus.\nExercice 1 Contexte Vous allez créer un programme en Python pour analyser une chaîne de caractères saisie au clavier. Le programme doit compter le nombre de caractères, identifier les caractères uniques et calculer la fréquence de chaque caractère.\nCe que le programme doit faire : Déterminer si l’utilisateur a le droit d’utiliser le programme\nDemander à l’utilisateur d’entrer son prénom. Demander à l’utilisateur d’entrer son âge. Si l’utilisateur à moins de 18 ans, à l’aide de f-string, on l’informe qu’il n’a pas le droit d’utiliser ce programme et le programme s’arrête. Si l’utilisateur à plus de 18 ans, on lui demande d’entrer une phrase au clavier. Par exemple “Bonjour tout le monde” et l’analyse de la phrase se fait. Gestion de la chaine de caractères à analyser.\nUtiliser trois listes pour stocker : Les caractères de la chaine. Les caractères uniques. La fréquence de chaque caractère. Analyse de la chaine de caractères pour déterminer les caractères uniques et la fréquence.\nUtiliser une boucle pour parcourir chaque caractère de la chaîne. Utiliser les fonctions et méthodes de listes/chaines: append() pour ajouter des caractères dans une liste. lower() pour ne traiter que des caractères en minuscules. len() pour obtenir la longueur d’une chaine ou liste. index() pour trouver la position (l’indice) d’un élément spécifique dans une liste. Logique de l’analyse\nCréer une liste pour stocker tous les caractères de la chaîne. Utiliser une boucle pour ajouter chaque caractère de la chaîne à la liste de caractères. Créer une liste pour stocker les caractères uniques. Utiliser une liste de fréquence des caractères pour compter la fréquence de chaque caractère. Implémentez une condition pour vérifier si un caractère est déjà présent dans la liste des caractères uniques avant de l’ajouter. Une fois le décompte terminé, à l’aide de f-string afficher les résultats (nombre de caractères analysés, liste des caractères uniques) Exemple de résultats Si le prénom saisi est “Nathalie” et l’âge 16 Bonjour Nathalie, malheureusement, ce programme est réservé aux plus de 18 ans et vous n'avez que 16 ans. Si le prénom saisi est “Nathalie” et l’âge 30 et le texte est “Bonjour tout le monde” Nombre de caractères: 21 Caractères uniques: ['b', 'o', 'n', 'j', 'u', 'r', ' ', 't', 'l', 'e', 'm', 'd'] Fréquence des caractères: [1, 4, 2, 1, 2, 1, 3, 2, 1, 2, 1, 1] Exercice 2 Contexte Vous allez créer un programme qui gère une liste de produits dans un magasin. Le programme doit permettre à l’utilisateur d’ajouter des produits, de les afficher, et de rechercher des produits spécifiques en fonction de leur nom ou de leur prix.\nEn bas de l’énoncé de cet exercice, vous avez des jeux de tests à utiliser pour vous assurer de traiter tous les cas possibles.\nInstructions Variables et types de données :\nCréez deux listes vides noms_produits et prix_produits pour stocker les noms et les prix des produits respectivement. Entrées au clavier :\nDemandez à l’utilisateur combien de produits il souhaite ajouter. Utilisez une boucle pour permettre à l’utilisateur d’entrer le nom et le prix de chaque produit. Transtypage :\nAssurez vous de convertir les entrées de l’utilisateur en types de données appropriés (par exemple, convertir le prix en nombre flottant). Structures Conditionnelles :\nAjoutez une option pour rechercher un produit par son nom ou par son prix. Si l’utilisateur choisit de rechercher par nom, demandez le nom et affichez les produits correspondants. Si l’utilisateur choisit de rechercher par prix, demandez le prix et affichez les produits dont le prix est inférieur ou égal à ce montant. Boucles :\nUtilisez des boucles pour parcourir les listes des produits et afficher les résultats de la recherche. Listes et chaînes de caractères :\nAffichez la liste complète des produits avec leur nom et leur prix formatés correctement. Points à vérifier : Assurez vous que les entrées de l’utilisateur sont correctement converties en types de données appropriés. Vérifiez que les boucles et les conditions fonctionnent comme prévu. Testez le programme avec différents scénarios pour vous assurer qu’il gère correctement les entrées et les recherches. Les jeux de tests Ces jeux de tests devraient vous permettre de vérifier que votre programme fonctionne correctement avec les deux listes séparées.\nJeu de test 1 : Ajout et affichage de produits Entrées :\nNombre de produits : 3 Produit 1 : Nom = “Pomme”, Prix = 1.5 Produit 2 : Nom = “Banane”, Prix = 0.8 Produit 3 : Nom = “Orange”, Prix = 1.2 Sortie attendue :\nListe des produits : Nom: Pomme, Prix: 1.5 Nom: Banane, Prix: 0.8 Nom: Orange, Prix: 1.2 Jeu de test 2 : Recherche par nom Entrées :\nNombre de produits : 2 Produit 1 : Nom = “Lait”, Prix = 2.5 Produit 2 : Nom = “Pain”, Prix = 1.0 Recherche : nom Nom à rechercher : “Lait” Sortie attendue :\nProduit trouvé : Produit trouvé - Nom: Lait, Prix: 2.5 Jeu de test 3 : Recherche par prix Entrées :\nNombre de produits : 4 Produit 1 : Nom = “Chocolat”, Prix = 3.0 Produit 2 : Nom = “Bonbon”, Prix = 0.5 Produit 3 : Nom = “Biscuit”, Prix = 1.5 Produit 4 : Nom = “Jus”, Prix = 2.0 Recherche : prix Prix maximum : 2.0 Sortie attendue :\nProduits trouvés : Produit trouvé - Nom: Bonbon, Prix: 0.5 Produit trouvé - Nom: Biscuit, Prix: 1.5 Produit trouvé - Nom: Jus, Prix: 2.0 Jeu de test 4 : Entrée invalide pour la recherche Entrées :\nNombre de produits : 1 Produit 1 : Nom = “Eau”, Prix = 0.7 Recherche : couleur (option invalide) Sortie attendue :\nMessage d’erreur : Option de recherche invalide. Jeu de test 5 : Aucun produit trouvé Entrées :\nNombre de produits : 2 Produit 1 : Nom = “Café”, Prix = 3.5 Produit 2 : Nom = “Thé”, Prix = 2.5 Recherche : nom Nom à rechercher : “Lait” Sortie attendue :\nAucun produit trouvé (aucune sortie spécifique attendue pour ce cas, mais le programme ne doit pas planter). Exercice 1 - Version 2 Modifiez le code de l’exercice 1 pour que tant que l’âge de l’utilisateur n’est pas supérieur ou égal à 18 ans, on lui redemande son age.",
    "description": "Objectif : Ces exercices visent à évaluer votre compréhension de la syntaxe de base (variables et types de données, l’interaction avec le programme, les expressions booléennes et les conditions, les boucles, la manipulation des listes des chaînes de caractères.\nEn bas de l’énoncé de cet exercice, vous avez des exemples de résultats attendus.\nExercice 1 Contexte Vous allez créer un programme en Python pour analyser une chaîne de caractères saisie au clavier. Le programme doit compter le nombre de caractères, identifier les caractères uniques et calculer la fréquence de chaque caractère.",
    "tags": [],
    "title": "Exercices récapitulatifs",
    "uri": "/semaine7/exercice/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Révision des semaines 1 à 6",
    "content": "Pour augmenter vos chances de réussite Réviser (refaire ou faire les ateliers) des six premières semaines. Réviser la matière sur les listes, les chaines de caractères les objets, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 8. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "description": "Pour augmenter vos chances de réussite Réviser (refaire ou faire les ateliers) des six premières semaines. Réviser la matière sur les listes, les chaines de caractères les objets, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 8. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "tags": [],
    "title": "Pour le prochain cours",
    "uri": "/semaine7/pour-le-prochain-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre les rôles et utilités des sous-programmes. Définir des sous-programmes. Utiliser des sous-programmes. Comprendre le passage de paramètres et la portée des variables. Plan de la leçon Quiz récapitulatif: semaines 1 à 6 (20 mins) Fonctions: Rôles et définition. Déclaration. L’appel. Le passage de paramètres. Le retour de valeurs. La portée des variables. Ateliers : Les fonctions et la portée des variables Pour la semaine prochaine",
    "description": "Objectifs de la leçon Comprendre les rôles et utilités des sous-programmes. Définir des sous-programmes. Utiliser des sous-programmes. Comprendre le passage de paramètres et la portée des variables. Plan de la leçon Quiz récapitulatif: semaines 1 à 6 (20 mins) Fonctions: Rôles et définition. Déclaration. L’appel. Le passage de paramètres. Le retour de valeurs. La portée des variables. Ateliers : Les fonctions et la portée des variables Pour la semaine prochaine",
    "tags": [],
    "title": "Les sous-programmes (fonctions)",
    "uri": "/semaine8/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les sous-programmes (fonctions)",
    "content": "Les sous-programmes, aussi appelés fonctions, sont des blocs de code réutilisables qui permettent de structurer et d’organiser un programme. Ils facilitent la maintenance et la lisibilité du code.\nPython fourni des fonctions prédéfinies, qui permettent de réaliser des tâches courantes sans avoir à écrire beaucoup de code. Vous en connaissez déjà quelques-unes.\nQuelques fonctions de base print() len() int(), float(), str(), bool() round() etc. Voyons d’autres fonctions prédéfinies utiles.\nLes fonctions mathématiques La fonction abs() La fonction abs() retourne la valeur absolue d’un nombre.\nprint(abs(-5)) # Affiche 5 Pour utiliser certaines fonctions, vous devez d’abord importer le module math dans votre code.\nimport math La fonction sqrt() La fonction math.sqrt(x) retourne la racine carrée de x.\nimport math # Calcul de la racine carrée de 16 resultat = math.sqrt(16) print(resultat) # Affiche 4.0 # Calcul de la racine carrée de 2 resultat = math.sqrt(2) print(resultat) # Affiche environ 1.4142135623730951 La fonction log() La fonction math.log(x, base) retourne le logarithme de x dans la base spécifiée. Si la base n’est pas spécifiée, elle utilise la base naturelle e.\nimport math # Logarithme naturel de 2 resultat = math.log(2) print(resultat) # Affiche 0.6931471805599453 # Logarithme de 8 en base 2 resultat = math.log(8, 2) print(resultat) # Affiche 3.0 # Logarithme de 100 en base 10 resultat = math.log(100, 10) print(resultat) # Affiche 2.0 La fonction exp() La fonction math.exp(x) retourne e (la base des logarithmes naturels) élevé à la puissance x.\nimport math # Calcul de e^1 resultat = math.exp(1) print(resultat) # Affiche 2.718281828459045 # Calcul de e^2 resultat = math.exp(2) print(resultat) # Affiche 7.3890560989306495 # Calcul de e^0 resultat = math.exp(0) print(resultat) # Affiche 1.0 Le nombre e est la base des logarithmes naturels, c’est-à-dire le nombre défini par ln(e) = 1. Cette constante mathématique, également appelée nombre d’Euler ou constante de Néper vaut environ 2,71828. ln est le logarithme naturel.\nVoici un tableau récapitulatif de quelques fonctions mathématiques prédéfinies en Python :\nFonction Description Exemple abs(x) Retourne la valeur absolue de x. abs(-7) -\u003e 7 round(x, n) Arrondit x à n décimales. round(3.14159, 2) -\u003e 3.14 max(iterable) Retourne le plus grand élément d’un itérable. max([1, 2, 3]) -\u003e 3 min(iterable) Retourne le plus petit élément d’un itérable. min([1, 2, 3]) -\u003e 1 sum(iterable) Retourne la somme des éléments d’un itérable. sum([1, 2, 3]) -\u003e 6 pow(x, y) Retourne x élevé à la puissance y. pow(2, 3) -\u003e 8 divmod(x, y) Retourne le quotient et le reste de la division de x par y. divmod(9, 4) -\u003e (2, 1) math.sqrt(x) Retourne la racine carrée de x. math.sqrt(16) -\u003e 4.0 math.exp(x) Retourne e élevé à la puissance x. math.exp(2) -\u003e 7.3890560989306495 math.log(x, base) Retourne le logarithme de x dans la base spécifiée. math.log(8, 2) -\u003e 3.0 math.sin(x) Retourne le sinus de x (en radians). math.sin(math.pi/2) -\u003e 1.0 math.cos(x) Retourne le cosinus de x (en radians). math.cos(0) -\u003e 1.0 math.tan(x) Retourne la tangente de x (en radians). math.tan(math.pi/4) -\u003e 1.0",
    "description": "Les sous-programmes, aussi appelés fonctions, sont des blocs de code réutilisables qui permettent de structurer et d’organiser un programme. Ils facilitent la maintenance et la lisibilité du code.\nPython fourni des fonctions prédéfinies, qui permettent de réaliser des tâches courantes sans avoir à écrire beaucoup de code. Vous en connaissez déjà quelques-unes.\nQuelques fonctions de base print() len() int(), float(), str(), bool() round() etc. Voyons d’autres fonctions prédéfinies utiles.",
    "tags": [],
    "title": "Les fonctions prédéfinies",
    "uri": "/semaine8/fonctions-predefinies/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les sous-programmes (fonctions)",
    "content": "Déclaration des fonctions En Python, une fonction est déclarée avec le mot-clé def suivi du nom de la fonction et des parenthèses (). Les instructions à exécuter sont ensuite écrites sous cette déclaration, indentées d’une tabulation.\ndef ma_fonction(): # Bloc de code de la fonction Noe Notez le : après les parenthèses et l’indentation du bloc de code.\nUtilisation des fonctions (l’appel d’une fonction) Pour utiliser une fonction, il faut l'appeler. Pour ce faire, il suffit d’écrire son nom suivi de parenthèses ().\ndef ma_fonction(): print(\"Bonjour tout le monde!\") ma_fonction() # Affiche \"Bonjour tout le monde!\" Passage de paramètres Les fonctions peuvent prendre des paramètres, qui sont des valeurs passées à la fonction lors de son appel. Les paramètres sont déclarés entre les parenthèses lors de la déclaration de la fonction.\ndef saluer(nom): print(f\"Bonjour {nom}!\") saluer(\"Nathalie\") # Affiche \"Bonjour Nathalie!\" Paramètres par défaut Il est possible de définir des valeurs par défaut pour les paramètres. Si un argument n’est pas fourni lors de l’appel de la fonction, la valeur par défaut sera utilisée.\ndef saluer(nom=\"tout le monde\"): print(f\"Bonjour {nom}!\") saluer() # Affiche \"Bonjour tout le monde!\" saluer(\"Albert\") # Affiche \"Bonjour Albert!\" Paramètres nommés Les paramètres peuvent être passés par nom, ce qui permet de les fournir dans un ordre différent de celui de la déclaration.\ndef saluer(nom, message): print(f\"{message}, {nom}!\") saluer(message=\"Salut\", nom=\"Aline\") # Affiche \"Salut, Aline!\" Paramètres variables Python permet de passer un nombre variable d’arguments à une fonction en utilisant *args pour les arguments positionnels et **kwargs pour les arguments nommés.\ndef afficher_noms(*noms): for nom in noms: print(nom) afficher_noms(\"Alice\", \"Bob\", \"Charlie\") # Affiche chaque nom sur une nouvelle ligne def afficher_infos(**infos): for cle, valeur in infos.items(): print(f\"{cle}: {valeur}\") afficher_infos(nom=\"Alice\", age=30, ville=\"Paris\") # Affiche chaque information sur une nouvelle ligne Retour de valeurs Une fonction peut renvoyer une valeur à l’aide de l’instruction return. Cette valeur peut ensuite être utilisée dans le reste du programme.\n.\ndef carre(nombre): return nombre ** 2 x = carre(5) # x vaut maintenant 25 Retour multiple En Python, on peut retourner plusieurs valeurs d’une fonction en utilisant le nom des variables à retourner.\ndef calculer(a, b): somme = a + b produit = a * b return somme, produit resultat = calculer(3, 4) print(resultat) # Affiche (7, 12) La documentation des fonctions (Docstrings) Les docstrings sont des chaînes de caractères utilisées pour documenter les fonctions. Elles sont placées juste après la définition de la fonction.\nExemple en Python :\ndef addition(a, b): \"\"\" Calcule la somme de deux nombres. Paramètres: a (int, float): Le premier nombre. b (int, float): Le deuxième nombre. Retourne: int, float: La somme des deux nombres. \"\"\" return a + b Pause 5 minutes",
    "description": "Déclaration des fonctions En Python, une fonction est déclarée avec le mot-clé def suivi du nom de la fonction et des parenthèses (). Les instructions à exécuter sont ensuite écrites sous cette déclaration, indentées d’une tabulation.\ndef ma_fonction(): # Bloc de code de la fonction Noe Notez le : après les parenthèses et l’indentation du bloc de code.",
    "tags": [],
    "title": "Création et utilisation de fonctions",
    "uri": "/semaine8/les-fonctions/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les sous-programmes (fonctions)",
    "content": ".\nLa portée des variables La portée d’une variable fait référence à l’endroit où une variable est accessible dans le code. En Python, les variables déclarées à l’intérieur d’une fonction sont locales à cette fonction, tandis que les variables déclarées en dehors de toute fonction sont globales.\nUne variable locale pourra être utilisée SEULEMENT à l’intérieur de la fonction dans laquelle elle a été déclarée. Une variable globale pourra être utilisée dans tout le programme. Exemple : On crée utilise une variable globale à l’intérieur de la fonction, sans la redéfinir.\nc = 1 # variable globale def addition(): # incrémente c de 2 c = c + 2 # Ici c n'est pas accessible print(c) print(c) # Ici c vaut 1 addition() # Affiche UnboundLocalError: local variable 'c' referenced before assignment Explication: On peut accéder à la variable globale c, qu’à l’extérieur de la fonction, mais non ne peut pas la modifier à l’intérieur de la fonction.\nRendre globale, une variable locale Il est possible de modifier une variable locale en une variable globale à l’intérieur d’une fonction en utilisant le mot-clé global.\nc = 1 # variable globale def addition(): global c # Ici c est le même et vaut 1 # incrémente c de 2 c = c + 2 print(c) Ici c = 1 + 2 print(c) # Ici c vaut toujour 1 addition() # Affiche 3 1 3",
    "description": ".\nLa portée des variables La portée d’une variable fait référence à l’endroit où une variable est accessible dans le code. En Python, les variables déclarées à l’intérieur d’une fonction sont locales à cette fonction, tandis que les variables déclarées en dehors de toute fonction sont globales.\nUne variable locale pourra être utilisée SEULEMENT à l’intérieur de la fonction dans laquelle elle a été déclarée. Une variable globale pourra être utilisée dans tout le programme. Exemple : On crée utilise une variable globale à l’intérieur de la fonction, sans la redéfinir.",
    "tags": [],
    "title": "La portée des variables",
    "uri": "/semaine8/la-portee-des-variables/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les sous-programmes (fonctions)",
    "content": "Les fichiers .ipynb sont à nouveau téléchargeables ici. Les fonctions\nLa portée des variables",
    "description": "Les fichiers .ipynb sont à nouveau téléchargeables ici. Les fonctions\nLa portée des variables",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine8/ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Les sous-programmes (fonctions)",
    "content": "Pour augmenter vos chances de réussite Terminer et soumettre le(s) atelier(s). Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 9. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "description": "Pour augmenter vos chances de réussite Terminer et soumettre le(s) atelier(s). Réviser la matière vue cette semaine, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 9. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.",
    "tags": [],
    "title": "Pour le prochain cours",
    "uri": "/semaine8/pour-le-prochain-cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre l’importance du débogage Appliquer une technique de débogage simple pour résoudre des bogues courants. Évaluer l’acquisition des éléments de compétence du cours (Examen formatif) Plan de la leçon Quiz: Les fonctions (10 mins) L’importance du débogage dans le développement de logiciels. ~5mins Suivre l’exécution d’un programme simple et identifier les erreurs. ~10mins Aperçu aux outils de débogage disponibles dans VS Code. ~5mins Utilisation des points d’arrêt, de l’inspection des variables et de la navigation dans le code. Pause 5 mins Examen formatif: à faire obligatoirement individuellement et en classe ~120mins Atelier (à faire à la maison): Trouvez l’erreur… et corrigez-la. Pour la semaine prochaine",
    "description": "Objectifs de la leçon Comprendre l’importance du débogage Appliquer une technique de débogage simple pour résoudre des bogues courants. Évaluer l’acquisition des éléments de compétence du cours (Examen formatif) Plan de la leçon Quiz: Les fonctions (10 mins) L’importance du débogage dans le développement de logiciels. ~5mins Suivre l’exécution d’un programme simple et identifier les erreurs. ~10mins Aperçu aux outils de débogage disponibles dans VS Code. ~5mins Utilisation des points d’arrêt, de l’inspection des variables et de la navigation dans le code. Pause 5 mins Examen formatif: à faire obligatoirement individuellement et en classe ~120mins Atelier (à faire à la maison): Trouvez l’erreur… et corrigez-la. Pour la semaine prochaine",
    "tags": [],
    "title": "Technique de débogage simple",
    "uri": "/semaine9/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Technique de débogage simple",
    "content": "Le code que nous écrivons ne fonctionne pas toujours comme prévu et peut parfois produire des résultats inattendus. Lorsqu’un problème survient, il est plus efficace d’utiliser une technique de débogage plutôt que de rester perplexe devant le code.\nUn débogueur permet d’exécuter le code pas à pas pour identifier précisément où se trouve l’erreur et comprendre les corrections nécessaires. Bien que l’utilisation d’un débogueur demande du temps et des efforts, c’est une compétence essentielle pour tout développeur.\nL’importance du débogage Le débogage est une étape très importante dans le développement de logiciels. Il permet de détecter et de corriger les erreurs dans le code, garantissant ainsi que le programme fonctionne comme prévu. Sans débogage, les bugs peuvent entraîner des comportements inattendus, des plantages ou des résultats incorrects. Voici quelques raisons pour lesquelles le débogage est essentiel :\nAssurer la fiabilité : Un code sans bogues est plus fiable et offre une meilleure expérience utilisateur. Améliorer la performance : Le débogage permet d’identifier et de corriger les inefficacités dans le code. Faciliter la maintenance : Un code bien débogué est plus facile à comprendre et à maintenir. Apprentissage et amélioration : Le processus de débogage aide les développeurs à mieux comprendre le fonctionnement de leur code et à améliorer leurs compétences en programmation. Analyse du problème avant le code Avant de déboguer un programme, il est crucial revoir les hypothèses faites pour prévoir les résultats. Des hypothèses incorrectes peuvent compliquer l’identification des problèmes.\nQuelques conseils Il est important de repérer les fautes de frappe, et de considérer les modifications récentes du code.\nComprendre l’intention du code, surtout s’il a été écrit par quelqu’un d’autre, est également essentiel.\nCommencer par un petit segment de code fonctionnel et tester progressivement peut faciliter la correction des erreurs.\nRemettre en question ses hypothèses peut réduire le temps nécessaire pour identifier et corriger les problèmes.\nSuivre la trace à l’aide de la méthode print() En utilisant la méthode print(), vous pouvez facilement suivre l’exécution de votre programme et identifier les erreurs. Cette technique est particulièrement utile pour les débutants en programmation, car elle permet de visualiser le comportement du code en temps réel.\nEn insérant des instructions print() à des endroits stratégiques du code, vous pouvez suivre l’évolution des variables et comprendre le flux d’exécution du programme. Voici comment appliquer cette technique pour résoudre des bugs courants.\nExemple 1 : Boucles imbriquées def multiplication(n): for i in range(1, n + 1): for j in range(1, n + 1): print(f\"{i} * {j} = {i * j}\") print(\"Fin de la ligne\", i) # Test multiplication(3) Pour déboguer ce code, vous pouvez ajouter des instructions print() pour vérifier les valeurs de i et j à chaque itération :\ndef multiplication(n): for i in range(1, n + 1): for j in range(1, n + 1): print(f\"i = {i}, j = {j}\") print(f\"{i} * {j} = {i * j}\") print(\"Fin de la ligne\", i) # Test multiplication(3) Exemple 2 : Conditions imbriquées def pair_impair(num): if num \u003e 0: if num % 2 == 0: print(\"Le nombre est positif et pair\") else: print(\"Le nombre est positif et impair\") elif num == 0: print(\"Le nombre est zéro\") else: if num % 2 == 0: print(\"Le nombre est négatif et pair\") else: print(\"Le nombre est négatif et impair\") # Test pair_impair(4) pair_impair(-3) pair_impair(0) Pour déboguer ce code, vous pouvez ajouter des instructions print() pour vérifier la valeur de num et les conditions visitées :\ndef pair_impair(num): print(f\"Vérification du nombre : {num}\") if num \u003e 0: print(\"Le nombre est positif\") if num % 2 == 0: print(\"Le nombre est positif et pair\") else: print(\"Le nombre est positif et impair\") elif num == 0: print(\"Le nombre est zéro\") else: print(\"Le nombre est négatif\") if num % 2 == 0: print(\"Le nombre est négatif et pair\") else: print(\"Le nombre est négatif et impair\") # Test pair_impair(4) pair_impair(-3) pair_impair(0) Le débogueur intégré à Visual Studio Code Visual Studio Code offre une gamme d’outils de débogage puissants et intégrés. Parmi ces outils, on trouve :\nle débogueur intégré qui permet de définir des points d’arrêt (breakpoints), de surveiller les variables, et de parcourir le code pas à pas. des extensions spécifiques pour améliorer les capacités de débogage, telles que l’extension Python pour le débogage de scripts Python Ces outils facilitent l’identification et la correction des erreurs dans le code, rendant le processus de développement plus efficace et moins stressant.\nLe Débogeur de VS Code en action\nPause 5 minutes",
    "description": "Le code que nous écrivons ne fonctionne pas toujours comme prévu et peut parfois produire des résultats inattendus. Lorsqu’un problème survient, il est plus efficace d’utiliser une technique de débogage plutôt que de rester perplexe devant le code.\nUn débogueur permet d’exécuter le code pas à pas pour identifier précisément où se trouve l’erreur et comprendre les corrections nécessaires. Bien que l’utilisation d’un débogueur demande du temps et des efforts, c’est une compétence essentielle pour tout développeur.",
    "tags": [],
    "title": "Suivre l'exécution du programme",
    "uri": "/semaine9/debogage-print/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Technique de débogage simple",
    "content": "Durée: 2h00 Les sections (3 questions chacune, sauf indication contraire): Types de variables Boucle for Boucles while Listes Divers (1 question) Fonctions Chaines de caractères Conditions (if-elif-else) Code à composer (2 questions) Bonus",
    "description": "Durée: 2h00 Les sections (3 questions chacune, sauf indication contraire): Types de variables Boucle for Boucles while Listes Divers (1 question) Fonctions Chaines de caractères Conditions (if-elif-else) Code à composer (2 questions) Bonus",
    "tags": [],
    "title": "EXAMEN FORMATIF (À faire en classe)",
    "uri": "/semaine9/examen-formatif/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Technique de débogage simple",
    "content": "Trouvez l’erreur…",
    "description": "Trouvez l’erreur…",
    "tags": [],
    "title": "ATELIER (À faire à la maison)",
    "uri": "/semaine9/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "La gestion des exceptions Python permet de gérer les exceptions à l’aide des blocs try-except. Cela permet d’attraper les erreurs et de les traiter de manière appropriée sans interrompre l’exécution du programme.\ntry: resultat = 10 / 0 except ZeroDivisionError: print(\"Erreur : division par zéro\") Il est également possible de gérer plusieurs types d’exceptions dans un même bloc try-except.\ntry: ma_liste = [1, 2, 3] print(ma_liste[5]) except IndexError: print(\"Erreur : index de liste incorrect\") except ZeroDivisionError: print(\"Erreur : division par zéro\")",
    "description": "La gestion des exceptions Python permet de gérer les exceptions à l’aide des blocs try-except. Cela permet d’attraper les erreurs et de les traiter de manière appropriée sans interrompre l’exécution du programme.\ntry: resultat = 10 / 0 except ZeroDivisionError: print(\"Erreur : division par zéro\") Il est également possible de gérer plusieurs types d’exceptions dans un même bloc try-except.\ntry: ma_liste = [1, 2, 3] print(ma_liste[5]) except IndexError: print(\"Erreur : index de liste incorrect\") except ZeroDivisionError: print(\"Erreur : division par zéro\")",
    "tags": [],
    "title": "Gestion des exceptions",
    "uri": "/bases/langage-de-prog/erreurs/gestionexceptions/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Attention Vous DEVREZ OBLIGATOIREMENT utiliser les ordinateurs du cégep. Pour ce faire, au préalable, vous devrez vous assurer que vous êtes en mesure de vous connecter sur ces ordinateurs et sur Moodle. Autrement, il n’y aura AUCUNE reprise possible.\nMatière Semaine 1 à 9 inclusivement. Poids de l’examen Vaut 30% de la note finale du cours. Documentation permise 2 feuilles 8.5 x 11 recto-verso. 1 crayon et 1 feuille vierge comme feuille brouillon. Format de l’examen Durée : 2 heures (SAA1: 2h40)\nPlateforme: 100% sur Moodle2\nNombre de questions : 24 + 1 question bonus\nIl y aura 8 catégories de questions et pour chacune, il y aura 3 questions (1 facile, 1 moyenne et 1 difficile)3 Catégorie 1: variables, interaction et types de variables Catégorie 2: if-elif-else Catégorie 3: boucle while Catégorie 4: boucle for Catégorie 5: listes Catégorie 6: chaines de caractères Catégorie 7: fonctions Catégorie 84: Code à composer Il y aura 1 question bonus qui vaudra 10pts Attention Pour toutes les questions à coder et la question bonus, si vous ne savez pas comment écrire le code, vous pouvez écrire l’algorithme (les étapes et la logique en français). Ainsi, vous pourrez quand même avoir quelques points.\nLes étudiants du Service d’aide à l’apprentissage (SAA) pourront faire l’examen dans la salle de classe ET bénéficier de leur temps supplémentaire. ↩︎\nMise à part les questions à coder et la question bonus, les questions sont à choix multiple ou à réponse courte. ↩︎\nMise à part la catégorie 8, chaque question facile vaut 3pts, chaque question moyenne vaut 3pts, chaque question difficile vaut 4pts, pour un total de 70 points. ↩︎\nLa question facile vaut 8pts, la question moyenne vaut 10pts et la question difficile vaut 12pts, pour un total de 30 points. ↩︎",
    "description": "Attention Vous DEVREZ OBLIGATOIREMENT utiliser les ordinateurs du cégep. Pour ce faire, au préalable, vous devrez vous assurer que vous êtes en mesure de vous connecter sur ces ordinateurs et sur Moodle. Autrement, il n’y aura AUCUNE reprise possible.\nMatière Semaine 1 à 9 inclusivement. Poids de l’examen Vaut 30% de la note finale du cours. Documentation permise 2 feuilles 8.5 x 11 recto-verso. 1 crayon et 1 feuille vierge comme feuille brouillon. Format de l’examen Durée : 2 heures (SAA1: 2h40)",
    "tags": [],
    "title": "Examen",
    "uri": "/semaine10/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre la structure de données DataFrame. Apprendre à créer et manipuler des dataframes. Savoir importer et exporter des données de fichiers CSV avec Pandas. Réaliser des analyses de données simples. Plan de la leçon Quiz: Pas cette semaine La bibliothèque Pandas Extraction des données de fichiers CSV. Création de Series et de DataFrames. Accès aux données d’un DataFrame. Pause 5 mins Ajout, suppression et renommage de colonnes. Sélection et filtrage de données. Calcul de statistiques descriptives. Conversion d’un DataFrame en liste et modification des valeurs manquantes Pause 5 mins Présentation du Projet Final (Partie 1) - À VENIR Atelier Pour la semaine prochaine",
    "description": "Objectifs de la leçon Comprendre la structure de données DataFrame. Apprendre à créer et manipuler des dataframes. Savoir importer et exporter des données de fichiers CSV avec Pandas. Réaliser des analyses de données simples. Plan de la leçon Quiz: Pas cette semaine La bibliothèque Pandas Extraction des données de fichiers CSV. Création de Series et de DataFrames. Accès aux données d’un DataFrame. Pause 5 mins Ajout, suppression et renommage de colonnes. Sélection et filtrage de données. Calcul de statistiques descriptives. Conversion d’un DataFrame en liste et modification des valeurs manquantes Pause 5 mins Présentation du Projet Final (Partie 1) - À VENIR Atelier Pour la semaine prochaine",
    "tags": [],
    "title": "Pandas et présentation du projet final",
    "uri": "/semaine11/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Pandas et présentation du projet final",
    "content": "Qu’est-ce que pandas ? Pandas est une bibliothèque Python puissante et flexible utilisée pour la manipulation et l’analyse de données. Elle est particulièrement utile pour les scientifiques qui travaillent avec de grandes quantités de données.\nInstallation de pandas Avant de commencer, assurez-vous d’avoir pandas installé. Vous pouvez l’installer via pip :\npip install pandas Importation de pandas Pour utiliser pandas, vous devez d’abord l’importer dans votre script Python :\nimport pandas as pd La structure de données principale de Pandas Un DataFrame est une structure de données bidimensionnelle fournie par la bibliothèque pandas en Python. Il ressemble à une feuille de calcul Excel, avec des lignes et des colonnes. Chaque colonne peut contenir des types de données différents (nombres, chaînes de caractères, etc.), ce qui le rend très flexible pour manipuler et analyser des données.\nChargement des données à partir d’un fichier CSV Le traitement des fichiers contenant des données est essentiel en programmation Python, en particulier dans le domaine des sciences de données. CSV signifie Comma-Separated Values (valeurs séparées par des virgules). C’est un format de fichier simple utilisé pour stocker des données tabulaires, comme une feuille de calcul Excel.\nPandas fourni des fonctionnalités pour lire des fichiers csv ou en créer.\nLa première étape pour travailler avec des données est de les charger dans un DataFrame. Supposons que vous avez un fichier CSV nommé data.csv :\ndf = pd.read_csv('data.csv') Affichage des données Une fois les données chargées, vous pouvez les afficher pour avoir un aperçu :\ndf.head() # Affiche les 5 premières lignes du DataFrame df.tail() # Affiche les 5 dernières lignes du DataFrame Renommage de colonnes Les colonnes peuvent être renommées pour une meilleure clarté.\n# Renommage des colonnes df = df.rename(columns={\"Nom\": \"Prénom\"}) print(\"La colonne Nom modifiée\") df Ajout et suppression de colonnes Pour renommer une ou plusieurs colonnes :\n# Ajout d'une nouvelle colonne df[\"Session\"] = \"Automne\" print(\"La colonne Session ajoutée\") df # Suppression d'une colonne df = df.drop(columns=[\"Session\"]) print(\"La colonne Session supprimée\") df Informations sur le DataFrame Pour obtenir des informations générales sur votre DataFrame, telles que le nombre de lignes et de colonnes, les types de données, etc. :\ndf.info() \u003cclass 'pandas.core.frame.DataFrame'\u003e RangeIndex: 8 entries, 0 to 7 Data columns (total 3 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Prénom 8 non-null object 1 Age 8 non-null int64 2 Note 8 non-null float64 dtypes: float64(1), int64(1), object(1) memory usage: 324.0+ bytes On a bien les types de variables connus : int, float.object fait souvent référence au type str.\nStatistiques de base Pandas offre des méthodes simples pour obtenir des statistiques de base sur vos données :\ndf.describe() # Affiche les statistiques descriptives des colonnes numériques Accès direct aux données Vous pouvez accéder directement aux données d’une colonne du DataFrame.\ndf[\"Age\"] # Accède aux données de la colonne Age 0 25 1 30 2 35 3 42 4 55 5 67 6 37 7 23 Name: Age, dtype: int64 Sélection et filtrage de données Pour sélectionner des colonnes spécifiques :\ndf_selection = df[['Colonne1', 'Colonne2']] # Sélectionne les colonnes 'Colonne1' et 'Colonne2' df_selection.head() Pour filtrer les données selon une condition :\ndf_filtre = df[df['Colonne'] \u003e valeur] # Filtre les lignes où les valeurs de 'Colonne' sont supérieures à 'valeur' df_filtre.head() Attention Dans les chapitres précédents, on utilisait and et or pour combiner des comparaisons. Avec Pandas, il faut utiliser \u0026 pour and et | pour or.\nGrouper les données Le groupement de données permet de calculer des statistiques agrégées pour des sous-ensembles de données.\nCi-dessous, voici comment faire, sans utiliser les fonctionnalités avancées de Pandas et en utilisant les notions déjà vues dans ce cours.\nBoucler sur une colonne pour effectuer des groupements Calculons la moyenne pour les étudiants de l’automne.\nOn filtre notre jeu de données en rapport avec les données de la session d’Automne. df_automne = df[df[\"Session\"] == \"Automne\"] On calcule la moyenne des notes à l’aide d’une boucle for somme_note = 0 for note in df_automne[\"Note\"]: somme_note = somme_note + note moyenne = somme_note / len(df_automne) print(f\"La moyenne des étudiants de l'automne est de {round(moyenne,2)}%\") La moyenne des étudiants de l'automne est de 77.97% Les attributs index et values des DataFrames Pour accéder à l’index du DataFrame :\nindex = df.index print(index) RangeIndex(start=0, stop=3, step=1) Pour accéder aux valeurs du DataFrame sous forme de tableau :\nvaleurs = df.values\t# Accède à la première ligne sous forme de tableau numPy print(valeurs) [['Aline' 25 85.5] ['Robert' 30 90.3] ['Charles' 35 78.9]] Conversion d’un DataFrame en liste La méthode tolist() est utilisée pour convertir un DataFrame en une liste. Chaque ligne du DataFrame sera un élément de la liste. C’est particulièrement utile lorsqu’on souhaite manipuler les données sans utilises les méthodes de pandas. Par exemple, pour identifier et modifier les données manquantes (Ex.: None ou NaN).\nimport pandas as pd # Charger les données dans un DataFrame df = pd.read_csv('data.csv') # Convertir le DataFrame en liste liste = df.values.tolist() # Remplacer les valeurs manquantes par 0 for ligne in liste: for i in range(len(ligne)): if ligne[i] != ligne[i]: ligne[i] = 0 # Afficher la liste modifiée print(liste) [['Aline', 25, 85.5, 'Laval'], ['Robert', 30, 0, 'Laval'], ['Charles', 35, 78.9, 'Montréal'], ['Sophie', 28, 0, 'Québec'], ['Luc', 22, 88.0, 'Sherbrooke'], ['Marie', 27, 0, 'Trois-Rivières'], ['Jean', 32, 92.3, 'Gatineau'], ['Paul', 29, 0, 'Saguenay'], ['Julie', 24, 81.7, 'Drummondville'], ['Marc', 31, 0, 'Longueuil']] La condition if ligne[i] != ligne[i]: fonctionne grâce à une propriété unique des valeurs NaN (Not a Number) en Python. :\nPropriété des valeurs NaN En Python, et plus généralement dans les langages de programmation, les valeurs NaN ont une propriété spéciale : elles ne sont pas égales à elles-mêmes. Cela signifie que si vous comparez une valeur NaN à elle-même, le résultat sera toujours False.\nReconstruction d’un DataFrame L’utilisation de pd.DataFrame(donnees_nettoyees, columns=dataframe.columns) permet reconstruire un DataFrame nettoyé avec les mêmes colonnes que l’original.\nVisualisation des données Bien que Pandas ne soit pas une bibliothèque de visualisation, il s’intègre bien avec Matplotlib pour créer des graphiques simples.\nInfo Nous verrons comment utiliser la bibliothèque Matplotlib pour tracer des graphiques, la semaine prochaine.\nPour tout savoir sur Pandas: Site officiel Pandas.\nPause 5 minutes Présentation du projet final (Étape 1) Projet final",
    "description": "Qu’est-ce que pandas ? Pandas est une bibliothèque Python puissante et flexible utilisée pour la manipulation et l’analyse de données. Elle est particulièrement utile pour les scientifiques qui travaillent avec de grandes quantités de données.\nInstallation de pandas Avant de commencer, assurez-vous d’avoir pandas installé. Vous pouvez l’installer via pip :\npip install pandas Importation de pandas Pour utiliser pandas, vous devez d’abord l’importer dans votre script Python :",
    "tags": [],
    "title": "Introduction à Pandas",
    "uri": "/semaine11/pandas/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Pandas et présentation du projet final",
    "content": "Présentation du projet - Étape 1 - À VENIR\nPrésentation du projet - Étape 2 - À VENIR\nPrésentation du projet - Étape 3 - À VENIR\nPrésentation du projet - Étape 4 - À VENIR",
    "description": "Présentation du projet - Étape 1 - À VENIR\nPrésentation du projet - Étape 2 - À VENIR\nPrésentation du projet - Étape 3 - À VENIR\nPrésentation du projet - Étape 4 - À VENIR",
    "tags": [],
    "title": "Projet final",
    "uri": "/semaine11/projet/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Pandas et présentation du projet final",
    "content": "La bibliothèque Pandas\nFichier iris.csv",
    "description": "La bibliothèque Pandas\nFichier iris.csv",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine11/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre les bases de la bibliothèque Matplotlib. Apprendre à créer des graphiques simples et personnalisés. Interpréter les résultats de graphiques pour des applications en sciences. Plan de la leçon Quiz: Bibliothèque Pandas (10 mins) La création et la personnalisation de graphiques simples. Traçage de graphiques en ligne Ajout d’éléments de graphique (titres, légendes, marqueurs, etc.) Pause 5 mins Les sous graphiques et les graphiques multiples La sauvegarde d’un graphique en format image (png) Les types de graphiques Pause 5 mins Ateliers Pour la semaine prochaine",
    "description": "Objectifs de la leçon Comprendre les bases de la bibliothèque Matplotlib. Apprendre à créer des graphiques simples et personnalisés. Interpréter les résultats de graphiques pour des applications en sciences. Plan de la leçon Quiz: Bibliothèque Pandas (10 mins) La création et la personnalisation de graphiques simples. Traçage de graphiques en ligne Ajout d’éléments de graphique (titres, légendes, marqueurs, etc.) Pause 5 mins Les sous graphiques et les graphiques multiples La sauvegarde d’un graphique en format image (png) Les types de graphiques Pause 5 mins Ateliers Pour la semaine prochaine",
    "tags": [],
    "title": "Matplotlib",
    "uri": "/semaine12/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Matplotlib",
    "content": "Matplotlib est une bibliothèque de visualisation de données en Python qui permet de créer une grande variété de graphiques.\nInstallation de Matplotlib (déjà fait sur les ordinateurs du cégep) Avant de commencer, assurez vous d’avoir Matplotlib installé. Vous pouvez l’installer via pip :\npip install matplotlib Importation de Matplotlib Pour utiliser Matplotlib, vous devez en premier l’importer dans votre code.\nimport matplotlib.pyplot as plt Pour vérifier que Matplotlib est bien installé sur votre environnement:\n# Version de Matplotlib plt.__version__ Étapes des base pour créer et mettre en forme un graphique Création d’un graphique simple Pour créer un graphique simple, utilisez la fonction plot().\nimport matplotlib.pyplot as plt # Données x = [1, 2, 3, 4, 5] y = [2, 3, 5, 7, 11] # Création du graphique plt.plot(x, y) # Affichage du graphique plt.show() Méthode Description plt.plot(x, y) Crée un graphique en ligne avec les valeurs de x et y. plt.show() Affiche le graphique créé. Ajout de titres Vous pouvez ajouter des titres au graphique et aux axes pour rendre le graphique plus informatif.\nimport matplotlib.pyplot as plt # Données x = [1, 2, 3, 4, 5] y = [2, 3, 5, 7, 11] # Création du graphique plt.plot(x, y) # Ajout de titres plt.title('Graphique simple') plt.xlabel(\"L'axe X\") plt.ylabel(\"L'axe Y\") # Affichage du graphique plt.show() Méthode Description plt.title('Graphique simple') Ajoute un titre au graphique avec le texte ‘Graphique simple’. plt.xlabel(\"L'axe X\") Ajoute une étiquette à l’axe des abscisses (x) avec le texte “L’axe X”. plt.ylabel(\"L'axe Y\") Ajoute une étiquette à l’axe des ordonnées (y) avec le texte “L’axe Y”. Personnalisation des styles de ligne et des couleurs Matplotlib permet de personnaliser les styles de ligne et les couleurs.\nimport matplotlib.pyplot as plt # Données x = [1, 2, 3, 4, 5] y = [2, 3, 5, 7, 11] # Création du graphique avec personnalisation plt.plot(x, y, color='green', linestyle='--', marker='o') # Ajout de titres plt.title('Graphique personnalisé') plt.xlabel(\"L'axe X\") plt.ylabel(\"L'axe Y\") # Affichage du graphique plt.show() Méthode Description plt.plot(x, y, color='green', linestyle='--', marker='o') Crée un graphique en ligne avec les valeurs de x et y, en utilisant des paramètres supplémentaires pour personnaliser l’apparence de la ligne : color='green' pour la couleur verte, linestyle='--' pour une ligne en pointillés, et marker='o' pour des marqueurs en forme de cercle sur chaque point de données. Liste de marqueurs\nVoici un tableau de quelques marqueurs possibles:\nMarqueur Description '.' Point ',' Pixel 'o' Cercle 'v' Triangle 's' Carré 'p' Pentagone '*' Étoile 'h', 'H' Hexagone '+' Plus 'x' Croix 'D', 'd' Diamant '|' Ligne verticale '_' Ligne horizontale Ajout de légende import matplotlib.pyplot as plt # Données x = [1, 2, 3, 4, 5] y = [2, 3, 5, 7, 11] # Création du graphique avec personnalisation plt.plot(x, y, color='green', linestyle='--', marker='o', label='Croissance') # Ajout de titres plt.title('Graphique personnalisé') plt.xlabel(\"L'axe X\") plt.ylabel(\"L'axe Y\") # Ajout de la légende plt.legend() # Affichage du graphique plt.show() Définir les étiquettes de graduations des axes x et y Les fonctions xticks() et yticks() sont utilisées pour obtenir ou définir les étiquettes des graduations sur les axes x et y d’un graphique.\nimport matplotlib.pyplot as plt # Exemple de données x = [0, 1, 2, 3, 4] y = [10, 20, 25, 30, 40] plt.plot(x, y) # Définir les étiquettes des graduations de l'axe x plt.xticks([0, 1, 2, 3, 4], ['A', 'B', 'C', 'D', 'E']) # Définir les étiquettes des graduations de l'axe y plt.yticks([10, 20, 30, 40], ['Dix', 'Vingt', 'Trente', 'Quarante']) plt.show() Méthode Description plt.xticks Définit ou obtient les étiquettes des graduations de l’axe x. plt.yticks Définit ou obtient les étiquettes des graduations de l’axe y. Pause 5 minutes Création de graphiques multiples Vous pouvez créer plusieurs graphiques dans une seule figure en utilisant subplot().\nimport matplotlib.pyplot as plt # Données x = [1, 2, 3, 4, 5] y1 = [2, 3, 5, 7, 11] y2 = [1, 4, 6, 8, 10] # Création de la figure plt.figure() # Premier graphique plt.subplot(2, 1, 1) plt.plot(x, y1) plt.title('Premier graphique') # Deuxième graphique plt.subplot(2, 1, 2) plt.plot(x, y2) plt.title('Deuxième graphique') # Affichage des graphiques plt.tight_layout() plt.show() Méthode Description plt.figure() Crée une nouvelle figure dans laquelle vous pouvez tracer vos graphiques. plt.subplot(2, 1, 2) Crée un sous-graphique dans une grille de 2 lignes et 1 colonne, et place ce sous-graphique dans la deuxième position (en bas). Cela permet de créer plusieurs graphiques dans une seule figure. plt.tight_layout() Ajuste automatiquement les paramètres des sous-graphiques pour qu’ils s’adaptent proprement à la zone de la figure, en évitant les chevauchements entre les étiquettes, les titres et les axes. Sauvegarde du graphique Vous pouvez sauvegarder le graphique dans un fichier en utilisant savefig().\nimport matplotlib.pyplot as plt # Données x = [1, 2, 3, 4, 5] y = [2, 3, 5, 7, 11] # Création du graphique plt.plot(x, y) # Ajout de titres plt.title('Graphique à sauvegarder') plt.xlabel(\"L'axe X\") plt.ylabel(\"L'axe Y\") # Sauvegarde du graphique plt.savefig('graphique.png') # Affichage du graphique plt.show() Méthode Description plt.savefig Enregistre le graphique actuel dans le fichier spécifié. Le format du fichier peut être PNG, JPG, PDF, SVG, etc. On peut inclure un chemin pour spécifier où enregistrer le fichier. Les différents types de graphiques En plus des graphiques de type ligne, Matplotlib permet de créer une multitude d’autres graphiques.\nHistogramme import matplotlib.pyplot as plt donnees = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5] plt.hist(donnees, bins=5, range=(1, 5), density=False, cumulative=False, color='green', edgecolor='black') plt.xlabel('Valeurs') plt.ylabel('Fréquence') plt.title('Histogramme') plt.show() Méthode Description plt.hist Fonction pour créer un histogramme à partir des données fournies. donnees: Les données à analyser et à représenter sous forme d’histogramme. bins=5le nombre de barres dans l’histogramme. range=(1, 5) la plage de valeurs à inclure dans l’histogramme. density=False: Si True, l’histogramme affiche une densité de probabilité plutôt que le nombre brut d’observations. cumulative=False Si True, l’histogramme est cumulatif, affichant la somme des fréquences jusqu’à chaque point. color='green'et edgecolor='black'couleurs des barres de l’histogramme et des contours des barres. Graphique en barres import matplotlib.pyplot as plt categories = ['A', 'B', 'C', 'D'] valeurs = [3, 7, 5, 4] plt.bar(categories, valeurs) plt.xlabel('Catégories') plt.ylabel('Valeurs') plt.title('Graphique en barres') plt.show() Méthode Description plt.bar Fonction pour créer un diagramme à barres. categories: la liste des catégories ou étiquettes pour chaque barre. valeurs: La liste des valeurs correspondant à la hauteur de chaque barre. Différence entre un histogramme et un graphique en barres Histogramme : Utilisé pour montrer la distribution d’un ensemble de données continues. Les données sont regroupées en intervalles, et chaque barre représente le nombre de données dans chaque intervalle. Par exemple, un histogramme peut montrer la distribution des âges d’un groupe de personnes.\nGraphique en barres : Utilisé pour comparer des catégories distinctes. Chaque barre représente une catégorie et la hauteur de la barre montre la valeur de cette catégorie. Par exemple, un graphique en barres peut montrer les ventes de différents produits.\nEn résumé, un histogramme montre la distribution d’un ensemble de données continues, tandis qu’un graphique en barres compare des catégories distinctes.\nGraphique en secteurs import matplotlib.pyplot as plt # Données etiquettes = ['A', 'B', 'C', 'D'] tailles = [15, 30, 45, 10] secteur = (0, 0.1, 0, 0) # Décale le deuxième secteur # Création du graphique en secteurs plt.pie(tailles, explode=secteur, labels=etiquettes, colors=['gold', 'yellowgreen', 'lightcoral', 'lightskyblue'], autopct='%1.1f%%', shadow=True, startangle=140) plt.axis('equal') # Assure que le graphique est circulaire plt.title('Graphique en secteurs') plt.show() Voici une explication simple des deux méthodes plt.pie et plt.axis('equal') dans Matplotlib, présentée sous forme de tableau :\nMéthode Description plt.pie Fonction pour créer un graphique circulaire (camembert). tailles: Les valeurs déterminant la taille de chaque secteur (portion) du camembert. explode=secteur: Liste déterminant quelle portion est décalée (mise en avant). labels=etiquettes: Étiquettes pour chaque secteur, décrivant ce que chaque portion représente. colors: Liste des couleurs utilisées pour chaque secteur. autopct='%1.1f%%': Affiche le pourcentage de chaque secteur à l’intérieur de celui-ci, formaté à une décimale près. shadow=True: Ajoute une ombre au graphique pour un effet de profondeur. startangle=140: Angle de départ pour le premier secteur. plt.axis('equal') Assure que le graphique est parfaitement circulaire en réglant les axes x et y à la même échelle. Graphique en nuages de points import matplotlib.pyplot as plt x = [1, 2, 3, 4, 5] y = [2, 3, 5, 7, 11] tailles = [20, 50, 80, 200, 500] plt.scatter(x, y, s=tailles) plt.xlabel('Axe x') plt.ylabel('Axe y') plt.title('Graphique en nuage de points') plt.show() Méthode Description plt.scatter utilisée pour tracer un graphique en nuage de points. x et y : les coordonnées des points sur le graphique. - s=tailles : L’argument s définit la taille des marqueurs de chaque point. Cela peut être une valeur unique qui s’applique à tous les points, ou une liste de valeurs qui spécifie une taille différente pour chaque point. Quelques méthodes Méthode Description plt.plot() Crée un graphique linéaire. plt.hist() Crée un histogramme. plt.bar() Crée un graphique en barres. plt.scatter() Crée un graphique en dispersion. plt.xlabel() Ajoute une étiquette à l’axe des abscisses. plt.ylabel() Ajoute une étiquette à l’axe des ordonnées. plt.title() Ajoute un titre au graphique. plt.show() Affiche le graphique. plt.savefig() Enregistre le graphique sous forme d’image. fig, ax = plt.subplots() Crée une figure et des axes, permettant des graphes plus complexes. fig = plt.figure(figsize=(width, height) figsize : Une tuple (largeur, hauteur) en pouces, définissant la taille de la figure. plt.grid() Afficher ou masquer la grille quadrillée sur un graphique. Pour tout savoir sur Matplotlib: Site officiel Matplotlib.\nPause 5 minutes",
    "description": "Matplotlib est une bibliothèque de visualisation de données en Python qui permet de créer une grande variété de graphiques.\nInstallation de Matplotlib (déjà fait sur les ordinateurs du cégep) Avant de commencer, assurez vous d’avoir Matplotlib installé. Vous pouvez l’installer via pip :\npip install matplotlib Importation de Matplotlib Pour utiliser Matplotlib, vous devez en premier l’importer dans votre code.",
    "tags": [],
    "title": "Matpotlib",
    "uri": "/semaine12/matplotlib/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Matplotlib",
    "content": "La bibliothèque Matplotlib\nFichier ventes.csv",
    "description": "La bibliothèque Matplotlib\nFichier ventes.csv",
    "tags": [],
    "title": "ATELIERS",
    "uri": "/semaine12/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e NumPy",
    "content": "NumPy (Numerical Python) est une bibliothèque pour le calcul scientifique en Python. Elle offre des structures de données (Tableaux et Matrices), des fonctions mathématiques pour manipuler les structures de données.\nInstallation Pour installer NumPy, utilisez pip:\npip install numpy Création et manipulation de Tableaux Création de tableaux:\nimport numpy as np # Création d'un tableau 1D a = np.array([1, 2, 3, 4, 5]) # Création d'un tableau 2D (Matrice) b = np.array([[1, 2, 3], [4, 5, 6]]) print(a) print(b) [1 2 3 4 5] [[1 2 3] [4 5 6]] Accès aux éléments:\n# Accès à un élément du tableau 1D print(a[2]) # Affiche: 3 # Accès à un élément du tableau 2D print(b[1, 2]) # Affiche: 6 Opérations mathématiques:\n# Addition c = a + 10 print(c) # Affiche: [11 12 13 14 15] # Multiplication d = a * 2 print(d) # Affiche: [ 2 4 6 8 10] # Racine carrée e = np.sqrt(a) print(e) # Affiche: [1. 1.41421356 1.73205081 2. 2.23606798] Statistiques:\n# Moyenne print(np.mean(a)) # Affiche: 3.0 # Écart-type print(np.std(a)) # Affiche: 1.4142135623730951 # Somme print(np.sum(a)) # Affiche: 15 Manipulation de la forme des tableaux:\n# Redimensionnement b_reshaped = b.reshape(3, 2) print(b_reshaped) # Transpose b_transposed = b.T print(b_transposed) b transformé : [[1 2] [3 4] [5 6]] b transposé : [[1 4] [2 5] [3 6]] Tableau des fonctions et méthodes incontournables Méthode Description np.array() Crée un tableau NumPy à partir d’une liste ou d’une liste de listes. np.mean() Calcule la moyenne des éléments du tableau. np.std() Calcule l’écart-type des éléments du tableau. np.sum() Calcule la somme des éléments du tableau. np.sqrt() Calcule la racine carrée des éléments du tableau. np.reshape() Change la forme du tableau sans modifier ses données. np.transpose() Transpose le tableau (intervertit les lignes et les colonnes). np.arange() Crée un tableau contenant une séquence d’entiers. np.linspace() Crée un tableau contenant une séquence de valeurs régulièrement espacées. np.random.random() Génère un tableau de dimensions spécifiées rempli de nombres aléatoires compris entre 0 et 1. Exercices Pratiques Exercice 1: Analyse des données de précipitations Objectif: Calculer des statistiques descriptives des précipitations et visualiser les données.\nDonnées: Un fichier CSV nommé precipitations.csv contenant les colonnes Année et Précipitation (en mm).\nInstructions:\nCharger les données:\nimport numpy as np import pandas as pd df = pd.read_csv('precipitations.csv') precipitations = df['Précipitation'].values Calculer des statistiques descriptives:\nmoyenne = np.mean(precipitations) ecart_type = np.std(precipitations) somme = np.sum(precipitations) print(f'Moyenne: {moyenne}, Écart-type: {ecart_type}, Somme: {somme}') Visualiser les données avec Matplotlib:\nimport matplotlib.pyplot as plt plt.plot(df['Année'], precipitations) plt.xlabel('Année') plt.ylabel('Précipitation (mm)') plt.title('Précipitations annuelles') plt.show() Exercice 2: Analyse des données de patients Objectif: Étudier la distribution d’âges des patients et comparer les taux de cholestérol par groupe d’âge.\nDonnées: Un fichier CSV nommé patients.csv contenant les colonnes Age, Sexe, Cholestérol.\nInstructions:\nCharger les données:\nimport numpy as np import pandas as pd df = pd.read_csv('patients.csv') ages = df['Age'].values cholesterol = df['Cholestérol'].values Calculer des statistiques descriptives pour les âges:\nage_moyen = np.mean(ages) age_ecart_type = np.std(ages) print(f'Âge moyen: {age_moyen}, Écart-type: {age_ecart_type}') Créer des groupes d’âge:\nbins = np.arange(0, 101, 20) groups = np.digitize(ages, bins) Calculer la moyenne de cholestérol par groupe d’âge:\ncholesterol_moyen_par_groupe = [np.mean(cholesterol[groups == i]) for i in range(1, len(bins))] Visualiser les données avec Matplotlib:\nimport matplotlib.pyplot as plt plt.bar(range(len(cholesterol_moyen_par_groupe)), cholesterol_moyen_par_groupe, tick_label=[f'{bins[i]}-{bins[i+1]-1}' for i in range(len(bins)-1)]) plt.xlabel('Groupe d\\'âge') plt.ylabel('Cholestérol moyen (mg/dL)') plt.title('Cholestérol moyen par groupe d\\'âge') plt.show()",
    "description": "NumPy (Numerical Python) est une bibliothèque pour le calcul scientifique en Python. Elle offre des structures de données (Tableaux et Matrices), des fonctions mathématiques pour manipuler les structures de données.\nInstallation Pour installer NumPy, utilisez pip:\npip install numpy Création et manipulation de Tableaux Création de tableaux:\nimport numpy as np # Création d'un tableau 1D a = np.array([1, 2, 3, 4, 5]) # Création d'un tableau 2D (Matrice) b = np.array([[1, 2, 3], [4, 5, 6]]) print(a) print(b) [1 2 3 4 5] [[1 2 3] [4 5 6]] Accès aux éléments:",
    "tags": [],
    "title": "NumPy",
    "uri": "/semaine13/numpy2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e NumPy",
    "content": "Qu’est-ce que NumPy? NumPy, ou Numerical Python, est une bibliothèque essentielle pour le calcul scientifique en Python. Elle permet de travailler efficacement avec des tableaux multidimensionnels et offre une large gamme de fonctions mathématiques pour effectuer des opérations sur ces tableaux.\nNumPy permet de :\nManipuler des données de manière efficace. Effectuer des opérations mathématiques et statistiques avancées. Travailler avec des données multidimensionnelles. Intégrer facilement avec d’autres bibliothèques et outils de data science. Utilisation de NumPy Pour commencer, vous devez importer dans votre script Python :\nimport numpy as np Pour vérifier que NumPy est bien installé sur votre environnement :\n# Version de NumPy np.__version__ Vous devriez voir la version installée sous la forme de 1.XX.X. Si tel n’est pas le cas, il faudra installer Numpy comme ceci :\npip install numpy Les bases de NumPy Les tableaux NumPy Un tableau NumPy (ou ndarray pour n-dimensional array) est une grille de valeurs, toutes du même type, et est indexée par un tuple de nombres non négatifs. Les dimensions d’un tableau sont appelées axes.\nTout comme nous avons créé des listes en Python, il est possible de créer des tableaux avec Numpy. La différence réside dans la rapidité de traitement lorsqu’il s’agit de travailler avec des données en grande quantité. En effet, Numpy a été développé de sorte que les calculs soient plus rapides.\nIci, nous allons manipuler des tableaux à 1 et 2 dimensions.\nCréation de tableaux Tableau à 1 dimension : np.array()\n# Tableau à une dimension tab_1d = np.array([5, 4, 2, 8]) print(tab_1d) Tableau à 2 dimensions : np.array()\n# Tableau à deux dimension tab_2d = np.array([[5, 4, 2, 8],[7, 10, 3, 5][8, 7, 4, 1]]) print(tab_2d) D’autres créations de tableaux : np.array()\n# À partir d'une liste tab_liste = np.array([1, 2, 3]) print(tab_liste) # Affiche # Tableaux de zéros et de uns tab_zeros = np.zeros((2, 3)) print(tab_zeros) # Affiche tab_uns = np.ones((2, 3)) print(tab_uns) # Affiche # Tableau vide (initialisé avec des valeurs aléatoires proches de zéro) : tab_vide = np.empty((2, 3)) print(tab_vide) # Affiche par exemple # Tableau avec une plage de valeurs tab_plage = np.arange(0, 10, 2) print(tab_plage) # Affiche # Tableau avec des valeurs espacées linéairement tab_espace = np.linspace(0, 1, 5) print(tab_espace) # Affiche Vous pouvez également convertir le type de données d’un tableau existant :\ntab_converti = tab_liste.astype(np.float64) print(\"Tableau converti en flottants:\", tab_converti) # Affiche La forme, la taille et la dimension d’un tableau Les tableaux NumPy ont plusieurs attributs importants :\nshape : les formes du tableau. size : le nombre total d’éléments (taille) dans le tableau. ndim : le nombre d’axes (dimensions) du tableau. Pour connaître la forme de notre tableau :\n# Retourne la forme du tableau np.shape(tab_2d) # Affiche (3, 4). Notre tableau comporte 2 lignes et 4 colonnes. Pour connaître la taille de notre tableau :\n# Retourne la forme du tableau np.size(tab_2d) # Affiche 12 comme le nombre d'éléments de notre tableau Pour connaître la dimension de notre tableau :\n# Retourne la forme du tableau np.ndim(tab_2d) # Affiche 2 comme le nombre de dimensions de notre tableau Accès aux éléments et découpage (Slicing) du tableau L’indexation et le slicing sont des opérations essentielles pour manipuler les tableaux NumPy.\n1. Accès indicé Comme tous tableaux, il est possible d’accéder aux éléments à l’aide des index.\nPour notre tableau à 1 dimension, rien de plus simple : # Accès au premier élément tab_1d[0] # Affiche 5 tab_1d[2] # Affiche 2 Pour notre tableau à 2 dimensions, ils existent bien plus d’éléments à savoir : # Accès à la première ligne print(tab_2d[0]) # Affiche [5 4 2 8] De ce fait, si je souhaite accéder à la première “case” de mon tableau :\n# Accès au premier élément de notre tableau à 2 dimensions print(tab_2d[0][0]) # Affiche 5 2. Découpage du tableau Il faut savoir qu’un tableau comporte des axes (axis).\nNous avons vu que lorsque nous utilisons la fonction shape(), le premier élément correspond aux lignes et le deuxième aux colonnes du tableau. De ce fait, l’axe 0 correspond aux lignes et l’axe 1 aux colonnes de mon tableau.\nprint(tab_2d[:, 0]) # Affiche [5 7 8] soit la première colonne print(tab_2d[0, :]) # Affiche [5 4 2 8] soit la première ligne print(tab_2d[:, 0:2]) # # Affiche [[5 4][7 10][8 7]] print(tab_2d[0:2, :]) # Affiche [[5 4 2 8][7 10 3 5]] 3. Indexation booléenne L’indexation booléenne consiste à interroger notre tableau pour qu’il nous retourne “Vrai” ou “Faux” sous la forme d’un masque booléen. Par la suite, nous pourrons effectuer des modifications basées sur celui-ci.\nprint(tab_2d \u003c 7) [[ True True True False] [False False True True] [False False True True]] A partir de ce masque, je peux modifier toutes les valeurs de ce tableau qui sont inférieures à 7 et les remplacer par des valeurs égales à 3.\ntab_2d[tab_2d \u003c 7] = 3 print(tab_2d) Il est aussi possible d’effectuer des tests multiples.\ntab_2d = np.array([[5, 4, 2, 8],[7, 10, 3, 5][8, 7, 4, 1]]) tab_2d[(tab_2d \u003c 7) \u0026 (tab_2d \u003e 3)] = 3 print(tab_2d) Opérations mathématiques et statistiques sur les tableaux NumPy permet d’effectuer des opérations arithmétiques et statistiques directement sur les tableaux :\nMathématiques 1. Somme tab_2d = np.array([[5, 4, 2, 8],[7, 10, 3, 5][8, 7, 4, 1]]) np.sum(tab_2d) # Affiche 64 Il est possible de calculer la somme en fonction d’un axe.\nnp.sum(tab_2d, axis=0) # Affiche [20, 21, 9, 14] soit la somme des colonnes np.sum(tab_2d, axis=1) # Affiche [19, 25, 20] soit la somme des lignes Cette technique pourra être utilisée pour les fonctions suivantes.\n2. Produit np.prod(tab_2d) # Affiche 75264000 3. Sinus np.sin(tab_2d) [[-0.95892427, -0.7568025 , 0.90929743, 0.98935825], [ 0.6569866 , -0.54402111, 0.14112001, -0.95892427], [ 0.98935825, 0.6569866 , -0.7568025 , 0.84147098]] 4. Exponentiel np.exp(tab_2d) [[1.48413159e+02, 5.45981500e+01, 7.38905610e+00, 2.98095799e+03], [1.09663316e+03, 2.20264658e+04, 2.00855369e+01, 1.48413159e+02], [2.98095799e+03, 1.09663316e+03, 5.45981500e+01, 2.71828183e+00]] Statistiques 1. Moyenne np.mean(tab_2d) # Affiche 5.33 2. Médiane np.median(tab_2d) # Affiche 5 3. Variance np.var(tab_2d) # Affiche 6.722222222222222 4. Ecart type np.std(tab_2d) # Affiche 2.592724864350674 5. Coefficient de corrélation np.mean(tab_2d) [[ 1. , 0.1004662 , -0.46380072], [ 0.1004662 , 1. , 0.63540406], [-0.46380072, 0.63540406, 1. ]] Fonctions diverses 1. Valeurs uniques La fonction suivante permet de retourner les valeurs uniques de notre tableaux et de compter le nombre d’occurrences de ces valeurs.\nnp.unique(tab_2d, return_counts=True) array([ 1, 2, 3, 4, 5, 7, 8, 10]), array([1, 1, 1, 2, 2, 2, 2, 1], dtype=int64) 2. Importer un jeu de données Dans la majorité des cas, vous travaillerez avec des données qui vous seront fournies. Ils existent des fonctions qui vous permettent de charger ces données.\nVoici un exemple avec un fichier contenant des données météo très simplifiées réparties sur 7 jours.\ndata = np.loadtxt(\"data.csv\", delimiter=',', skiprows=1) print(data) Les arguments à passer sont :\nle nom du fichier le délimiteur (à vérifier en ouvrant votre fichier) étant donné que notre première ligne est composée de caractère, nous faisons abstraction de celle-ci. Numpy ne prend pas en charge la gestion des données numériques. [[ 1 0 10] [ 2 0 8] [ 3 5 3] [ 4 2 5] [ 5 10 1] [ 6 50 0] [ 7 0 10]] Nous retrouvons notre tableau à deux dimensions avec les données chargées dans notre variable data.\nListe non exhaustive de fonctions Numpy est doté d’une grande quantité de fonction permettant de gérer des tableaux.\nFonctions array() Crée un tableau shape() Retourne la forme du tableau ndim() Retourne le nombre de dimension du tableau size() Retourne le nombre d’éléments dans le tableau zeros() Crée un tableau composé uniquement de 0 ones() Crée un tableau composé uniquement de 1 arange() Génère un tableau avec une suite de nombre en fonction du pas saisi linspace() Génère un tableau avec une suite de nombre en fonction de la quantité saisie random.randn() Génère un tableau avec des nombres basés sur la loi normale centrée réduite sum() Retourne la somme prod() Retourne le produit mean() Retourne la moyenne median() Retourne la médiane var() Retourne la variance std() Retourne l’écart type corrcoef() Retourne la corrélation entre les différentes variables sort() Tri le tableau min() Retourne la valeur minimum max() Retourne la valeur maximum argmin() Retourne l’indice de la valeur minimum argmax() Retourne l’indice de la valeur maximum Pour plus de fonctions : Site officiel Numpy.\nAtelier La bibliothèque NumPy",
    "description": "Qu’est-ce que NumPy? NumPy, ou Numerical Python, est une bibliothèque essentielle pour le calcul scientifique en Python. Elle permet de travailler efficacement avec des tableaux multidimensionnels et offre une large gamme de fonctions mathématiques pour effectuer des opérations sur ces tableaux.\nNumPy permet de :\nManipuler des données de manière efficace. Effectuer des opérations mathématiques et statistiques avancées. Travailler avec des données multidimensionnelles. Intégrer facilement avec d’autres bibliothèques et outils de data science. Utilisation de NumPy Pour commencer, vous devez importer dans votre script Python :",
    "tags": [],
    "title": "NumPy OLD",
    "uri": "/semaine13/numpy/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e NumPy",
    "content": "La génération de nombres aléatoires est une tâche courante en programmation, utilisée dans des domaines variés comme les jeux, les simulations, et les tests. Python offre plusieurs façons de générer des nombres aléatoires, principalement via le module random.\nIntroduction au module random Le module random de Python fournit des fonctions pour générer des nombres pseudo-aléatoires. Pour l’utiliser, vous devez d’abord l’importer :\nimport random Générer des nombres aléatoires Nombres aléatoires entiers Pour générer un nombre entier aléatoire entre deux bornes inclusives, utilisez la fonction randint :\nimport random # Génère un nombre entier aléatoire entre 1 et 10 nombre_aleatoire = random.randint(1, 10) print(nombre_aleatoire) Nombres aléatoires à virgule flottante Pour générer un nombre à virgule flottante entre 0 et 1, utilisez la fonction random :\nimport random # Génère un nombre flottant aléatoire entre 0 et 1 nombre_flottant = random.random() print(nombre_flottant) Pour générer un nombre flottant dans une plage spécifique, utilisez uniform :\nimport random # Génère un nombre flottant aléatoire entre 1.5 et 5.5 nombre_flottant = random.uniform(1.5, 5.5) print(nombre_flottant) Choisir des éléments aléatoires Choisir un élément aléatoire dans une liste La fonction choice permet de sélectionner un élément aléatoire dans une séquence (comme une liste) :\nimport random # Liste d'exemple liste = ['pomme', 'banane', 'cerise', 'datte'] # Choisit un élément aléatoire dans la liste fruit_aleatoire = random.choice(liste) print(fruit_aleatoire) Mélanger une liste Pour mélanger les éléments d’une liste de manière aléatoire, utilisez shuffle :\nimport random # Liste d'exemple liste = [1, 2, 3, 4, 5] # Mélange la liste random.shuffle(liste) print(liste) Générer des échantillons aléatoires Pour sélectionner plusieurs éléments aléatoires sans répétition, utilisez sample :\nimport random # Liste d'exemple liste = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Sélectionne 3 éléments aléatoires de la liste echantillon = random.sample(liste, 3) print(echantillon)",
    "description": "La génération de nombres aléatoires est une tâche courante en programmation, utilisée dans des domaines variés comme les jeux, les simulations, et les tests. Python offre plusieurs façons de générer des nombres aléatoires, principalement via le module random.\nIntroduction au module random Le module random de Python fournit des fonctions pour générer des nombres pseudo-aléatoires. Pour l’utiliser, vous devez d’abord l’importer :",
    "tags": [],
    "title": "Les nombres aléatoires",
    "uri": "/semaine13/nb_aleatoires/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e NumPy",
    "content": "La régression linéaire est une technique statistique utilisée pour modéliser la relation entre une variable dépendante (souvent notée y) et une ou plusieurs variables indépendantes (notées x). En termes simples, c’est une méthode qui permet de tracer une ligne droite (appelée droite de régression) qui s’ajuste le mieux aux données.\nCalcul de la Régression Linéaire (à la main) Concept de base: La formule de la régression linéaire simple est : [ y = ax + b ] où :\ny est la variable dépendante. x est la variable indépendante. a est la pente de la ligne. b est l’ordonnée à l’origine (le point où la ligne coupe l’axe des y). Calcul de a et b: Pour trouver les valeurs de a et b, on utilise les formules suivantes : [ a = \\frac{n(\\sum xy) - (\\sum x)(\\sum y)}{n(\\sum x^2) - (\\sum x)^2} ] [ b = \\frac{(\\sum y)(\\sum x^2) - (\\sum x)(\\sum xy)}{n(\\sum x^2) - (\\sum x)^2} ] où (n) est le nombre de points de données.\nExemple en Python:\n# Données x = [1, 2, 3, 4, 5] y = [2, 3, 5, 7, 11] # Calcul des paramètres n = len(x) sum_x = sum(x) sum_y = sum(y) sum_x_sq = sum([i**2 for i in x]) sum_xy = sum([x[i]*y[i] for i in range(n)]) a = (n * sum_xy - sum_x * sum_y) / (n * sum_x_sq - sum_x**2) b = (sum_y * sum_x_sq - sum_x * sum_xy) / (n * sum_x_sq - sum_x**2) print(f'Pente (a): {a}') print(f'Ordonnée à l\\'origine (b): {b}') Calcul de la Régression Linéaire avec NumPy NumPy simplifie grandement le processus de calcul des paramètres de la régression linéaire. Voici comment :\nUtilisation de NumPy: import numpy as np # Données x = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) # Calcul des paramètres A = np.vstack([x, np.ones(len(x))]).T a, b = np.linalg.lstsq(A, y, rcond=None)[0] print(f'Pente (a): {a}') print(f'Ordonnée à l\\'origine (b): {b}') Exercices Pratiques Exercice 1: Régression linéaire en biologie Objectif: Trouver la relation entre la concentration d’un nutriment dans le sol et la croissance des plantes.\nDonnées: Un fichier CSV nommé plantes.csv contenant les colonnes Concentration (en ppm) et Croissance (en cm).\nInstructions:\nCharger les données:\nimport pandas as pd df = pd.read_csv('plantes.csv') x = df['Concentration'].values y = df['Croissance'].values Effectuer la régression linéaire sans bibliothèques:\nn = len(x) sum_x = sum(x) sum_y = sum(y) sum_x_sq = sum(x**2) sum_xy = sum(x * y) m = (n * sum_xy - sum_x * sum_y) / (n * sum_x_sq - sum_x**2) b = (sum_y * sum_x_sq - sum_x * sum_xy) / (n * sum_x_sq - sum_x**2) print(f'Pente (m): {m}') print(f'Ordonnée à l\\'origine (b): {b}') Effectuer la régression linéaire avec NumPy:\nimport numpy as np A = np.vstack([x, np.ones(len(x))]).T m, b = np.linalg.lstsq(A, y, rcond=None)[0] print(f'Pente (m): {m}') print(f'Ordonnée à l\\'origine (b): {b}') Visualiser les résultats:\nimport matplotlib.pyplot as plt plt.scatter(x, y, label='Données') plt.plot(x, m*x + b, color='red', label='Régression linéaire') plt.xlabel('Concentration (ppm)') plt.ylabel('Croissance (cm)') plt.title('Croissance des plantes en fonction de la concentration de nutriments') plt.legend() plt.show() Exercice 2: Régression linéaire en santé Objectif: Trouver la relation entre l’âge et le taux de cholestérol.\nDonnées: Un fichier CSV nommé sante.csv contenant les colonnes Age et Cholestérol.\nInstructions:\nCharger les données:\nimport pandas as pd df = pd.read_csv('sante.csv') x = df['Age'].values y = df['Cholestérol'].values Effectuer la régression linéaire sans bibliothèques:\nn = len(x) sum_x = sum(x) sum_y = sum(y) sum_x_sq = sum(x**2) sum_xy = sum(x * y) m = (n * sum_xy - sum_x * sum_y) / (n * sum_x_sq - sum_x**2) b = (sum_y * sum_x_sq - sum_x * sum_xy) / (n * sum_x_sq - sum_x**2) print(f'Pente (m): {m}') print(f'Ordonnée à l\\'origine (b): {b}') Effectuer la régression linéaire avec NumPy:\nimport numpy as np A = np.vstack([x, np.ones(len(x))]).T m, b = np.linalg.lstsq(A, y, rcond=None)[0] print(f'Pente (m): {m}') print(f'Ordonnée à l\\'origine (b): {b}') Visualiser les résultats:\nimport matplotlib.pyplot as plt plt.scatter(x, y, label='Données') plt.plot(x, m*x + b, color='red', label='Régression linéaire') plt.xlabel('Age') plt.ylabel('Cholestérol (mg/dL)') plt.title('Cholestérol en fonction de l\\'âge') plt.legend() plt.show()",
    "description": "La régression linéaire est une technique statistique utilisée pour modéliser la relation entre une variable dépendante (souvent notée y) et une ou plusieurs variables indépendantes (notées x). En termes simples, c’est une méthode qui permet de tracer une ligne droite (appelée droite de régression) qui s’ajuste le mieux aux données.\nCalcul de la Régression Linéaire (à la main) Concept de base: La formule de la régression linéaire simple est : [ y = ax + b ] où :",
    "tags": [],
    "title": "Régression linéaire avec NumPy",
    "uri": "/semaine13/reglin/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Semaine 1 - Analyse de problèmes\nSemaine 2 - Ordinogrammes\nSemaine 2 - Base de Python\nSemaine 3 - Input() et print() Semaine 3 - Erreurs de syntaxe Semaine 4 - Expressions booléennes\nSemaine 4 - IF-ELIF-ELSE\nSemaine 4 - Tests de nombres flottants\nSemaine 5 - Boucle while\nSemaine 5 - Boucle for\nSemaine 5 - Instructions break, continue et else\nSemaine 6 - Listes - La base\nSemaine 6 - Listes - En sciences\nSemaine 6 - Listes - Système solaire\nSemaine 6 - Les chaines de caractères\nSemaine 7 - Révision Exercice 1\nSemaine 7 - Révision Exercice 1 avec utilisation de lower()\nSemaine 7 - Révision Exercice 1_V2\nSemaine 7 - Révision Exercice 2\nSemaine 8 - Fonctions\nSemaine 8 - Portées des variables\nSemaine 9 - Débogage avec print()\nSemaine 11 - Pandas\nSemaine 12 - Matplotlib",
    "description": "Semaine 1 - Analyse de problèmes\nSemaine 2 - Ordinogrammes\nSemaine 2 - Base de Python\nSemaine 3 - Input() et print() Semaine 3 - Erreurs de syntaxe Semaine 4 - Expressions booléennes\nSemaine 4 - IF-ELIF-ELSE\nSemaine 4 - Tests de nombres flottants\nSemaine 5 - Boucle while\nSemaine 5 - Boucle for\nSemaine 5 - Instructions break, continue et else",
    "tags": [],
    "title": "Solutions des ateliers",
    "uri": "/solutions-ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Ici vous trouverez diverses informations sur Python et sur les outils utilisés dans le cours ou que vous pouvez utiliser sur votre ordinateur personnel à la maison.\nCette section est divisée en trois catégories:\n1. Langage de programmation 2. Outils 3. Lexique",
    "description": "Ici vous trouverez diverses informations sur Python et sur les outils utilisés dans le cours ou que vous pouvez utiliser sur votre ordinateur personnel à la maison.\nCette section est divisée en trois catégories:\n1. Langage de programmation 2. Outils 3. Lexique",
    "tags": [],
    "title": "Base de connaissances",
    "uri": "/bases/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances",
    "content": "Dans cette section, vous trouverez des informations relatives au langage de programmation Python. Dans certains cas, il peut s’agir de compléments au cours, dans d’autres, des notions plus avancées.",
    "description": "Base - Langage de programmation",
    "tags": [],
    "title": "1. Langage de programmation",
    "uri": "/bases/langage-de-prog/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances",
    "content": "Ici se trouve des informations sur les outils utilisés dans ce cours, pouvant vous être utiles.",
    "description": "Base - Outils",
    "tags": [],
    "title": "2. Outils",
    "uri": "/bases/outils/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances",
    "content": "Lexique de termes informatiques Voici le lexique réécrit en ordre alphabétique :\nAlgorithme Une série d’instructions définies pour résoudre un problème ou effectuer une tâche spécifique. Appel de fonction L’appel d’une fonction consiste à invoquer une fonction définie ailleurs dans le code pour qu’elle effectue une tâche spécifique. Lors de l’appel, on peut passer des arguments à la fonction, qui sont des valeurs ou des variables que la fonction utilisera pour effectuer ses opérations. La fonction peut ensuite retourner une valeur en guise de résultat. Booléen Un type de donnée qui ne peut prendre que deux valeurs : true (vrai) ou false (faux). Utilisé pour les conditions et les tests logiques. Boucle Une structure de contrôle qui permet de répéter une série d’instruction. En Python, les boucles sont for, while. D’autres langages de programmation incluent la boucle do-while. Classe Une structure qui permet de créer des objets en définissant leurs propriétés (attributs) et leurs comportements (méthodes). Utilisée dans la programmation orientée objet. Commentaire Lignes dans le code qui ne sont pas exécutées par python. Les commentaires sont utilisés pour expliquer et documenter le code, ce qui le rend plus lisible et compréhensible pour les autres développeurs (ou pour vous-même lorsque vous revenez sur votre code plus tard). Il sont aussi utilisés pour empêcher l’exécution (désactiver) de lignes de code lors du débogage. Il existe deux types de commentaires en Python : Commentaires sur une seule ligne : Ils commencent par le symbole # et continuent jusqu’à la fin de la ligne. Commentaires sur plusieurs lignes : Ils sont généralement créés en utilisant des chaînes de caractères multi-lignes (triple guillemets \"\"\" ou '''). Bien que ces chaînes ne soient pas techniquement des commentaires, elles sont souvent utilisées à cette fin. Compilateur Un programme qui traduit le code source écrit dans un langage de programmation en code machine exécutable par un ordinateur. Concaténation Action de mettre bout à bout deux chaînes de caractères ou plus pour en former une seule. Par exemple, concaténer “Hello” et “World” donne “HelloWorld”. Débogage Le processus de recherche et de correction des erreurs (ou “bugs”) dans un programme. Déclaration de variable Une instruction qui permet de créer une variable et de lui attribuer un nom. Cette déclaration réserve un espace en mémoire pour stocker une valeur qui peut être utilisée et modifiée au cours de l’exécution du programme. Décrémentation Action de diminuer la valeur d’une variable, généralement par un certain pas, souvent de 1. Docstring Une chaîne de caractères utilisée pour documenter un module, une classe ou une fonction dans le code source. Elle est généralement placée immédiatement après la définition de l’élément qu’elle documente et est utilisée pour expliquer son fonctionnement, ses paramètres et ses retours. Encapsulation Un concept fondamental en programmation orientée objet. Elle consiste à cacher les détails de l’implémentation d’un objet et à n’exposer que les aspects nécessaires pour interagir avec cet objet. Cela signifie que les données internes d’un objet sont protégées contre les modifications non autorisées et que l’accès à ces données se fait uniquement par des méthodes définies. Flottant Un type de donnée qui représente un nombre avec une partie décimale. Par exemple, 3.14 est un nombre flottant. Fonction Un bloc de code réutilisable qui effectue une tâche spécifique. Les fonctions peuvent prendre des paramètres et retourner des valeurs. IDE (Environnement de Développement Intégré) Un logiciel qui fournit des outils complets pour le développement de logiciels, incluant un éditeur de code, un débogueur, et souvent un compilateur. Imbrication Fait référence à la pratique consistant à placer une structure de code à l’intérieur d’une autre. Cela peut inclure des boucles, des conditions, des fonctions, ou même des ensembles de données. Incrémentation Action d’augmenter la valeur d’une variable, généralement par un certain pas, souvent de 1. Indentation Utilisation de tabulations au début des lignes de code pour indiquer la structure et la hiérarchie du code, notamment dans les boucles, les conditions, et les fonctions. En Python, l’indentation est essentielle pour définir les blocs de code. Itérable Qui peut subir une itération, être répété. Itération Répétition d’un processus ou d’une série d’instructions dans un programme informatique, souvent dans le cadre d’une boucle. Méthode Une fonction définie à l’intérieur d’une classe en programmation orientée objet. Les méthodes définissent les comportements des objets créés à partir de la classe. Ordinogramme Un diagramme qui représente graphiquement les étapes d’un algorithme ou d’un processus. Aussi appelé diagramme de flux ou flowchart. Pseudo-code Une manière informelle de décrire un algorithme en utilisant un mélange de langage naturel et de structures de programmation. Le pseudo-code aide à planifier et à comprendre le fonctionnement d’un algorithme sans se soucier de la syntaxe exacte d’un langage de programmation. Récursivité Une technique de programmation où une fonction s’appelle elle-même pour résoudre un problème. Cette méthode est souvent utilisée pour résoudre des problèmes complexes en les décomposant en sous-problèmes plus simples. Retour de fonction C’est la valeur ou l’ensemble de valeurs qu’une fonction renvoie après son exécution. Cette valeur est souvent utilisée pour continuer le traitement ou pour obtenir un résultat spécifique à partir de la fonction appelée. String Un type de donnée qui représente une chaîne de caractères. Par exemple, “Hello, World!” est une string. Variable Un espace de stockage nommé qui peut contenir une valeur. Les variables permettent de manipuler et de stocker des données dans un programme.",
    "description": "Base - Lexique",
    "tags": [],
    "title": "3. Lexique",
    "uri": "/bases/lexique/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Blocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python exécutable sur un canevas appelé notebook.\nVisual Studio Code prend en charge l’utilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.\nCréer, ouvrir et enregistrer des blocs-notes Jupyter Utiliser des cellules de code Jupyter Afficher, inspecter et filtrer les variables à l’aide de l’Explorateur de variables et de la visionneuse de données Se connecter à un serveur Jupyter distant Déboguer un bloc-notes Jupyter Configuration de votre environnement Pour utiliser Python dans Jupyter Notebooks, vous devez activer un environnement Anaconda dans VS Code ou un autre environnement Python dans lequel vous avez installé le package Jupyter. Pour sélectionner un environnement, utilisez la commande Python : Sélectionner un interpréteur dans la palette de commandes (Ctrl+Maj+P).\nUne fois l’environnement approprié activé, vous pouvez créer et ouvrir un bloc-notes Jupyter, vous connecter à un serveur Jupyter distant pour exécuter des cellules de code et exporter un bloc-notes Jupyter sous forme de fichier Python.\nApprobation de l’espace de travail Lorsque vous commencez à utiliser Jupyter Notebooks, vous devez vous assurer que vous travaillez dans un espace de travail approuvé. Du code nuisible peut être incorporé dans des blocs-notes et la fonctionnalité d’approbation de l’espace de travail vous permet d’indiquer quels dossiers et leur contenu doivent autoriser ou restreindre l’exécution automatique de code.\nSi vous tentez d’ouvrir un bloc-notes lorsque VS Code se trouve dans un espace de travail non approuvé exécutant le mode restreint, vous ne pourrez pas exécuter de cellules et les sorties enrichies seront masquées.\nCréer ou ouvrir un bloc-notes Jupyter Vous pouvez créer un bloc-notes Jupyter en exécutant la commande Créer : un nouveau bloc-notes Jupyter à partir de la palette de commandes (Ctrl+Maj+P) ou en créant un fichier dans votre espace de travail..ipynb\nEnsuite, sélectionnez un noyau à l’aide du sélecteur de noyau en haut à droite.\nAprès avoir sélectionné un noyau, le sélecteur de langue situé en bas à droite de chaque cellule de code sera automatiquement mis à jour vers la langue prise en charge par le noyau.\nSi vous disposez d’un bloc-notes Jupyter, vous pouvez l’ouvrir en cliquant avec le bouton droit sur le fichier et en l’ouvrant avec VS Code, ou via l’explorateur de fichiers VS Code.\nCellules en cours d’exécution Exécuter une seule cellule de code Une fois votre code ajouté, vous pouvez exécuter une cellule à l’aide de l’icône Exécuter à gauche de la cellule et la sortie sera affichée sous la cellule de code.\nPour exécuter une cellule de code sélectionnée, vous pouvez également utiliser des raccourcis clavier en mode commande et en mode édition.\nCtrl+Entrée exécute la cellule actuellement sélectionnée. Maj+Entrée exécute la cellule actuellement sélectionnée et insère une nouvelle cellule juste en dessous (le focus se déplace vers la nouvelle cellule). Alt+Entrée exécute la cellule actuellement sélectionnée et insère une nouvelle cellule juste en dessous (le focus reste sur la cellule actuelle). Exécuter plusieurs cellules de code L’exécution de plusieurs cellules de code peut être accomplie de plusieurs façons. Vous pouvez utiliser la double flèche dans la barre d’outils principale de l’éditeur de bloc-notes pour exécuter toutes les cellules du bloc-notes ou en sélectionnant Exécuter tout, Exécuter tout au-dessus ou Exécuter tout en dessous au-dessus ou en dessous de la cellule de code actuelle.\nExécuter des cellules dans la section Pour exécuter plus facilement des cellules associées dans un bloc-notes, vous pouvez exécuter des cellules regroupées par un en-tête de section Markdown avec l’action Exécuter les cellules dans la section. Cette action est disponible dans la vue Plan du bloc-notes et pour les éléments Sticky Scroll.\nDans les éléments Sticky Scroll, cliquez avec le bouton droit sur l’en-tête de votre choix et exécutez la section via l’action dans le menu contextuel. Dans la vue Plan, sélectionnez l’icône de barre d’outils qui apparaît au survol ou à la sélection, puis exécutez une seule cellule ou une section de cellules via les actions présentées.\nVidéo: Exécuter des cellules\nEnregistrez votre bloc-notes Jupyter Vous pouvez enregistrer votre bloc-notes Jupyter à l’aide du raccourci clavier Ctrl+S ou Fichier \u003e enregistrer.\nExporter votre bloc-notes Jupyter Vous pouvez exporter un bloc-notes Jupyter sous forme de fichier Python, de fichier PDF ou de fichier HTML. Pour exporter, sélectionnez ... \u003e Exporter dans la barre d’outils principale. Une liste déroulante d’options de format de fichier vous est alors présentée.\nNote: Pour l’exportation PDF, vous devez avoir installé TeX (Installation Tex). Si vous ne le faites pas, vous serez averti que vous devez l’installer lorsque vous sélectionnerez l’option PDF. Sachez également que si vous avez une sortie SVG uniquement dans votre bloc-notes, elle ne sera pas affichée dans le PDF. Pour avoir des graphiques SVG dans un PDF, assurez-vous que votre sortie inclut un format d’image non SVG, ou bien vous pouvez d’abord exporter au format HTML, puis enregistrer au format PDF à l’aide de votre navigateur.\nUtiliser des cellules de code dans l’éditeur de bloc-notes L’éditeur de bloc-notes facilite la création, la modification et l’exécution de cellules de code dans votre bloc-notes Jupyter.\nCréer une cellule de code Par défaut, un bloc-notes vierge aura une cellule de code vide pour commencer et un bloc-notes existant en placera une en bas. Ajoutez votre code à la cellule de code vide pour commencer.\nModes de cellule de code Lorsque vous utilisez des cellules de code, une cellule peut être dans trois états : non sélectionné, mode commande et mode édition. Une barre verticale à gauche d’une cellule de code et de la bordure de l’éditeur indique l’état actuel d’une cellule. Lorsqu’aucune barre n’est visible, la cellule est désélectionnée. Lorsqu’une cellule est sélectionnée, elle peut être en mode commande ou en mode édition.\nEn mode commande, une barre verticale pleine apparaîtra à gauche de la cellule. La cellule peut être utilisée et accepte les commandes au clavier.\nEn mode édition, une barre verticale pleine est reliée par une bordure autour de l’éditeur de cellules. Le contenu de la cellule (code ou Markdown) peut être modifié.\nPour changer de mode, vous pouvez utiliser votre clavier ou votre souris. Sur votre clavier, appuyez sur la touche Entrée pour passer en mode édition ou sur la touche Échap pour passer en mode commande. Avec votre souris, cliquez sur la barre verticale à gauche de la cellule ou en dehors de la zone code/Markdown dans la cellule de code.\nAjouter des cellules de code supplémentaires Vous pouvez ajouter des cellules de code à l’aide de la barre d’outils principale, de la barre d’outils Ajouter une cellule (visible au survol) et des commandes clavier.\nPour ajouter une nouvelle cellule sous la cellule actuellement sélectionnée, utilisez l’icône plus dans la barre d’outils principale ou la barre d’outils de survol d’une cellule.\nLorsqu’une cellule de code est en mode commande, utilisez la touche A pour ajouter une cellule au-dessus et la touche B pour ajouter une cellule au-dessous de la cellule sélectionnée.\nSélectionnez une cellule de code Vous pouvez modifier une cellule de code sélectionnée à l’aide de la souris ou des touches fléchées haut/bas du clavier. Lorsqu’une cellule de code est en mode commande, vous pouvez également utiliser la touche J (bas) et la touche K (haut).\nSélectionner plusieurs cellules de code Pour sélectionner plusieurs cellules, commencez par une cellule en mode sélectionné. Un arrière-plan rempli indique les cellules sélectionnées. Pour sélectionner des cellules consécutives, maintenez la touche Maj enfoncée et cliquez sur la dernière cellule que vous souhaitez sélectionner. Pour sélectionner un groupe de cellules, maintenez la touche Ctrl enfoncée et cliquez sur les cellules que vous souhaitez ajouter à votre sélection.\nDéplacer une cellule de code Vous pouvez déplacer des cellules vers le haut ou vers le bas dans un bloc-notes par glisser-déposer. Pour les cellules de code, la zone de glisser-déposer se trouve à gauche de l’éditeur de cellule, comme indiqué ci-dessous. Pour les cellules Markdown rendues, vous pouvez cliquer n’importe où pour faire glisser et déposer des cellules.\nPour déplacer plusieurs cellules, vous pouvez utiliser les mêmes zones de glisser-déposer dans n’importe quelle cellule incluse dans la sélection.\nLe raccourci clavier Alt+Flèche déplace également une ou plusieurs cellules sélectionnées.\nSupprimer une cellule de code Pour supprimer du code, vous pouvez utiliser l’icône Supprimer dans la barre d’outils de la cellule de code. Lorsque la cellule de code sélectionnée est en mode commande, vous pouvez utiliser le raccourci clavier dd.\nAnnuler votre dernière modification Vous pouvez utiliser la touche z pour annuler votre modification précédente, par exemple, si vous avez effectué une modification accidentelle, vous pouvez l’annuler à l’état correct précédent, ou si vous avez supprimé une cellule accidentellement, vous pouvez la récupérer.\nBasculer entre le code et Markdown L’éditeur de bloc-notes vous permet de modifier facilement les cellules de code entre Markdown et le code. La sélection du sélecteur de langue en bas à droite d’une cellule vous permettra de basculer entre Markdown et, le cas échéant, toute autre langue prise en charge par le noyau sélectionné.\nVous pouvez également utiliser le clavier pour modifier le type de cellule. Lorsqu’une cellule est sélectionnée et en mode commande, la touche M bascule le type de cellule sur Markdown et la touche Y bascule le type de cellule sur code.\nUne fois Markdown défini, vous pouvez entrer du contenu au format Markdown dans la cellule de code.\nPour afficher des cellules Markdown, vous pouvez cocher la barre d’outils de la cellule ou utiliser les raccourcis clavier Ctrl+Entrée et Maj+Entrée.\nEffacer la sortie ou redémarrer/interrompre le noyau Si vous souhaitez effacer toutes les sorties de cellule de code ou redémarrer/interrompre le noyau, vous pouvez le faire à l’aide de la barre d’outils principale de l’éditeur de bloc-notes.\nActiver/désactiver les numéros de ligne Lorsque vous êtes en mode commande, vous pouvez activer ou désactiver la numérotation des lignes dans une seule cellule de code à l’aide de la touche L.\nPour basculer la numérotation des lignes pour l’ensemble du bloc-notes, utilisez Maj+L en mode commande sur n’importe quelle cellule.\nTable des matières Pour naviguer dans votre bloc-notes, ouvrez l’Explorateur de fichiers dans la barre d’activité. Ouvrez ensuite l’onglet Plan dans la barre latérale.\nNote: Par défaut, le plan n’affichera que Markdown. Pour afficher les cellules de code, activez le paramètre suivant : Contour du bloc-notes \u003e : Afficher les cellules de code.\nPrise en charge d’IntelliSense dans l’éditeur de bloc-notes Jupyter La fenêtre Python Jupyter Notebook Editor contient des informations complètes sur IntelliSense : saisie semi-automatique du code, listes de membres, informations rapides sur les méthodes et conseils de paramètre. Vous pouvez être tout aussi productif en tapant dans la fenêtre de l’éditeur de bloc-notes que dans l’éditeur de code.\nExplorateur de variables et visionneuse de données Dans un bloc-notes Python, il est possible d’afficher, d’inspecter, de trier et de filtrer les variables de votre session Jupyter actuelle. En sélectionnant l’icône Variables dans la barre d’outils principale après avoir exécuté le code et les cellules, vous verrez une liste des variables actuelles, qui seront automatiquement mises à jour au fur et à mesure que les variables sont utilisées dans le code. Le volet des variables s’ouvre en bas du bloc-notes.\nVisionneuse de données Pour plus d’informations sur vos variables, vous pouvez également double-cliquer sur une ligne ou utiliser le bouton Afficher la variable dans la visionneuse de données en regard de la variable pour obtenir une vue plus détaillée d’une variable dans la visionneuse de données.\nVous pouvez également utiliser l’expérience de visualisation des données offerte par d’autres extensions comme Data Wrangler. L’extension Data Wrangler offre une interface utilisateur riche pour afficher des informations sur vos données et vous aide à effectuer le profilage des données, les contrôles qualité, les transformations, etc.\nFiltrage des lignes Le filtrage des lignes dans la visionneuse de données peut être effectué en tapant dans la zone de texte en haut de chaque colonne. Tapez une chaîne que vous souhaitez rechercher et toute ligne contenant cette chaîne dans la colonne sera trouvée :\nSi vous voulez trouver une correspondance exacte, faites précéder votre filtre de ‘=’ :\nSauvegarde des parcelles Pour enregistrer un tracé à partir de votre bloc-notes, il suffit de survoler la sortie et de sélectionner l’icône Enregistrer en haut à droite.\nDéboguer un bloc-notes Jupyter Il existe deux façons différentes de déboguer un notebook Jupyter : un mode plus simple appelé « Run by Line » et un mode de débogage complet.\nNote: Ces deux fonctionnalités nécessitent ipykernel 6+.\nDéboguer par ligne Exécuter par ligne vous permet d’exécuter une cellule une ligne à la fois, sans être distrait par d’autres fonctionnalités de débogage VS Code. Pour commencer, sélectionnez le bouton Exécuter par ligne dans la barre d’outils de la cellule :\nUtilisez le même bouton pour avancer d’une déclaration. Vous pouvez sélectionner le bouton Arrêter la cellule pour arrêter plus tôt ou le bouton Continuer dans la barre d’outils pour continuer à s’exécuter jusqu’à la fin de la cellule.\nDéboguer la cellule Si vous souhaitez utiliser l’ensemble complet des fonctionnalités de débogage prises en charge dans VS Code, telles que les points d’arrêt et la possibilité d’effectuer un pas à pas détaillé dans d’autres cellules et modules, vous pouvez utiliser le débogueur VS Code complet.\nCommencez par définir les points d’arrêt dont vous avez besoin en cliquant dans la marge gauche d’une cellule de bloc-notes. Sélectionnez ensuite le bouton Déboguer la cellule dans le menu en regard du bouton Exécuter. Cela exécutera la cellule dans une session de débogage et s’arrêtera sur vos points d’arrêt dans tout code en cours d’exécution, même s’il se trouve dans une autre cellule ou un autre fichier..py Vous pouvez utiliser la vue Déboguer, la console Déboguer et tous les boutons de la barre d’outils Déboguer comme vous le feriez normalement dans VS Code. Rechercher dans le bloc-notes Vous pouvez effectuer une recherche dans un bloc-notes (ou des parties de celui-ci en filtrant les options de recherche) à l’aide du raccourci clavier Ctrl/Cmd + F. Cliquez sur l’option Filtrer (icône en forme d’entonnoir) pour effectuer une recherche dans :\nEntrée de cellule Markdown (Markdown Source) Sortie de cellule Markdown (Markdown rendu) Entrée de cellule de code (Source de cellule de code) Sortie de cellule de code (Sortie de cellule) Les recherches de bloc-notes sont des entrées de cellule filtrées uniquement par défaut.\nRéférence: Documentation de VS Code",
    "description": "Blocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python exécutable sur un canevas appelé notebook.\nVisual Studio Code prend en charge l’utilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.\nCréer, ouvrir et enregistrer des blocs-notes Jupyter Utiliser des cellules de code Jupyter Afficher, inspecter et filtrer les variables à l’aide de l’Explorateur de variables et de la visionneuse de données Se connecter à un serveur Jupyter distant Déboguer un bloc-notes Jupyter Configuration de votre environnement Pour utiliser Python dans Jupyter Notebooks, vous devez activer un environnement Anaconda dans VS Code ou un autre environnement Python dans lequel vous avez installé le package Jupyter. Pour sélectionner un environnement, utilisez la commande Python : Sélectionner un interpréteur dans la palette de commandes (Ctrl+Maj+P).",
    "tags": [],
    "title": "Jupyter",
    "uri": "/bases/outils/jupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage léger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment créer une cellule Markdown Créer une nouvelle cellule : Cliquez sur le bouton “+” dans la barre d’outils pour ajouter une nouvelle cellule. Changer le type de cellule : Cliquez sur le menu déroulant “Code” dans la barre d’outils et sélectionnez “Markdown”. Vous pouvez également utiliser le raccourci clavier Esc puis M. Écrire du texte en Markdown : Tapez votre texte en utilisant la syntaxe Markdown. Exécuter la cellule : Appuyez sur Shift + Enter pour exécuter la cellule et afficher le texte formaté. Les bases du Markdown Titres et sous-titres:\nUtilisez les dièses # pour créer des titres. Le nombre de dièses indique le niveau du titre.\n# Titre de niveau 1 ## Titre de niveau 2 ### Titre de niveau 3 Texte en gras et en italique:\nPour mettre du texte en gras, encadrez-le avec deux astérisques ** ou deux tirets bas __.\n**texte en gras** __texte en gras__ Pour mettre du texte en italique, encadrez-le avec un astérisque * ou un tiret bas _.\n*texte en italique* _texte en italique_ Pour mettre du texte en gras et en italique, encadrez-le avec trois astérisques *** ou trois tirets bas ___.\n***Gras et italique*** ___Gras et italique___ Texte souligné\nEn Markdown, il n’y a pas de syntaxe native pour souligner du texte. Cependant, vous pouvez utiliser des balises HTML pour obtenir cet effet. Voici comment faire :\n\u003cu\u003eTexte souligné\u003c/u\u003e Listes:\nListes à puces:\nUtilisez des tirets -, des astérisques * ou des signes plus + pour créer des listes à puces.\n- Élément 1 - Élément 2 - Élément 3 Listes numérotées:\nUtilisez des chiffres suivis d’un point pour créer des listes numérotées.\n1. Premier élément 2. Deuxième élément 3. Troisième élément Liens et images:\nPour insérer un lien, utilisez la syntaxe suivante :\n[Texte du lien](URL_du_lien) Pour insérer une image, utilisez la syntaxe suivante :\n![Texte alternatif](URL_de_l'image) Blocs de code:\nUtilisez des accents graves ` (backticks) pour insérer du code en ligne :\n`print(\"Hello, World!\")` Tableaux:\nCréez des tableaux en utilisant des barres verticales | et des traits d’union - pour délimiter les en-têtes et les colonnes :\n| En-tête 1 | En-tête 2 | |-----------|-----------| | Cellule 1 | Cellule 2 | | Cellule 3 | Cellule 4 | Citations:\nUtilisez le symbole \u003e pour créer des citations.\n\u003e Ceci est une citation. Formules mathématiques:\nUtilisez LaTeX pour écrire des formules mathématiques. Encadrez vos formules avec des signes dollar $.\n$E = mc^2$ Texte barré: Utilisez deux tildes ~~ pour barrer du texte.\n~~texte barré~~ Blocs de texte surligné: Utilisez trois accents graves ^^^ pour surligner des blocs de texte.\n^^^markdown Exemples pratiques Exemple de titre et de paragraphe # Mon chapitre sur le Markdown Bienvenue dans ce chapitre sur le Markdown dans Jupyter Notebook. Vous apprendrez à formater du texte facilement. Exemple de liste et de lien ## Liste des sujets abordés - Introduction au Markdown - Syntaxe de base - Les titres - Texte en gras et en italique - Les listes - Exemples pratiques - [Documentation officielle](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Working%20With%20Markdown%20Cells.html) Exemple d’image et de bloc de code ## Exemple d'image ![Logo Jupyter](https://jupyter.org/assets/main-logo.svg) ## Exemple de code Python ```python def salut(nom): return f\"Hello, {nom}!\" print(salut(\"world\")) Vidéo YouTube Créer des cellules Markdowns dans Jupyter Notebook",
    "description": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage léger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment créer une cellule Markdown Créer une nouvelle cellule : Cliquez sur le bouton “+” dans la barre d’outils pour ajouter une nouvelle cellule. Changer le type de cellule : Cliquez sur le menu déroulant “Code” dans la barre d’outils et sélectionnez “Markdown”. Vous pouvez également utiliser le raccourci clavier Esc puis M. Écrire du texte en Markdown : Tapez votre texte en utilisant la syntaxe Markdown. Exécuter la cellule : Appuyez sur Shift + Enter pour exécuter la cellule et afficher le texte formaté. Les bases du Markdown Titres et sous-titres:",
    "tags": [],
    "title": "MarkDown",
    "uri": "/bases/outils/markdown/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Dans le document Exercices-supplémentaires.pdf, vous trouverez une trentaine d’exercices afin de plus vous exercer. Les exercices sont regroupés selon leur difficulté (facile, moyenne et difficile)\nVous pouvez télécharger le document ICI",
    "description": "Dans le document Exercices-supplémentaires.pdf, vous trouverez une trentaine d’exercices afin de plus vous exercer. Les exercices sont regroupés selon leur difficulté (facile, moyenne et difficile)\nVous pouvez télécharger le document ICI",
    "tags": [],
    "title": "Exercices supplémentaires (Semaines 1 à 6)",
    "uri": "/exercices-supplementaires/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Utilisation de VS Code",
    "content": "Visual Studio Code \u0026 Jupyter Notebook Dans ce cours, nous allons utiliser deux outils pour analyser des données scientifiques avec Python. Il s’agit de Visual Studio Code et Jupyter Notebook.\nVisual Studio Code Visual Studio Code est comme un cahier de notes pour écrire du code.\nIl est gratuit et peut être utilisé avec beaucoup de langages de programmation, dont Python.\nIl a des fonctionnalités cool, comme :\naider à compléter le code. trouver des erreurs mettre en forme le code, etc. On peut aussi ajouter des extensions pour avoir plus de fonctionnalités, comme intégrer des bibliothèques scientifiques, des vérificateurs de code, des testeurs, etc.\nVisual Studio Code est donc un super outil pour écrire, exécuter et tester du code Python de manière efficace.\nL’interface de VS Code Visual Studio Code: Guide d’utilisation\nJupyter Notebook Jupyter Notebook est comme un cahier de laboratoire interactif sur le web.\nOn peut y créer et partager des documents qui contiennent du code, des résultats, des explications, des graphiques, etc.\nC’est un outil très pratique pour :\nexplorer des données. faire des analyses. montrer des informations, etc. Il facilite la création de la documentation.\nJupyter Notebook peut être utilisé avec plusieurs langages de programmation, mais il est surtout utilisé avec Python.\nPour l’utiliser, il faut installer un environnement Python, qui fournit les bibliothèques nécessaires. Ces deux outils ont des avantages et des inconvénients, et ils sont complémentaires.\nSi vous souhaitez les installer, les configurer et les utiliser chez vous sur votre ordinateur personnel pour analyser des données scientifiques avec Python, ci-dessous vous trouverez des ressources utiles.\nInstallation des outils Pour ceux qui ont un système d’exploitation Windows, voici deux fichiers exécutables qui installeront automatiquement VS Code, Python et toutes les librairies nécessaires :\nPremière étape Deuxième étape Pour une installation manuelle : voici les liens utiles pour installer les outils de développement (sur votre ordinateur personnel):\nTélécharger et installer Python : Python\nTélécharger et installer Visual Studio Code : Visual Studio Code - Mac, Linux, Windows\nLes extensions et bibliothèques à installer dans VS Code: Python, Run, Pandas, Numpy, Matplotlib, SciPy Tutoriel pour installer des extensions sur VS Code\nInstaller Jupyter Notebook sur Visual Studio Code (en anglais) : How to Install Jupyter Notebook in VSCode | Jupyter Notebook in Visual Studio Code (Easy)\nTutoriel pour VS Code et Jupyter Notebook Voici un fichier qui vous expliquera comment utiliser jupyter notebook dans VS Code : Tutoriel pour utiliser Jupyter avec VS Code",
    "description": "Visual Studio Code \u0026 Jupyter Notebook Dans ce cours, nous allons utiliser deux outils pour analyser des données scientifiques avec Python. Il s’agit de Visual Studio Code et Jupyter Notebook.\nVisual Studio Code Visual Studio Code est comme un cahier de notes pour écrire du code.",
    "tags": [],
    "title": "Visual Studio Code \u0026 Jupyter",
    "uri": "/bases/outils/vs-code/vs-code-jupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Utilisation de VS Code",
    "content": "Sur cette page, vous trouverez les étapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est présent à droit du nom du fichier dans l’onglet en haut, c’est que votre travail n’est PAS sauvegardé (comme dans l’exemple ci-dessous).\nPour ACTIVER la sauvegarde automatique, allez dans fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet à gauche de cette option.\nIl devrait maintenant avoir un X à gauche du nom du fichier dans l’onglet du haut. Ce qui signifie que le fichier est sauvegardé.\nEnregistrer sous Lorsque vous ouvrez un fichier que vous avez téléchargé (de la page du cours), vous pouvez l’enregistrer sous afin qu’il se sauvegarde au bon endroit. Par exemple dans votre One Drive du collège.\nSélectionnez Fichier, puis enregistrer sous.\nAssurez de choisir le bon dossier (exemple: OneDrive\\420-SN1-RE\\semaine_2). Vous pouvez renommer le fichier si vous le désirez. Ensuite, appuyez sur Enregistrer.\nOuvrir le dossier Dans le panneau de gauche, sélectionnez Ouvrir le dossier. L’option Ouvrir le dossier est aussi dans l’onlget Fichier.\nSélectionnez le dossier dans lequel vous voulez travailler.\nDans le panneau de gauche, vous devriez avoir tous les dossiers et fichiers contenus dans le dossier que vous avez choisi.\nDans l’exemple ci-dessous, nous pouvons voir le fichier (programme.ipynb) qui a été sauvegardé dans la semaine 3.",
    "description": "Sur cette page, vous trouverez les étapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est présent à droit du nom du fichier dans l’onglet en haut, c’est que votre travail n’est PAS sauvegardé (comme dans l’exemple ci-dessous).",
    "tags": [],
    "title": "Sauvegarde avec Visual Studio Code",
    "uri": "/bases/outils/vs-code/sauvegarge-automatique/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Google Colab, ou Colaboratory, est un service cloud gratuit proposé par Google, basé sur Jupyter Notebook. Colab permet d’exécuter du code Python directement dans le navigateur sans nécessiter de configuration préalable, tout en offrant un accès gratuit aux processeurs graphiques (GPU ou Graphics Processing), pour accélérer les calculs.\nAccéder à Google Colab Pour commencer à utiliser Google Colab, suivez ces étapes simples :\nVia le site de Google Colab Allez sur le site: Google Colab. Cliquez sur le bouton Open Colab. Si la fenêtre Ouvrir le notebook s’ouvre, cliquez sur le bouton + Nouveau notebook pour créer un nouveau notebook. Sinon, une fois sur l’interface de Colab, vous pouvez créer un nouveau notebook en utilisant le menu Fichier et en sélectionnant Nouveau notebook. Les notebooks Colab permettent d’écrire et d’exécuter du code Python. Par exemple, pour exécuter une cellule de code, cliquez dessus et appuyez sur le bouton de lecture ou utilisez le raccourci clavier Ctrl+Entrée.\nVia votre compte Google Drive Ouvrez votre compte Google Drive, cliquez sur Nouveau, puis sur Plus et sélectionnez Google Colaboratory. Utilisation des bibliothèques Python Colab permet d’utiliser des bibliothèques populaires pour l’analyse et la visualisation des données. Par exemple, pour générer des données aléatoires avec NumPy et les visualiser avec Matplotlib :\nimport numpy as np import matplotlib.pyplot as plt ys = 200 + np.random.randn(100) x = [x for x in range(len(ys))] plt.figure(figsize=(10, 6)) plt.plot(x, ys, '-') plt.fill_between(x, ys, 195, where=(ys \u003e 195), facecolor='g', alpha=0.6) plt.show() Collaboration et partage Les notebooks Colab sont enregistrés dans votre compte Google Drive, ce qui facilite le partage et la collaboration. Vous pouvez partager vos notebooks avec d’autres utilisateurs, qui peuvent les commenter ou les modifier.\nUtiliser Colab Lire ce notebook",
    "description": "Google Colab, ou Colaboratory, est un service cloud gratuit proposé par Google, basé sur Jupyter Notebook. Colab permet d’exécuter du code Python directement dans le navigateur sans nécessiter de configuration préalable, tout en offrant un accès gratuit aux processeurs graphiques (GPU ou Graphics Processing), pour accélérer les calculs.\nAccéder à Google Colab Pour commencer à utiliser Google Colab, suivez ces étapes simples :",
    "tags": [],
    "title": "Google Colab",
    "uri": "/bases/outils/google-colab/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Chers élèves,\nNous vous rappelons que dans le cadre de ce cours, il est impératif d’utiliser seulement les notions, fonctions et concepts qui ont été abordés en classe. Cela garantit une compréhension solide et progressive des sujets traités.\nNote importante : L’utilisation d’outils d’intelligence artificielle pour générer du code, peut parfois fournir du code qui dépassent le cadre des notions étudiées.\nAttention Si vous soumettez du code contenant des éléments avancés qui n’ont pas été vus dans le cours, vous recevrez une note de 0 pour l’évaluation.\nPS: Dans Base de connaissances, vous trouverez un ensemble de connaissances plus avancées, sur Python et la programmation en général, tel qu’un lexique. Il s’agit de pages de références.\nMerci de votre compréhension et de votre coopération.",
    "description": "Chers élèves,\nNous vous rappelons que dans le cadre de ce cours, il est impératif d’utiliser seulement les notions, fonctions et concepts qui ont été abordés en classe. Cela garantit une compréhension solide et progressive des sujets traités.\nNote importante : L’utilisation d’outils d’intelligence artificielle pour générer du code, peut parfois fournir du code qui dépassent le cadre des notions étudiées.",
    "tags": [],
    "title": "Programmation en sciences",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
