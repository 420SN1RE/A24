+++
title = "Vérification du fonctionnement d'un programme"
weight = 35
+++

![Vérification du fonctionnement](../assets/images/verification.jpg?width=25vw).

## Vérification du fonctionnement d'un programme

- La méthode `print` est l'une des techniques les plus simples et les plus couramment utilisées pour déboguer un programme en Python. 
- Bien que ce ne soit pas la méthode la plus sophistiquée ni la plus efficace pour les projets complexes, `print` peut être extrêmement utile pour comprendre le flux d'exécution d'un programme, inspecter les valeurs des variables et identifier les points où le programme ne fonctionne pas comme prévu. 

## Principe de base

- L'idée de base de l'utilisation de `print` pour le débogage est d'insérer des instructions `print` à divers endroits du programme pour afficher les valeurs des variables. 
- Cela permet de suivre l'exécution du programme et de localiser les problèmes.

```python
def addition(a, b):
    print(f"Entrée dans la fonction addition avec a={a} et b={b}")
    resultat = a + b
    print(f"Résultat de l'addition: {resultat}")
    return resultat

# Exemple d'utilisation
resultat = addition(3, 5)
print(f"Le résultat final est: {resultat}")
```
## Inspection des variables

- L'une des utilisations les plus courantes de `print` est d'inspecter les valeurs des variables à différents points du programme. 
- Cela permet de vérifier que les variables contiennent les valeurs attendues.

```python
def calculer_somme_liste(liste):
    somme = 0
    for element in liste:
        print(f"Ajout de {element} à la somme actuelle de {somme}")
        somme += element
    print(f"La somme totale est: {somme}")
    return somme

# Exemple d'utilisation
ma_liste = [1, 2, 3, 4]
resultat = calculer_somme_liste(ma_liste)
print(f"Le résultat final est: {resultat}")
```
{{% notice info %}}
Nous étudierons les instructions répétitives `for` et `while` (semaine 5) et les listes (semaine 6) dans ce cours.
{{% /notice %}}

## Suivi du flux d'exécution

- En ajoutant des instructions `print` à différents endroits du programme, vous pouvez suivre le flux d'exécution et voir quelles parties du code sont exécutées. 
- Cela est particulièrement utile pour les structures de contrôle comme les boucles et les conditions que nous étudierons prochainement.

```python
def verifier_parite(nombre):
    print(f"Vérification de la parité pour le nombre: {nombre}")
    if nombre % 2 == 0:
        print("Le nombre est pair")
        return True
    else:
        print("Le nombre est impair")
        return False

# Exemple d'utilisation
for i in range(5):
    resultat = verifier_parite(i)
    print(f"Le nombre {i} est pair: {resultat}")
```

{{% notice info %}}
Nous étudierons les structures de contrôle `if`, `else` et `elif` la semaine prochaine.
{{% /notice %}}

## Débogage des fonctions récursives

- Le débogage des fonctions récursives peut être particulièrement difficile. 
- L'utilisation de `print` pour afficher les valeurs des arguments à chaque appel récursif peut aider à comprendre le comportement de la fonction.

```python
def factorielle(n):
    print(f"Calcul de factorielle({n})")
    if n == 0:
        return 1
    else:
        resultat = n * factorielle(n - 1)
        print(f"Résultat intermédiaire pour factorielle({n}): {resultat}")
        return resultat

# Exemple d'utilisation
resultat = factorielle(5)
print(f"Le résultat final est: {resultat}")
```
{{% notice info %}}
Nous étudierons les `fonctions` (sous-programmes) plus tard dans ce cours.
{{% /notice %}}

## Messages d'erreur et expressions conditionnelles

- Inclure des messages d'erreur conditionnels peut aider à identifier pourquoi une certaine branche du code est exécutée ou pourquoi une erreur se produit.

```python
def division(a, b):
    if b == 0:
        print("Erreur: Tentative de division par zéro")
        return None
    else:
        resultat = a / b
        print(f"Résultat de la division: {resultat}")
        return resultat

# Exemple d'utilisation
resultat = division(10, 0)
if resultat is not None:
    print(f"Le résultat final est: {resultat}")
```

## Les limites de la méthode print

- Bien que la méthode `print` soit simple et efficace pour les petits projets ou pour un débogage rapide, elle présente des limites, notamment :

	- **Verbiage excessif** : Trop d'instructions `print` peuvent rendre la sortie du programme difficile à lire.
	- **Performance** : L'utilisation excessive de `print` peut ralentir l'exécution du programme.
	- **Gestion des erreurs** : `print` ne gère pas les exceptions ou les erreurs de manière structurée.

{{% notice warning %}}
Pour ces raisons, il est souvent préférable d'utiliser des outils de débogage plus avancés, comme les tests unitaires ou les débogueurs intégrés, pour les projets plus complexes.
{{% /notice %}}

## Atelier

[Les erreurs de syntaxe](/Semaine3/atelier-erreurs_syntaxe.ipynb)