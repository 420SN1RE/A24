<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Révision des semaines 1 à 6 :: 420-SN1-RE</title>
    <link>https://example.org/semaine7/index.html</link>
    <description>Objectifs de la leçon Réviser les notions vues jusqu’à présent en mettant l’emphase sur les éléments de compétence obligatoires. Plan de la leçon Quiz: Les listes et les chaines de caractères (10 mins)&#xA;Révision:&#xA;Compréhension de la syntaxe de base : Connaître les types de données, les variables, les opérateurs, et les structures de contrôle comme les conditions et les boucles. Manipulation des structures de données : Savoir utiliser les listes pour organiser et gérer les données. Programmation orientée objet (POO) : Comprendre le concept d’objets à l’aide des chaines de caractères. Deux exercices récapitulatifs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://example.org/semaine7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python: La base</title>
      <link>https://example.org/semaine7/python-base/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/semaine7/python-base/index.html</guid>
      <description>Les variables et les types de données On utilise des variables en programmation pour stocker des informations que l’on peut réutiliser et manipuler plus tard au lieu d’écrire à nouveau la valeur. Les types des variables et les transtypage Python supporte plusieurs types de données de base. Pour l’instant nous avons vu: nombre_entier = 15&#x9;# int nombre_flottant = 15.0&#x9;# float chaine_caracteres = &#34;Je suis une chaine de caractères&#34; # str chaine_caracteres = &#39;Je suis aussi une chaine de caractères&#39;&#x9;# str valeur_booleenne = True&#x9;# bool autre_valeur_booleenne = False&#x9;# bool une_liste = [1, 2, 3, 4, 5]&#x9;# list Une_autre_liste = [&#34;Lundi&#34;, &#34;Mardi&#34;, &#34;Mercredi&#34;, &#34;Jeudi&#34;, &#34;Vendredi&#34;]&#x9;# list Transtypage : C’est la conversion d’un type de données à un autre. Par exemple, convertir une chaîne en entier avec int(&#34;123&#34;) ou un entier en chaîne avec str(123). Utilisation de variables Avant d’utiliser une variable, il faut la déclarer, c’est-à-dire la nommer et lui donner une valeur. Le nom d’une variable doit respecter certains critères: Ils doivent commencer par une lettre ou un underscore (_), suivis de lettres, chiffres ou underscores. Ils sont sensibles à la casse (age et Age sont différents). Ils ne peuvent contenir ni espaces, ni lettres accentuées. Attention Si vous oubliez de déclarer une variable avant de l’utiliser, ou si vous vous trompez en écrivant son nom, cela causera l’erreur NameError comme dans l’exemple ci-dessous:</description>
    </item>
    <item>
      <title>Les ordinogrammes</title>
      <link>https://example.org/semaine7/ordinogramme/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/semaine7/ordinogramme/index.html</guid>
      <description>Qu’est-ce qu’un ordinogramme ? Un ordinogramme est une représentation graphique des étapes d’un algorithme. Il utilise des symboles normalisés pour représenter différentes actions ou décisions, et des flèches pour indiquer la séquence des étapes.&#xA;Symboles courants Oval : Début et fin du processus. Rectangle : Action ou opération. Losange : Décision ou condition. Parallélogramme : Entrée ou sortie de données. Flèches : Indiquent la direction du flux. Utilisation des ordinogrammes Planification : Aide à planifier et à organiser les étapes d’un programme avant de coder. Communication : Facilite la communication de la logique du programme entre les membres d’une équipe. Débogage : Aide à identifier et à corriger les erreurs logiques dans un programme. Documentation : Sert de documentation visuelle pour le programme, utile pour la maintenance future. Exemple (avec saisie au clavier, conditions et boucle) Voici un exemple d’ordinogramme pour un programme qui :</description>
    </item>
    <item>
      <title>Les listes</title>
      <link>https://example.org/semaine7/listes/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/semaine7/listes/index.html</guid>
      <description>Comment créer une liste ma_liste_vide = [] ma_liste = [1, 2, 3, 4, 5] Comment accéder aux éléments d’une liste premier_element = ma_liste[0] # Accède au premier élément dernier_element = ma_liste[-1] # Accède au dernier élément Comment ajouter ou supprimer des éléments ma_liste.append(6) # Ajoute 6 à la fin de la liste ma_liste.remove(3) # Supprime la première occurrence de 3 Comment modifier un élément d’une liste ma_liste[1] = 10 # Change le deuxième élément en 10 Comment lire les éléments d’une liste un à un (boucle) for element in ma_liste: print(element) Comment extraire une sous-liste d’une liste sous_liste = ma_liste[1:3] # Prend les éléments de l&#39;indice 1 à 2 Comment obtenir l’indice (position) d’un élément dans une liste ma_liste.index(element, debut, fin)</description>
    </item>
    <item>
      <title>Les chaines de caractères</title>
      <link>https://example.org/semaine7/chaines/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/semaine7/chaines/index.html</guid>
      <description>L’échappement de caractères L’échappement de caractères permet d’inclure des caractères spéciaux dans une chaîne de caractères. Cela se fait en utilisant le caractère de barre oblique inverse (\). Caractères spéciaux courants :&#xA;\&#39; : Apostrophe ou guillemet simple \&#34; : Guillemets doubles \\ : Barre oblique inverse \n : Nouvelle ligne \t : Tabulation chaine = &#34;Ceci est une ligne.\nEt ceci est une nouvelle ligne.&#34; print(chaine) # Affiche : # Ceci est une ligne. # Et ceci est une nouvelle ligne. Inclure des guillemets dans une chaîne :</description>
    </item>
    <item>
      <title>Exercices récapitulatifs</title>
      <link>https://example.org/semaine7/exercice/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/semaine7/exercice/index.html</guid>
      <description>Objectif : Ces exercices visent à évaluer votre compréhension de la syntaxe de base (variables et types de données, l’interaction avec le programme, les expressions booléennes et les conditions, les boucles, la manipulation des listes des chaînes de caractères.&#xA;En bas de l’énoncé de cet exercice, vous avez des exemples de résultats attendus.&#xA;Exercice 1 Contexte Vous allez créer un programme en Python pour analyser une chaîne de caractères saisie au clavier. Le programme doit compter le nombre de caractères, identifier les caractères uniques et calculer la fréquence de chaque caractère.</description>
    </item>
    <item>
      <title>Pour le prochain cours</title>
      <link>https://example.org/semaine7/pour-le-prochain-cours/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/semaine7/pour-le-prochain-cours/index.html</guid>
      <description>Pour augmenter vos chances de réussite Réviser (refaire ou faire les ateliers) des six premières semaines. Réviser la matière sur les listes, les chaines de caractères les objets, en vue du quiz qui aura lieu au début du prochain cours (arrivez à l’heure) Lire les notes de cours sur la matière du cours de la semaine 8. Note Si vous étiez présent au cours, posez moi des questions lorsque vous avez de la difficulté. N’attendez pas que la matière se complique.</description>
    </item>
  </channel>
</rss>